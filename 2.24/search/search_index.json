{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Open Active Management Technology Cloud Toolkit (Open AMT Cloud Toolkit) offers open-source microservices and libraries to streamline Intel AMT integration, simplifying out-of-band management solutions for Intel vPro Platforms.</p> Long-Term Support (LTS) Version <p>Not looking for the current rapid release with the latest features? See the documentation for our Long-Term Support release.</p> <ul> <li> <p> Set up in 30 minutes</p> <p>Jump into Open AMT Cloud Toolkit by deploying locally with Docker containers.</p> <p> Get Started Now</p> </li> <li> <p> Guided Tutorials</p> <p>Get hands-on with tutorials for topics like the UI-Toolkit, APIs, and Scaling (Docker, Kubernetes, and more).</p> <p> Explore the Tutorials</p> </li> <li> <p> APIs</p> <p>See supported APIs for both the Management Presence Server (MPS) and the Remote Provisioning Server (RPS).</p> <p> Check out the APIs</p> </li> <li> <p> Join Our Community</p> <p></p> </li> </ul> <p></p> <p>The Intel vPro\u00ae Platform, featuring Intel\u00ae AMT, enables Out-of-Band (OOB) Management for remote devices. No matter if the device is powered off or the operating system has crashed, issue power actions and take over keyboard, video, mouse (KVM) control.</p> <p>Reduce the need for costly on-site IT, minimize the downtime of key, business-critical devices, and more. Read more about the Intel vPro\u00ae Platform.</p> Figure 1: Open AMT Cloud Toolkit features OOB Management <p>Intel\u00ae AMT supports remote manageability with: </p> <p>OOB Management: This hardware-based remote management solution operates below the operating system.</p> <p>Call Home: This capability enables administrators to control, update, and modify remote clients with OOB Management.</p>"},{"location":"#goals","title":"Goals","text":"<p>The toolkit guide provides instructions to:</p> <ul> <li>Deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) on the development system.</li> <li>Build and run Remote Provisioning Client (RPC) on the managed device.</li> <li>Connect the managed device (edge device).</li> </ul> <p>Additional sections provide guidance on the reference implementation UI Toolkit, REST API usage, asset security, and more. </p> Figure 2: High-level architecture: major software components <p>As shown in Figure 2, Open AMT Cloud Toolkit high-level architecture consists of five components:</p> <ol> <li>MPS - A microservice that uses an Intel vPro\u00ae Platform feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or Keyboard, Video, Mouse (KVM) control.</li> <li>RPS - A microservice that activates Intel\u00ae AMT platforms using predefined profiles and connects them to the MPS for manageability use cases.</li> <li>RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT.</li> <li>UI Toolkit - A toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the KVM, to a console. </li> <li>Sample Web UI - A web based UI that demonstrates how to use the UI-Toolkit. It also provides a way to interact with the microservices and to help provide context as to how each microservice is used.</li> </ol> <p>Integrate the Open AMT Cloud Toolkit into new and existing management consoles, software solutions, and more.</p>"},{"location":"#toolkit-setup","title":"Toolkit Setup","text":""},{"location":"#microservices-as-containers","title":"Microservices as Containers","text":"<p>Set up microservices quickly as Docker containers with this recommended method.</p> <p>Get Started Now</p> <p>Estimated completion time: Approximately 30 minutes</p>"},{"location":"#additional-intel-amt-resources","title":"Additional Intel\u00ae AMT Resources","text":"<p>For additional information about Intel\u00ae AMT, see the following links:</p> <ul> <li>Intel vPro\u00ae Platform Overview</li> <li>Video Link</li> <li>Detailed Setup document</li> </ul>"},{"location":"Glossary/","title":"Glossary","text":"<p>Open Active Management Technology (Open AMT) Cloud Toolkit, also referred to as (OAMTCT) Related Terminology, Technologies, and Acronyms</p> <p>A | B | C | D | E | F | G | H | I | J | K | L | M | N |O | P | Q | R | S | T | U |V | W | X | Y | Z</p>"},{"location":"Glossary/#a","title":"A","text":"<p>admin control mode (ACM): A mode of provisioning Intel\u00ae AMT that requires a purchased provisioning certificate from a Certificate Authority (CA), the creation of a domain, and the creation of a profile in the Remote Provisioning Server (RPS) application. ACM achieves a higher level of trust than client control mode (CCM). This is the required mode for Keyboard, Video, Mouse (KVM) or Redirection without user consent. See also CCM and provisioning.</p> <p>ACM Activation: The act of loading a purchased certificate and associating it with an OAMTCT profile.</p> <p>allowlist: A list permitting access to a privilege, service, network, etc.</p>"},{"location":"Glossary/#b","title":"B","text":"<p>Basic Input/Output System (BIOS): Firmware that performs hardware initialization and configuration upon startup. See MEBX. </p>"},{"location":"Glossary/#c","title":"C","text":"<p>certificate (provisioning): A digitally signed document used in the provisioning of an edge device featuring Intel\u00ae AMT. The Intel\u00ae AMT firmware is pre-loaded with Transport Layer Security (TLS) certificate thumbprints of different certificate vendors. A digital certificate binds the identity of the certificate holder to vendor-specific thumbprints. To provision an edge device, users must purchase a certificate from an approved vendor. </p> <p>Client Initiated Remote Access (CIRA): An out-of-band (OOB) management communication protocol that network clients can use to initiate a secure connection with a server. </p> <p>Client Control Mode (CCM): An alternative to ACM provisioning mode that does not require a purchased certificate. Use this mode to set up OAMTCT software features quickly.</p> <p>Container (Docker*): The instantiation, or running instance, of a Docker image.</p>"},{"location":"Glossary/#d","title":"D","text":"<p>development system: The system on which Management Presence Server (MPS) and Remote Provision Server (RPS) are installed.</p> <p>Docker*:  A platform that employs the idea of containerization, isolating a unit of software, such as an application, from its environment. Containerization creates applications as lightweight, discrete processes that can be deployed to the cloud as services. See Docker for more information. </p> <p>Domain Name System (DNS) suffix: A suffix appended to the hostname of a DNS name.</p> <p>domain suffix: The top-level portion or end of a domain name (i.e., com, net, org).  </p>"},{"location":"Glossary/#e","title":"E","text":"<p>Edge Devices:  A device or piece of hardware that serves as an entry point into an enterprise or service provider network. Edge devices include those related to banking, retail, hospitality, point-of-sale, etc. </p>"},{"location":"Glossary/#g","title":"G","text":"<p>Globally Unique Identifier (GUID): A 128-bit integer used to identify a system resource.</p>"},{"location":"Glossary/#i","title":"I","text":"<p>Intel\u00ae Active Management Technology (Intel\u00ae AMT): A technology that provides out-of-band management and security features on an Intel vPro\u00ae Platform. See general overview of features.</p> <p>Intel vPro\u00ae Platform: An Intel\u00ae platform created for business environments. Intel vPro\u00ae technology features Intel\u00ae Core\u2122 i5, Intel\u00ae Core\u2122 i7, and Intel\u00ae Core\u2122 i9 vPro\u00ae processors, built-in security features, and out-of-band manageability using Intel\u00ae AMT.  See more about the platform.</p> <p>Images (Docker*):  a set of instructions that determine the creation of an instantiated container  on a Docker platform.</p>"},{"location":"Glossary/#k","title":"K","text":"<p>Keyboard, Video, Mouse (KVM):  A technology, often a device, that allows a user to control multiple computers from a single keyboard, mouse, and video source.</p>"},{"location":"Glossary/#l","title":"L","text":"<p>lights-out management (LOM): See out-of-band management. </p>"},{"location":"Glossary/#m","title":"M","text":"<p>managed (edge) device: An Intel vPro\u00ae Platform that features Intel\u00ae AMT and functions as an edge device.</p> <p>Manageability Engine BIOS Extensions (MEBX): A BIOS extension that enables the configuration of the Intel\u00ae AMT.</p> <p>Management Presence Server (MPS): A microservice that resides on the development system and enables platforms featuring featuring Intel\u00ae AMT. The MPS receives CIRA requests from the managed device. </p> <p>microservice: A software unit or module of a microservice architecture. In OAMTCT architecture, MPS and RPS are microservices residing on the development system. </p> <p>microservice architecture: An architecture in which the component parts are broken into discrete services, called microservices, that perform specific, limited functions. </p>"},{"location":"Glossary/#n","title":"N","text":"<p>Node.js*: An open source JavaScript* runtime created for asynchronous, event-driven backend network applications. See more about node.js.</p> <p>Node Package Manager (npm):  a command line utility in node.js. The utility enables the management of packages, versions, and dependencies in node projects. </p>"},{"location":"Glossary/#o","title":"O","text":"<p>Open Active Management Technology (Open AMT) Cloud Toolkit: An open source software architecture consisting of modular microservices and libraries for integration of out-of-band manageability into existing network infrastructures. The software enables network administrators and independent software vendors (ISVs) to explore key Intel\u00ae AMT features. See more about Open AMT Cloud Toolkit features.</p> <p>out-of-band (OOB) manageability: A remote management technology that allows administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, OAMTCT software can perform remote management, including powering up a system that is currently powered down. </p>"},{"location":"Glossary/#p","title":"P","text":"<p>profile:  A set of configuration information, including a password and provisioning method, provided to Intel\u00ae AMT firmware during the activation process. </p> <p>provision or provisioning: The act of setting up a remote client, system, or device, on a network using a digitally signed certificate as a security credential. </p>"},{"location":"Glossary/#q","title":"Q","text":""},{"location":"Glossary/#r","title":"R","text":"<p>Remote Provision Client (RPC): A lightweight client application that resides on the managed device. The RPC communicates with the Manageability Engine Interface (MEI) in the Management Engine (ME) driver to activate Intel\u00ae AMT. </p> <p>Remote Provision Server (RPS): A node.js-based microservice that works with the Remote Provision Client (RPC) to activate Intel\u00ae AMT using a pre-defined profile.</p> <p>REpresentational State Transfer (REST) API: An architectural style or set of rules describing constraints that allow administrators and developers to take advantage of various Web services. In the context of OAMTCT, administrators can construct REST API calls and run them with node, use provided REST code snippets to expand the reference implementation console, and use provided REST code snippets as a springboard for developing and expanding custom consoles.</p>"},{"location":"Glossary/#s","title":"S","text":"<p>Sample Web UI: A reference UI implementation serving as a demo vehicle and utilizing components of the UI toolkit.</p>"},{"location":"Glossary/#t","title":"T","text":""},{"location":"Glossary/#u","title":"U","text":"<p>UI Toolkit: A modular, REST-based API consisting of code snippets developers can use to implement AMT features and services to their manageability console. </p>"},{"location":"Glossary/#v","title":"V","text":"<p>vcpkg: A command-line application that helps manage package creation and C and C++ libraries on Windows, Linux, and MacOS*.</p> <p>Vault storage: A service that manages encryption and storage of infrastructure secrets. </p>"},{"location":"Glossary/#w","title":"W","text":"<p>WebSocket*: A communication protocol that enables persistent connections and full-duplex communication between clients and servers.</p> <p>Web Service Management (WS-MAN): A SOAP-based protocol for exchanging management data between network devices.</p>"},{"location":"Glossary/#x","title":"X","text":""},{"location":"Glossary/#y","title":"Y","text":""},{"location":"Glossary/#z","title":"Z","text":""},{"location":"announcements/","title":"Announcements","text":""},{"location":"announcements/#open-amt-cloud-toolkit-20-is-here","title":"Open AMT Cloud Toolkit 2.0 is here!","text":"<p>We have been preparing for this for quite a while and we know many of our customers have been eagerly awaiting this announcement, our Long Term Support (LTS) release is here!  </p>"},{"location":"announcements/#what-does-having-an-lts-release-mean","title":"What does having an LTS release mean?","text":"<p>Starting with LTS, Open AMT Cloud Toolkit will now have two release streams that customers can use.  The current Rapid release stream continues to operate as it has been since the beginning of this year.  Every six weeks we'll release new features and fixes that customers can use to add out-of-band functionality to their device management solution.  For Long Term Support releases, new features will be added roughly every six months.  Only critical security and bug fixes will be applied between feature releases, maintaining a stable feature set for the LTS release.  When we release a new LTS version, all of the features in the current Rapid release stream will be merged to the LTS release stream.  Similar to Rapid Releases, only the latest LTS release will be actively supported and maintained.  With this release, both the Rapid and LTS releases are set to 2.0 and have the exact same feature set.  As we continue to release new Rapid releases, the Rapid release stream will continue to add new features while the LTS release stream will continue with the 2.0 feature set.</p>"},{"location":"announcements/#compatibility-between-versions","title":"Compatibility between versions","text":"<p>As we previously announced, with the major version change, we are strictly following semantic versioning, making all 2.X components compatible with each other.  It also means that our 1.X components are not supported with 2.X components.  In this release, all of our components have been versioned up to 2.0 and validated together to ensure compatibility.  While both Rapid and LTS releases that share the same major version should be compatible with each other, we won't be validating Rapid and LTS combinations, so it is recommended that customers use either all Rapid or all LTS components.</p>"},{"location":"announcements/#changes-coming-for-remote-provisioning-client","title":"Changes coming for Remote Provisioning Client","text":"<p>For 2.0, we are deprecating the C++ version of RPC in favor of our Go-based implementation. The reason for this is two-fold. First, we want to be able to take advantage of more modern tooling such as Snyk for Vulnerability Scanning, and Dependabot for dependency updates, among others. Secondly, the cloud focused technologies and protocols we use, which include REST and Websockets, have better support in modern languages. We still needed to balance the interaction between the AMT Firmware and the cloud which led to Go being a natural choice to use.  With the 2.0 release, we are providing an early look at the Go version of RPC.  Over the next few Rapid releases the functionality of the Go version will exceed that of the C++ version and customers will be encouraged to migrate.</p> <p>The entire Open AMT Cloud Toolkit team hopes you are as excited about this release as we are and we look forward to continuing to working with you!  You can read more about this release in our release notes.</p>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2019 Intel Corporation</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#release-highlights","title":"Release Highlights","text":"<p>Note From the Team</p> <p>With record temps in Arizona currently, the team has been enjoying their much needed AC and working away on Console. We've made great progress over the last month and you can get all our changes and fixes in our new, latest Alpha release.</p> <p>We are getting closer to an official Beta release! As we start to finish development on the core Console features, we'll be pivoting slightly and begin work on cleaning up the overall usability, bug fixes, and more.</p> <p>You can follow the progress of new Console features in our Feature Backlog.</p> <p>Best Wishes, </p> <p>The Open AMT Cloud Toolkit Team</p>"},{"location":"release-notes/#whats-new","title":"What's New?","text":"<p> Feature: WSMAN Explorer</p> <p>Console now has the ability to view both the correctly formatted WSMAN input sent to AMT and the WSMAN output response of the supported classes. This can be used to help with development or to view additional AMT data that might not be currently displayed in the default UI.</p> <p>Don't see the WSMAN class or call you are looking for? Submit an issue for Console.</p> <p>See the WSMAN Explorer Documentation for more info.</p> <p></p> <p> Enhancement: Local Management Service (LMS) No Longer Required</p> <p>RPC-Go now communicates directly with AMT without the need for the Local Management Service (LMS). Previously, this was already supported for remote configuration. Now, it is extended to include running local configuration commands. However, we still recommended installing and using LMS for local configuration.</p> Note - Additional Information about LMS <p>About</p> <p>The Local Management Service (LMS) is an application that assists with communication between AMT and the OS. Previously, this was required for running any local-based commands of RPC-Go (e.g. local activation or local configuration). </p> <p>Installation</p> <ul> <li>For Windows, the installer is included in the Intel\u00ae Management Engine Drivers package.</li> <li>For Linux distributions that support snap, LMS can be installed via https://snapcraft.io/lms.</li> <li>Customers interested in building LMS, can find build instructions at https://github.com/intel/lms.</li> </ul> <p>For additional information about LMS, visit https://github.com/intel/lms.</p> <p></p> <p> Community Contribution: <code>rpc amtinfo</code> Returns Both OS and AMT IP Addresses</p> <p> Big shout out to Github user @tongsean9807 for this contribution! </p> <p>The <code>amtinfo</code> command in RPC-Go now differentiates between the IP address set for AMT and the IP address set for the Operating System for deployments that choose to use separate IP addresses. See the RPC CLI Documentation for additional info about the <code>amtinfo</code> command.</p> <pre><code>---Wired Adapter---\nDHCP Enabled           : true\nDHCP Mode              : passive\nLink Status            : up\nAMT IP Address         : 0.0.0.0\nOS IP Address          : 192.168.1.91\nMAC Address            : 80:c4:a8:58:df:e9\n---Wireless Adapter---\nDHCP Enabled           : true\nDHCP Mode              : passive\nLink Status            : down\nAMT IP Address         : 0.0.0.0\nOS IP Address          : 192.168.1.91\nMAC Address            : 00:00:00:00:00:00\nCertificate Hashes     :\n</code></pre> <p></p>"},{"location":"release-notes/#get-the-details","title":"Get the Details","text":""},{"location":"release-notes/#additions-modifications-and-removals","title":"Additions, Modifications, and Removals","text":""},{"location":"release-notes/#console","title":"Console","text":"<p>v1.0.0-alpha.6</p> <ul> <li>fix: devices use unique connections now (3f3e29d)</li> <li>fix: registers routes required for monaco editor (1136f33)</li> </ul> <p>v1.0.0-alpha.5</p> <ul> <li>feat: added get certificates api (#135) (7e7bfd8)</li> <li>feat: adds amt explorer feature (#172) (9f3d70e)</li> <li>feat: domains check password and expiration (d687c30)</li> <li>feat: use dto in devices (#240) (99f97fc)</li> <li>feat: use dto in getfeatures (2d3bc4f)</li> <li>fix: ensure tagging is working with embedded SQL, fix alarms (#233) (9505a81)</li> <li>fix: logging level should now be respected (1308c83)</li> <li>test: added integration tests (#217) (3d2e033)</li> </ul>"},{"location":"release-notes/#rpc-go","title":"RPC-Go","text":"<p>v2.36.0</p> <ul> <li>feat: amtinfo command add amt ipaddr and osipaddr (#560)</li> </ul> <p>v2.35.0</p> <ul> <li>feat: enable local commands without lms (#486) (8b7e7b1)</li> </ul>"},{"location":"release-notes/#sample-web-ui","title":"Sample Web UI","text":"<p>v3.10.1</p> <ul> <li>fix: user consent flow for redirection (#2004) (7fa1633)</li> </ul> <p>v3.10.0</p> <ul> <li>feat: allow nontls option for console (#1999) (1ad376a)</li> </ul> <p>v3.9.1</p> <ul> <li>fix: updates event log to show decoded event information (#1996) (74aeca2)</li> </ul> <p>v3.9.0</p> <ul> <li>feat: adds audit log exstr data to table (#1994) (38b7ec0)</li> </ul> <p>v3.8.0</p> <ul> <li>feat: adds amt explorer (#1984) (2c804b5)</li> </ul> <p>v3.7.0</p> <ul> <li>feat: add tag management to add/edit device (7776742)</li> <li>feat: enable enterprise support (20b859c)</li> <li>feat: enable filtering by tag, and sorting by tag, filtering devices, and edit device (7d00989)</li> <li>feat: enable menu collapse (2223bb4) (5656707)</li> <li>feat: enable routing between device-detail components (b4fce50)</li> <li>fix: enables multiple explorer calls (74490f9)</li> <li>fix: hide generate random password in local mode (69d74e6)</li> <li>fix: xterm css (a3ff046)</li> </ul>"},{"location":"release-notes/#go-wsman-messages","title":"go-wsman-messages","text":"<p>v2.11.0</p> <ul> <li>feat: adds a function to indicate where successfully authenticated (#372) (a3f006e)</li> </ul> <p>v2.10.0</p> <ul> <li>feat: adds more audit log parsing for extended data (#351) (dfd5d46)</li> </ul> <p>v2.9.2</p> <ul> <li>fix: updated types for cim media access (#362) (da182c3)</li> </ul> <p>v2.9.1</p> <ul> <li>fix: tls connections for redirection (#361) (bda9672)</li> </ul> <p>v2.9.0</p> <ul> <li>feat: enables hw calls if lms not available (#327) (ac30948)</li> </ul>"},{"location":"release-notes/#project-boards","title":"Project Boards","text":"<p>Check out our new Sprint Planning project board to see what stories the dev team is actively working on, what is in our backlog, and what is planned for the next sprint.</p>"},{"location":"videos/","title":"Video Walkthroughs","text":""},{"location":"videos/#what-is-open-amt","title":"What is Open AMT","text":"<p>Learn the high-level basics and get familiar with the toolkit. Learn about the different microservices and their roles then get up to speed with the latest features, changes, and fixes.</p> Overview of Open AMT Cloud Toolkit <p>See what Open AMT Cloud Toolkit is and what you can do with it. Additional Resources: Architecture Overview, MPS Security Considerations, and RPS Security Considerations</p> <p></p><p></p> <p></p>"},{"location":"videos/#getting-started","title":"Getting Started","text":"<p>Watch how to go from cloning the toolkit to managing a device out-of-band remotely in under 20 minutes. Connect with Keyboard, Video, Mouse redirection and issue power commands.</p> Setting Up the Stack Configuring the Stack <p></p> <p>See how to setup Open AMT Cloud Toolkit locally using Docker. Additional Resources: Intel vPro Platform</p> <p></p> <p>Learn how to create custom profiles for device configuration and activation. Additional Resources: Passwords and What They Mean, Provisioning Certificates, and Setting a DNS Suffix via MEBX</p> Provisioning a Device Managing a Device <p></p> <p>See how to build the Remote Provisioning Client and use it to activate and configure an AMT device. Additional Resources: RPC as a Library and RPC Commands and Flags</p> <p></p> <p>Try some of the out-of-band manageability features like remote KVM and different Power Actions. Next Steps: Using REST APIs and Deploying with Kubernetes</p>"},{"location":"videos/#tutorials","title":"Tutorials","text":"<p>Learn more about the features of Open AMT through guided tutorials.</p> IDE-Redirection Tutorial Console Demo (Alpha Version) <p>Learn how to use IDE-Redirection for OS Reimaging and more using the Sample Web UI. Additional Resources: IDE-Redirection Tutorial</p> <p></p> <p>Check out a hands-on demo of the new web-based application, Console (currently in Alpha).Additional Resources: Getting Started with Console</p> <p></p>"},{"location":"APIs/indexMPS/","title":"Management Presence Server","text":""},{"location":"APIs/indexRPS/","title":"Remote Provisioning Server","text":""},{"location":"Deployment/centralizedConfiguration/","title":"Enable Consul","text":"<p>Centralized Configuration (Consul) is a Preview Feature</p> <p>The Consul implementation feature is a Preview Feature and is subject to change. This means it has not been fully validated and cannot be guaranteed to work. There are still potential bugs and tweaks needed for a production-level feature standard. Interested in this feature and helping us test it? Reach out via GitHub.</p> <p>Consul is a service networking solution and service mesh providing a wide variety of features to handle key networking or service management use cases. Read more about Consul in their documentation.</p> <p>Consul Use Cases:</p> <ul> <li>mTLS Encryption between Services</li> <li>Dynamic Load Balancing</li> <li>Observability (Health and Metrics)</li> <li>Centralized Configuration of Services</li> </ul>"},{"location":"Deployment/centralizedConfiguration/#consul-and-open-amt","title":"Consul and Open AMT","text":"<p>As part of Open AMT, we are currently focused on the last bullet point. We've introduced Hashicorp Consul as an optional deployable service to centralize and ease configuration of the MPS and RPS services. In the future, we may expand and incorporate other capabilities offered by Consul.</p> <p>MPS/RPS Startup Flows:</p> <ul> <li>If Consul exists on startup and empty, copy local configs into Consul.</li> <li>If Consul exists on startup and not empty, copy Consul configs down locally.</li> <li>If Consul does not exist on startup, load local configs into MPS/RPS.</li> </ul> <p>The two configuration files are stored as K/V pairs within Consul under:</p> <ul> <li>/MPS/config</li> <li>/RPS/config</li> </ul>"},{"location":"Deployment/centralizedConfiguration/#consul-configuration","title":"Consul Configuration","text":"<p>By default, Consul is deployed as part of the local Docker deployment in the <code>docker-compose.yml</code> file.  This is the default configuration. Currently, we do not provide a Kubernetes deployment example.</p> <p>The Consul configurations are stored in a local volume. When cleaning up containers, make sure to delete existing volumes.</p> <pre><code>  consul:\n    restart: always\n    image: hashicorp/consul\n    networks:\n      - openamtnetwork\n    ports: \n      - 8500:8500\n    volumes: \n       - type: volume \n         source: consul-config \n         target: /consul/config \n         volume: {} \n       - type: volume \n         source: consul-data \n         target: /consul/data \n         volume: {}    \n    command: \"agent -server -ui -node=OACT-1 -bootstrap-expect=1 -client=0.0.0.0\"\n</code></pre>"},{"location":"Deployment/centralizedConfiguration/#enable-consul","title":"Enable Consul","text":"<ol> <li> <p>This guide assumes you have completed the Getting Started Guide and have Open AMT currently running in Docker containers.  If not, follow the Get Started Guide Setup page. Stop and return here after the your services are running.</p> </li> <li> <p>In the <code>.env</code>, enable Consul and Save.</p> <pre><code># CONSUL\nCONSUL_ENABLED=true #update from false to true\nCONSUL_HOST=consul\nCONSUL_PORT=8500\n</code></pre> </li> <li> <p>Pull the Consul image. Read more about profiles in the Docker docs at Using profiles with Compose.</p> <pre><code>docker compose --profile consul pull\n</code></pre> </li> <li> <p>Start the Consul container.</p> <pre><code>docker compose --profile consul up -d\n</code></pre> </li> <li> <p>To view the Consul UI, visit <code>http://localhost:8500</code>.</p> </li> <li> <p>Click Key/Value from the left-hand menu.</p> <p> Figure 1: Consul K/V Overview Page </p> </li> <li> <p>Choose either the <code>/MPS</code> or <code>/RPS</code> directory, then <code>/config</code>.</p> <p> Figure 2: Consul K/V MPS Configuration </p> </li> <li> <p>From here, users can make edits to the config files and save.</p> <p>Note - Cleaning up Consul Container</p> <p>When stopping and cleaning up containers deployed using the <code>consul</code> profile, you must also use that profile when running <code>docker compose down</code> in order to remove all resources.</p> <p>Example: <pre><code>docker compose --profile consul down -v\n</code></pre></p> </li> </ol> <p>Today, the current preview implementation does not update the MPS or RPS services realtime. They must be restarted manually to apply the new configurations.  </p> <p>Follow along with any new updates and features using Consul in our Feature Backlog.</p> <p></p>"},{"location":"Deployment/overview/","title":"Overview","text":"<p>To deploy the Open AMT Cloud Toolkit to a production environment, replace default reference implementation components with more robust or full-featured components. Each section below lists the default reference implementation component included with toolkit along with suggestions for replacement. </p>"},{"location":"Deployment/overview/#database-selection","title":"Database Selection","text":"<p>The Docker-based PostgreSQL* image used in <code>docker-compose.yml</code> provides enough functionality for proof-of-concept creation and development. However, to enable the toolkit for production, leverage a managed database instance offered by a public cloud provider or a database hosted by your internal IT. </p> <p>Regardless of the deployment scenario (i.e., a VM, Kubernetes, Docker Swarm, a native environment), managing state in your cluster comes with a higher risk of data loss than that of a managed database instance.</p>"},{"location":"Deployment/overview/#default-component","title":"Default Component","text":"<ul> <li>PostgreSQL</li> </ul>"},{"location":"Deployment/overview/#example-replacements","title":"Example Replacements","text":"<ul> <li>Azure Database for PostgreSQL</li> <li>Azure SQL Database</li> <li>Amazon Relational Database Service (RDS)</li> <li>MS SQL Server</li> <li>MariaDB</li> </ul> <p>For more information about replacing the default toolkit database, see the Database Replacement guide.</p>"},{"location":"Deployment/overview/#secrets-management","title":"Secrets Management","text":"<p>A secret is any asset requiring controlled access, such as API keys, passwords, or certificates. </p> <p>The toolkit enables secrets management with HashiCorp Vault*, which provides a secure repository for storing and accessing sensitive assets. Vault offers a unified interface to any secret, tight access control, and a detailed audit log. </p> <p>While Vault provides a comprehensive solution for managing and persisting state in a K8s cluster, use of a managed secret provider, such as Azure Key Vault, offloads this role and helps reduce the overhead of secrets management in the toolkit. </p> <p>Additionally, if a secret provider is not necessary for your deployment, consider removing it and leveraging some other backing store for secrets.</p>"},{"location":"Deployment/overview/#default-component_1","title":"Default Component","text":"<ul> <li>HashiCorp Vault</li> </ul>"},{"location":"Deployment/overview/#example-replacements_1","title":"Example Replacements","text":"<ul> <li>Azure Key Vault</li> <li>AWS Key Management Service (KMS)</li> </ul> <p>For more information about replacing the default secret provider, see the Secrets Management guide.</p>"},{"location":"Deployment/overview/#api-gateway","title":"API Gateway","text":"<p>The toolkit uses Kong as its open source API gateway. Kong provides an entry point for external clients, anything not a part of the microservice system, and a comprehensive suite of plugins for various scenarios.</p>"},{"location":"Deployment/overview/#default-component_2","title":"Default Component","text":"<ul> <li>Kong</li> </ul>"},{"location":"Deployment/overview/#example-replacements_2","title":"Example Replacements","text":"<ul> <li>Azure API Gateway</li> <li>Amazon API Gateway</li> <li>Google Cloud Endpoints</li> <li>Tyk</li> </ul>"},{"location":"Deployment/overview/#centralized-configuration","title":"Centralized Configuration","text":"<p>Centralized Configuration (Consul) is a Preview Feature</p> <p>The Consul implementation feature is a Preview Feature and is subject to change. This means it has not been fully validated and cannot be guaranteed to work. There are still potential bugs and tweaks needed for a production-level feature standard. Interested in this feature and helping us test it? Reach out via GitHub.</p> <p>The toolkit utilizes Consul to implement centralized configuration of the MPS and RPS services. This is an optional, opt-in service that is deployed, but not enabled by default. </p>"},{"location":"Deployment/overview/#default-component_3","title":"Default Component","text":"<ul> <li>Hashicorp Consul</li> </ul>"},{"location":"Deployment/overview/#example-replacements_3","title":"Example Replacements","text":"<ul> <li>etcd</li> <li>Apache Zookeeper</li> </ul> <p>By default, Consul is deployed, but not utilized. For more information about enabling Consul, see the Service Mesh guide.</p>"},{"location":"Deployment/secrets/","title":"Secrets Store Replacement","text":"<p>To prepare for a production environment, replace Hashicorp Vault* with a secrets management provider. </p> <p>To replace secrets management, update these services:</p> <ul> <li>MPS</li> <li>RPS </li> </ul>"},{"location":"Deployment/secrets/#what-youll-do","title":"What You'll Do","text":"<p>This guide focuses on updating the secrets management with Azure Key Vault*. </p> <p>Here are the main tasks:</p> <ul> <li>Review Vault Schema</li> <li>Add Secret Provider Dependency (if necessary)</li> <li>Update Configuration</li> <li>Implement the Code</li> </ul> <p>Secrets Management Recipe</p> <p>The example implementation below provides a step-by-step outline of secrets management deployment. However, it is intended as a general guideline. You will need to write specific source code to support your custom solution. </p> <p>Note</p> <p>This guide will assume Azure Key Vault is already configured and ready for use as it focuses on the code that needs to be implemented in the microservices.</p>"},{"location":"Deployment/secrets/#review-vault-schema","title":"Review Vault Schema","text":"<p>Below are the paths/keys in the vault that are used by the Open AMT Cloud Toolkit.</p> <pre><code># RPS\nCIRAConfigs/[cira_config_name]/MPS_PASSWORD\n\ncerts/[domain_profile_name]/CERT\ncerts/[domain_profile_name]/CERT_PASSWORD\n\nprofiles/[profile_name]/AMT_PASSWORD\nprofiles/[profile_name]/MEBX_PASSWORD\n\nwireless/[wireless_profile_name]/PSK_PASSPHRASE\n\n# MPS\ndevices/[device_guid]/AMT_PASSWORD\ndevices/[device_guid]/MEBX_PASSWORD\ndevices/[device_guid]/MPS_PASSWORD\n</code></pre>"},{"location":"Deployment/secrets/#add-dependency","title":"Add Dependency","text":"<p>To install the required dependencies:</p> <p>Open a Terminal or Command Prompt and navigate to a directory of your choice for development:</p> <pre><code>npm install @azure/keyvault-secrets\n</code></pre> <pre><code>npm install @azure/identity\n</code></pre> <p>Note</p> <p>To read more about this dependency, check out Azure Key Value Secret Client library for JavaScript. </p>"},{"location":"Deployment/secrets/#update-configuration","title":"Update Configuration","text":"<p>To modify the configuration:</p> <ol> <li> <p>Modify the properties for Hashicorp Vault:</p> <p>Before:</p> <pre><code>{\n   \"secrets_path\": \"secret/data/\",\n   \"vault_address\": \"http://localhost:8200\",\n   \"vault_token\": \"myroot\",\n}\n</code></pre> <p>After:</p> <p>For Azure Key Vault, you only need the address:</p> <pre><code>{\n   \"secrets_path\": \"\",\n   \"vault_address\": \"https://&lt;YOUR KEYVAULT NAME&gt;.vault.azure.net\",\n   \"vault_token\": \"\",\n}\n</code></pre> </li> <li> <p>Set these three ENV variables:</p> <pre><code>AZURE_TENANT_ID=&lt;YOUR-TENANT-ID&gt;\nAZURE_CLIENT_ID=&lt;YOUR-CLIENT-ID&gt;\nAZURE_CLIENT_SECRET=&lt;YOUR-CLIENT-SECRET&gt;\n</code></pre> </li> </ol>"},{"location":"Deployment/secrets/#implement-the-code","title":"Implement the Code","text":"<p>To support secrets management:</p> <ol> <li> <p>Consider the exported interface <code>ISecretManagerService</code>.  </p> <pre><code>export interface ISecretManagerService \n{\n  getSecretFromKey: (path: string, key: string) =&gt; Promise&lt;string&gt;\n  getSecretAtPath: (path: string) =&gt; Promise&lt;any&gt;\n  listSecretsAtPath: (path: string) =&gt; Promise&lt;any&gt;\n  readJsonFromKey: (path: string, key: string) =&gt; Promise&lt;string&gt;\n  writeSecretWithKey: (path: string, key: string, keyvalue: any) =&gt; Promise&lt;void&gt;\n  writeSecretWithObject: (path: string, data: any) =&gt; Promise&lt;void&gt;\n  deleteSecretWithPath: (path: string) =&gt; Promise&lt;void&gt;\n}\n</code></pre> </li> <li> <p>This example focuses on <code>getSecretFromKey</code>, set up and implemented below:</p> <pre><code>  const { DefaultAzureCredential } = require(\"@azure/identity\")\n  const { SecretClient } = require(\"@azure/keyvault-secrets\")\n\n  export class AzureSecretManagerService implements ISecretManagerService \n  {\n       vaultClient: SecretClient\n       logger: ILogger\n\n       constructor (logger: ILogger) \n       {\n          // DefaultAzureCredential expects the following three environment variables:\n          // * AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n          // * AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n          // * AZURE_CLIENT_SECRET: The client secret for the registered application\n          const credential = new DefaultAzureCredential()\n\n          // Lastly, create our secrets client and connect to the service\n          const client = new SecretClient(EnvReader.GlobalEnvConfig.VaultConfig.address, credential);\n       }\n\n       async getSecretFromKey (path: string, key: string): Promise&lt;string&gt; \n       {\n          try\n          {\n           this.logger.verbose(`getting secret from vault: ${path}, ${key}`)\n            const latestSecret = await client.getSecret(key);\n            this.logger.debug(`got data back from vault: ${path}, ${key}`)\n            return latestSecret\n          } \n          catch (error) \n          {\n            this.logger.error('getSecretFromKey error \\r\\n')\n            this.logger.error(error)\n            return null\n          }\n       }\n  }\n</code></pre> <p>The example above is for one interface. You'll need to implement each interface defined in <code>ISecretManagerService</code>. </p> </li> <li> <p>After all the functions have been implemented, finish up by instantiating the <code>AzureSecretManagerService</code> in the <code>src/Configurator.ts</code> file.</p> <pre><code>  constructor()\n  {\n   //existing\n   //this.secretsManager = new SecretManagerService(new Logger('SecretManagerService'))\n   //new implementation\n   this.secretsManager = new AzureSecretManagerService(new Logger('AzureSecretManagerService'))\n  }\n</code></pre> </li> </ol> <p>Best Practice</p> <p>That's it! Deployment complete.</p> <p>After replacing the secrets management, ensure all the APIs are working as expected by running the API Tests with the Postman* application. You'll find the tests in the <code>./src/test/collections</code> folder.</p>"},{"location":"Deployment/upgradeVersion/","title":"Upgrade Toolkit Version","text":""},{"location":"Deployment/upgradeVersion/#specific-changes-required-for-version-upgrades","title":"Specific Changes Required for Version Upgrades","text":""},{"location":"Deployment/upgradeVersion/#upgrade-to-218-dec-23-from-217-nov-23","title":"Upgrade to 2.18 (Dec 23) from 2.17 (Nov 23)","text":"<p>The 2.17 release of Open AMT requires an upgrade to the <code>rpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to alter constraints before upgrading the services.</p> rpsdb<pre><code>ALTER TABLE IF EXISTS profiles\nADD COLUMN IF NOT EXISTS local_wifi_sync_enabled BOOLEAN NULL;\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql. </p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the constraints were modified correctly.     <pre><code>SELECT * FROM profiles;\n</code></pre></p> </li> </ol> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-217-nov-23-from-216-oct-23","title":"Upgrade to 2.17 (Nov 23) from 2.16 (Oct 23)","text":"<p>The 2.17 release of Open AMT requires an upgrade to the <code>mpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to alter constraints before upgrading the services.</p> mpsdb<pre><code>ALTER TABLE devices\nADD COLUMN IF NOT EXISTS lastconnected timestamp with time zone,\nADD COLUMN IF NOT EXISTS lastseen timestamp with time zone,\nADD COLUMN IF NOT EXISTS lastdisconnected timestamp with time zone;\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql. </p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>mpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>mpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d mpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d mpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d mpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the constraints were modified correctly.     <pre><code>SELECT * FROM devices;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with Upgrade a Minor Version steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-216-oct-23-from-215-sep-23","title":"Upgrade to 2.16 (Oct 23) from 2.15 (Sep 23)","text":"<p>The 2.16 release of Open AMT requires an upgrade to both the <code>mpsdb</code> and <code>rpsdb</code> databases. More information about why we've made this change can be found in the October 2023 Release Notes.</p> <ol> <li> <p>Run the following SQL script to alter constraints before upgrading the services.</p> mpsdb<pre><code>ALTER TABLE devices\nADD COLUMN IF NOT EXISTS deviceInfo json;\n</code></pre> rpsdb<pre><code>ALTER TABLE domains\nADD COLUMN IF NOT EXISTS expiration_date timestamp;\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql. Change the database passed using the <code>-d</code> flag to either <code>mpsdb</code> or <code>rpsdb</code> as needed.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>mpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>mpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d mpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d mpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d mpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the constraints were modified correctly.     <pre><code>SELECT * FROM devices;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with Upgrade a Minor Version steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-215-sep-23-from-214-aug-23","title":"Upgrade to 2.15 (Sep 23) from 2.14 (Aug 23)","text":"<p>The 2.15 release of Open AMT requires an upgrade to the <code>rpsdb</code> database. More information about why we've made this change can be found in the September 2023 Release Notes.</p> <ol> <li> <p>Run the following SQL script to alter constraints before upgrading the services.</p> <pre><code>ALTER TABLE domains\nDROP CONSTRAINT IF EXISTS domains_pkey;\nDROP INDEX CONCURRENTLY IF EXISTS lower_name_suffix_idx;\nALTER TABLE domains\nADD CONSTRAINT domainname UNIQUE (name, tenant_id);\nALTER TABLE domains\nADD PRIMARY KEY (name, domain_suffix, tenant_id);\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the constraints were modified correctly.     <pre><code>\\d domains;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with Upgrade a Minor Version steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#no-extra-changes-required-between-214-aug-23-and-211-may-23","title":"No Extra Changes Required between 2.14 (Aug 23) and 2.11 (May 23)","text":""},{"location":"Deployment/upgradeVersion/#upgrade-to-211-from-210","title":"Upgrade to 2.11 from 2.10","text":"<p>The 2.11 release of RPS requires an upgrade to the <code>rpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to add the new table before upgrading the services.</p> <pre><code>ALTER TABLE IF EXISTS profiles\nADD COLUMN IF NOT EXISTS ip_sync_enabled BOOLEAN NULL;\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the column was added to the table.     <pre><code>SELECT * FROM profiles;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with general upgrade steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-210-from-29","title":"Upgrade to 2.10 from 2.9","text":"<p>The 2.10 release of RPS requires an upgrade to the <code>rpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to add the new table before upgrading the services.</p> <pre><code>ALTER TABLE IF EXISTS wirelessconfigs\nADD COLUMN IF NOT EXISTS ieee8021x_profile_name citext,\nADD CONSTRAINT ieee8021xconfigs_fk FOREIGN KEY (ieee8021x_profile_name, tenant_id)  REFERENCES ieee8021xconfigs (profile_name, tenant_id);\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the column was added to the table.     <pre><code>SELECT * FROM wirelessconfigs;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with general upgrade steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-29-from-28","title":"Upgrade to 2.9 from 2.8","text":"<p>The 2.9 release of RPS requires an upgrade to the <code>rpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to add the new table before upgrading the services.</p> <pre><code>CREATE TABLE IF NOT EXISTS ieee8021xconfigs(\n    profile_name citext,\n    auth_protocol integer,\n    servername VARCHAR(255),\n    domain VARCHAR(255),\n    username VARCHAR(255),\n    password VARCHAR(255),\n    roaming_identity VARCHAR(255),\n    active_in_s0 BOOLEAN,\n    pxe_timeout integer,\n    wired_interface BOOLEAN NOT NULL,\n    tenant_id varchar(36) NOT NULL,\n    PRIMARY KEY (profile_name, tenant_id),\n);\n</code></pre> </li> <li> <p>Update the Profiles table.</p> <pre><code>ALTER TABLE IF EXISTS profiles\nADD COLUMN IF NOT EXISTS ieee8021x_profile_name citext,\nADD CONSTRAINT ieee8021xconfigs_fk FOREIGN KEY (ieee8021x_profile_name, tenant_id)  REFERENCES ieee8021xconfigs (profile_name, tenant_id);\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statements.</p> </li> <li> <p>Verify the column was added to the table.     <pre><code>SELECT * FROM ieee8021xconfigs;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with general upgrade steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-28-from-27","title":"Upgrade to 2.8 from 2.7","text":"<p>The 2.8 release of RPS requires an upgrade to the <code>rpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to add the new column before upgrading the services.</p> <pre><code>ALTER TABLE IF EXISTS profiles\nADD COLUMN IF NOT EXISTS tls_signing_authority varchar(40) NULL;\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>rpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>rpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d rpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d rpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d rpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statement.</p> </li> <li> <p>Verify the column was added to the table.     <pre><code>SELECT * FROM profiles;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with general upgrade steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-to-27-from-26","title":"Upgrade to 2.7 from 2.6","text":"<p>The 2.7 release of MPS requires an upgrade to the <code>mpsdb</code> database.</p> <ol> <li> <p>Run the following SQL script to add two new columns before upgrading the services.</p> <pre><code>ALTER TABLE devices \nADD COLUMN IF NOT EXISTS friendlyname varchar(256),\nADD COLUMN IF NOT EXISTS dnssuffix varchar(256);\n</code></pre> Example - Adding Columns to PostgresDB using psql <p>This example walks through one potential option to update a Postgres Database using psql.</p> <ol> <li> <p>Open a Command Prompt or Terminal.</p> </li> <li> <p>Connect to your Postgres instance and <code>mpsdb</code> database. Provide the hostname of the database, the port (Postgres default is 5432), the database <code>mpsdb</code>, and your database user.     <pre><code>psql -h [HOSTNAME] -p 5432 -d mpsdb -U [DATABASE USER]\n</code></pre></p> Example Commands <pre><code>Azure:\npsql -h myazuredb-sql.postgres.database.azure.com -p 5432 -d mpsdb -U postgresadmin@myazuredb-sql\n\nAWS:\npsql -h myawsdb-1.jotd7t2abapq.us-west-2.rds.amazonaws.com -p 5432 -d mpsdb -U postgresadmin\n</code></pre> </li> <li> <p>Provide your Postgres user password.</p> </li> <li> <p>Run the SQL Statement.</p> </li> <li> <p>Verify the columns were added to the table.     <pre><code>SELECT * FROM devices;\n</code></pre></p> </li> </ol> </li> <li> <p>Continue with general upgrade steps below.</p> </li> </ol>"},{"location":"Deployment/upgradeVersion/#upgrade-a-minor-version-ie-2x-to-2y","title":"Upgrade a Minor Version (i.e. 2.X to 2.Y)","text":""},{"location":"Deployment/upgradeVersion/#kubernetes-upgrade","title":"Kubernetes Upgrade","text":"<p>Upgrading from a previous minor version to a new minor version release is simple using Helm. By updating your image tags and upgrading through Helm, a seamless transition can be made. Stored profiles and secrets will be unaffected and any connected devices will transition over to the new MPS pod.</p> Note - Using Private Images <p>The steps are the same if using your own images built and stored on a platform like Azure Container Registry (ACR) or Elastic Container Registry (ECR). Simply point to the new private images rather than the public Intel Dockerhub.</p> <ol> <li> <p>Pull the latest release within <code>.\\open-amt-cloud-toolkit</code> directory.</p> <pre><code>git pull\n</code></pre> </li> <li> <p>Merge the latest changes into your existing branch.</p> <pre><code>git merge v2.24.0\n</code></pre> </li> <li> <p>In the values.yaml file, update the images to the new version wanted. Alternatively, you can use the <code>latest</code> tags.</p> <p>Example - values.yaml File</p> <pre><code>images:\n  mps: \"intel/oact-mps:latest\"\n  rps: \"intel/oact-rps:latest\"\n  webui: \"intel/oact-webui:latest\"\n  mpsrouter: \"intel/oact-mpsrouter:latest\"\nmps:\n  ...\n</code></pre> </li> <li> <p>In Terminal or Command Prompt, go to the deployed open-amt-cloud-toolkit repository directory.</p> <pre><code>cd ./YOUR-DIRECTORY-PATH/open-amt-cloud-toolkit\n</code></pre> </li> <li> <p>Use Helm to upgrade and deploy the new images.</p> <pre><code>helm upgrade openamtstack ./kubernetes/charts\n</code></pre> <p>Successful Helm Upgrade</p> <pre><code>Release \"openamtstack\" has been upgraded. Happy Helming!\nNAME: openamtstack\nLAST DEPLOYED: Wed Mar 23 09:36:10 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 2\n</code></pre> </li> <li> <p>Verify the new pods are running. Notice the only restarted and recreated pods are MPS, RPS, and the WebUI.</p> <pre><code>kubectl get pods\n</code></pre> <p>Example - Upgraded Running Pods</p> <pre><code>NAME                                                 READY   STATUS    RESTARTS   AGE\nmps-55f558666b-5m9bq                                 1/1     Running   0          2m47s\nmpsrouter-6975577696-wn8wm                           1/1     Running   0          27d\nopenamtstack-kong-5999cc6b97-wbmdw                   2/2     Running   0          27d\nopenamtstack-vault-0                                 1/1     Running   0          27d\nopenamtstack-vault-agent-injector-6d6c75f7d5-sh5nm   1/1     Running   0          27d\nrps-597d7894b5-mbdz5                                 1/1     Running   0          2m47s\nwebui-6d9b96c989-29r9z                               1/1     Running   0          2m47s\n</code></pre> </li> </ol>"},{"location":"Deployment/upgradeVersion/#rollback-a-version","title":"Rollback a Version","text":"<p>Is the functionality not working as expected? Rollback to the previous deployment using Helm.</p> <ol> <li> <p>Use the Helm rollback command with the Revision you want to rollback to. In this example deployment, we would rollback to the original deployment revision which would be 1.</p> <pre><code>helm rollback openamtstack [Revision-Number]\n</code></pre> <p>Successful Rollback</p> <pre><code>Rollback was a success! Happy Helming!\n</code></pre> </li> </ol>"},{"location":"Deployment/upgradeVersion/#local-docker-upgrade","title":"Local Docker Upgrade","text":"<p>The following steps outline how to upgrade using the public Docker Hub images. Data will not be lost unless Postgres or Vault need to be upgraded and restarted.</p> <ol> <li> <p>From the <code>.\\open-amt-cloud-toolkit\\</code> directory, pull the latest branches.     <pre><code>git pull\n</code></pre></p> </li> <li> <p>Checkout the new release.     <pre><code>git checkout v2.24.0\n</code></pre></p> Note - Rebuilding New Images Locally <p>If building your own images, you will also have to checkout the newer release from each repo within <code>.\\open-amt-cloud-toolkit\\</code>.</p> <ol> <li> <p>Pull the new releases of the submodules.     <pre><code>git submodule update --recursive\n</code></pre></p> </li> <li> <p>Checkout the release for each of the services you want to upgrade.     <pre><code>cd mps\ngit checkout v2.13.0\n</code></pre></p> </li> <li> <p>Repeat for other services.</p> </li> <li> <p>Build the new images.     <pre><code>docker compose up -d --build\n</code></pre></p> </li> </ol> </li> <li> <p>Pull the new release Docker Hub images.     <pre><code>docker compose pull\n</code></pre></p> </li> <li> <p>Start the new containers.     <pre><code>docker compose up -d --remove-orphans\n</code></pre></p> </li> <li> <p>OPTIONAL. If using versioned tags rather than <code>latest</code>, you can delete older tagged images using the following. This will delete all unused images. If you have other non Open AMT images you wish to keep, do NOT run this command.     <pre><code>docker image prune -a\n</code></pre></p> </li> </ol>"},{"location":"Deployment/Database/database/","title":"SQL Database Replacement","text":"<p>To prepare for a production environment, replace the PostgreSQL* database with that of another provider. </p> <p>To replace the database, update these services:</p> <ul> <li>MPS</li> <li>RPS </li> </ul>"},{"location":"Deployment/Database/database/#what-youll-do","title":"What You'll Do","text":"<p>This guide focuses on updating RPS with an Microsoft SQL Server (MSSQL) relational database. </p> <p>Here are the main tasks:</p> <ul> <li>Review DB Schema</li> <li>Add DB Client Dependency</li> <li>Update Configuration</li> <li>Implement the Code</li> </ul> <p>Database Recipe</p> <p>The example implementation below provides a step-by-step outline of database deployment. However, it is intended as a general guideline. You will need to write specific source code to support your custom solution. </p>"},{"location":"Deployment/Database/database/#review-db-schema","title":"Review DB Schema","text":"<p>Schemas for both MPS and RPS can be found in Schema Overview.</p>"},{"location":"Deployment/Database/database/#add-db-client","title":"Add DB Client","text":"<p>Add the database client library you will use to connect to your database. To support MSSQL, this example uses the Microsoft SQL Server client* for Node.js, <code>node-mssql</code>.</p> <p>To add the database:</p> <p>Open a Terminal or Command Prompt and navigate to a directory of your choice for development:</p> <pre><code>npm install node-mssql --save\n</code></pre>"},{"location":"Deployment/Database/database/#update-configuration","title":"Update Configuration","text":"<p>Update the connection string and a folder name for your db either in your ENV or .rc file.</p> <p>To modify the configuration:</p> <pre><code>\"db_provider\":\"mssql\", //This will be the name of the folder you create in the next section.\n\"connection_string\":\"Server=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true'\",\n</code></pre>"},{"location":"Deployment/Database/database/#implement-the-code","title":"Implement the Code","text":"<p>To support the new database:</p> <ol> <li> <p>Create a new folder in <code>./src/data</code>. The name of the new folder should be the name you supplied for the <code>db_provider</code> property, which is <code>mssql</code> in the example above.</p> <p> Figure 2: New folder mssql </p> </li> <li> <p>Create a file called <code>index.ts</code> that implements our IDB interface. Below is an example interface and query method:</p> <p>Interface</p> <pre><code>export interface IDB {\n  ciraConfigs: ICiraConfigTable\n  domains: IDomainsTable\n  profiles: IProfilesTable\n  wirelessProfiles: IWirelessProfilesTable\n  profileWirelessConfigs: IProfilesWifiConfigsTable\n  query: (text: string, params?: any) =&gt; Promise&lt;any&gt;\n}\n</code></pre> <p>Query Method</p> <p>This query function is responsible for taking in the query parameters and performing the execution.</p> <pre><code>async query &lt;T&gt;(text: string, params?: any): Promise&lt;mssql.IResult&lt;T&gt;&gt; {\n   let result\n   const start = Date.now()\n   return await new Promise((resolve, reject) =&gt; {\n     this.sqlPool.connect(async (err) =&gt; {\n       if (err) {\n         this.log.error(err)\n         reject(err)\n       }\n       result = await this.sqlPool.request().query(text)\n       const duration = Date.now() - start\n       this.log.verbose(`executed query: ${JSON.stringify({ text, duration, rows: result.recordset.length })}`)\n       resolve(result)\n       })\n   })\n}\n</code></pre> </li> <li> <p>Implement each of the table interfaces. The base interface looks like this:      <pre><code>export interface ITable&lt;T&gt; {\n  getCount: (tenantId?: string) =&gt; Promise&lt;number&gt;\n  get: (limit: number, offset: number, tenantId?: string) =&gt; Promise&lt;T[]&gt;\n  getByName: (name: string, tenantId?: string) =&gt; Promise&lt;T&gt;\n  delete: (name: string, tenantId?: string) =&gt; Promise&lt;boolean&gt;\n  insert: (item: T) =&gt; Promise&lt;T&gt;\n  update: (item: T) =&gt; Promise&lt;T&gt;\n}\n</code></pre>     There are interfaces for each table in the <code>./interfaces/database</code> which adds specific functions on top of the base <code>ITable&lt;&gt;</code> interface.</p> <p>Here's an example of the get implementation for Domains:</p> <pre><code>/**\n * @description Get all Domains from DB\n * @param {number} top\n * @param {number} skip\n * @returns {AMTDomain[]} returns an array of AMT Domain objects from DB\n */\nasync get (top: number = DEFAULT_TOP, skip: number = DEFAULT_SKIP, tenantId: string = ''): Promise&lt;AMTDomain[]&gt; {\n   const results = await this.db.query(`\n   SELECT name as  profileName, domain_suffix as  domainSuffix, provisioning_cert as  provisioningCert, provisioning_cert_storage_format as  provisioningCertStorageFormat, provisioning_cert_key as  provisioningCertPassword, tenant_id tenantId\n   FROM domains \n  ORDER BY name`)\n  return result\n }\n</code></pre> </li> <li> <p>Complete all the queries for each table's functions to finish the implementation.</p> </li> </ol> <p>Best Practice</p> <p>That's it! Deployment complete.</p> <p>After replacing the database, ensure all the APIs are working as expected by running the API Tests with the Postman* application. You'll find the tests in the <code>./src/test/collections</code> folder.</p>"},{"location":"Deployment/Database/nosql/","title":"NoSQL Databases","text":"<p>MPS can support NoSQL databases. This is an optional alternative to the existing SQL-based reference deployment that uses Postgres. RPS will still require a relational database such as PostgreSQL.</p> <p>NoSQL databases come in a variety of types based on their data model. The main types are document, key-value, wide-column, and graph. They provide flexible schemas and scale easily with large amounts of data and high user loads.</p> <p>NoSQL support is integrated using the MongoDB API. This does not just limit integration options to MongoDB itself, but can utilize other providers such as:</p> <ul> <li>Azure Cosmos DB</li> <li>Amazon DocumentDB</li> <li>Oracle Autonomous JSON Database</li> </ul>"},{"location":"Deployment/Database/nosql/#mongodb-docker-deployment","title":"MongoDB Docker Deployment","text":"<p>The below steps will show how to modify the basic Open AMT Getting Started Docker deployment to integrate MongoDB for MPS to store and reference device data.</p> <ol> <li> <p>Stop any running containers. This will wipe all data and devices will have to be reprovisioned against the new RPS/MPS servers.</p> <pre><code>docker compose down -v\n</code></pre> </li> </ol>"},{"location":"Deployment/Database/nosql/#edit-environment-variables","title":"Edit Environment Variables","text":"<ol> <li> <p>Open the <code>.env</code> file.</p> </li> <li> <p>Add a new environment variable in the MPS section.</p> <pre><code>...\nMPS_JWT_SECRET=secret\nMPS_JWT_ISSUER=9EmRJTbIiIb4bIeSsmgcWIjrR6HyETqc\nMPS_MQTT_ADDRESS=\nMPS_DB_PROVIDER=mongo\n\n# MPS ROUTER\nPORT=8003\n...\n</code></pre> </li> <li> <p>Save the file.</p> </li> </ol>"},{"location":"Deployment/Database/nosql/#edit-docker-composeyml","title":"Edit <code>docker-compose.yml</code>","text":"<ol> <li> <p>Open the <code>docker-compose.yml</code> file.</p> </li> <li> <p>Add the Mongo image and configuration. This guide reuses the preexisting <code>POSTGRES_USER</code> and <code>POSTGRES_PASSWORD</code> environment variables for the MongoDB credentials and connection strings for easy configuration and demonstration. </p> <pre><code>mongo:\n  image: mongo\n  restart: always\n  ports:\n    - 27017:27017\n  networks:\n    - openamtnetwork\n  environment:\n    MONGO_INITDB_ROOT_USERNAME: ${POSTGRES_USER}\n    MONGO_INITDB_ROOT_PASSWORD: ${POSTGRES_PASSWORD}\n</code></pre> </li> <li> <p>Update connection strings of <code>mps</code> and <code>mpsrouter</code>.</p> mpsrouter<pre><code>environment:\n  MPS_CONNECTION_STRING: mongodb://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mongo:27017\n  PORT: ${PORT}\n  MPS_PORT: ${MPSWEBPORT}\n</code></pre> mps<pre><code>environment: \n  MPS_INSTANCE_NAME: ''\n  MPS_SECRETS_PATH: ${SECRETS_PATH}\n  MPS_VAULT_TOKEN: ${VAULT_TOKEN}\n  MPS_VAULT_ADDRESS: ${VAULT_ADDRESS}\n  MPS_CONNECTION_STRING: mongodb://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mongo:27017\n  MPS_CONSUL_ENABLED: ${CONSUL_ENABLED}\n  MPS_CONSUL_HOST: ${CONSUL_HOST} \n  MPS_CONSUL_PORT: ${CONSUL_PORT}\n  MPS_DB_PROVIDER: ${MPS_DB_PROVIDER}\n</code></pre> </li> <li> <p>Save the file.</p> </li> </ol>"},{"location":"Deployment/Database/nosql/#deploy-stack","title":"Deploy Stack","text":"<ol> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> <li> <p>Check that all the containers are running and healthy.</p> <pre><code>docker ps --format \"table {{.Image}}\\t{{.Status}}\\t{{.Names}}\"\n</code></pre> <p>Success</p> <pre><code>IMAGE                               STATUS                        NAMES\nintel/oact-rps:latest               Up 19 seconds (healthy)        open-amt-cloud-toolkit-rps-1      \nhashicorp/vault                     Up 19 seconds                  open-amt-cloud-toolkit-vault-1    \nintel/oact-mpsrouter:latest         Up 19 seconds (healthy)        open-amt-cloud-toolkit-mpsrouter-1\npostgres:15                         Up 19 seconds (healthy)        open-amt-cloud-toolkit-db-1       \nintel/oact-webui:latest             Up 19 seconds                  open-amt-cloud-toolkit-webui-1    \nkong:3.1                            Up 19 seconds (healthy)        open-amt-cloud-toolkit-kong-1     \nintel/oact-mps:latest               Up 19 seconds (healthy)        open-amt-cloud-toolkit-mps-1\nmongo                               Up 19 seconds                  open-amt-cloud-toolkit-mongo-1\n</code></pre> </li> <li> <p>Now, updates will be made to the <code>devices</code> collection when actions affecting an AMT device occur (e.g. Device Provisioning/Unprovisioning).</p> </li> </ol> <p></p>"},{"location":"Deployment/Database/schema/","title":"Schema Overview","text":"<p>The diagrams below illustrates the database schema and relationships for MPS and RPS. </p>"},{"location":"Deployment/Database/schema/#mps","title":"MPS","text":"<pre><code>erDiagram\n    DEVICE {\n        guid uuid\n        string[] tags\n        string hostname\n        string mpsinstance\n        boolean connectionstatus\n        string mpsusername\n        string tenantid\n        string friendlyname\n        string dnssuffix\n        json deviceInfo\n        datetime lastconnected\n        datetime lastseen\n        datetime lastdisconnected\n    }</code></pre>"},{"location":"Deployment/Database/schema/#rps","title":"RPS","text":"<p><pre><code>erDiagram\n    DOMAIN {\n        string name\n        string domain_suffix\n        string provisioning_cert\n        string provisioning_cert_storage_format\n        string provisioning_cert_key\n        datetime creation_date\n        datetime expiration_date\n        string created_by\n        string tenant_id\n    }</code></pre> <pre><code>erDiagram\n    PROFILE o|--o| CIRACONFIGS : has\n    PROFILE ||--|{ PROFILES_WIRELESSCONFIGS : associated\n    PROFILE ||--o| IEEE8021XCONFIGS : has\n    PROFILE {\n      string profile_name\n      string activation\n      string amt_password\n      boolean generate_random_password\n      string cira_config_name\n      datetime creation_date\n      string created_by\n      string mebx_password\n      boolean generate_random_mebx_password\n      string[] tags\n      boolean dhcp_enabled\n      string tenant_id\n      int tls_mode\n      string user_consent\n      boolean ider_enabled\n      boolean kvm_enabled\n      boolean sol_enabled\n      string tls_signing_authority\n      string ieee8021x_profile_name\n    }\n    CIRACONFIGS \n    CIRACONFIGS {\n      string cira_config_name\n      string mps_server_address\n      int mps_port\n      string user_name\n      string password\n      string common_name\n      int server_address_format\n      int auth_method\n      string mps_root_certificate\n      string proxydetails\n      string tenant_id\n    }\n\n    WIRELESSCONFIGS ||--|{ PROFILES_WIRELESSCONFIGS : belongs\n    WIRELESSCONFIGS ||--o| IEEE8021XCONFIGS : has\n    WIRELESSCONFIGS {\n      string wireless_profile_name\n      int authentication_method\n      int encryption_method\n      string ssid\n      int psk_value\n      string psk_passphrase\n      int[] link_policy\n      datetime creation_date\n      string created_by\n      string tenant_id\n      string ieee8021x_profile_name\n    }\n    PROFILES_WIRELESSCONFIGS {\n      string wireless_profile_name\n      string profile_name\n      int priority\n      datetime creation_date\n      string created_by\n      string tenant_id\n    }\n    IEEE8021XCONFIGS {\n      string profile_name\n      int auth_protocol\n      string servername\n      string domain\n      string username\n      string password\n      string roaming_identity\n      boolean active_in_s0\n      int pxe_timeout\n      boolean wired_interface\n      string tenant_id\n    }</code></pre></p>"},{"location":"GetStarted/buildRPC/","title":"Build & Run RPC","text":"<p>Developed in Go* programming language, the Remote Provisioning Client (RPC) application runs on the managed device and communicates with the Remote Provisioning Server (RPS) microservice on the development system. The RPC and RPS configure and activate Intel\u00ae AMT on the managed device. Once properly configured, the remote managed device can call home to the Management Presence Server (MPS) by establishing a Client Initiated Remote Access (CIRA) connection with the MPS. See Figure 1.</p> Getting Started Part 3: Follow along to learn about how to build RPC, some of the information it can provide, and how to activate an AMT device. Additional Resources: RPC as a Library and RPC Commands and Flags <p>Important - Production Environment</p> <p>In a production environment, RPC can be deployed with an in-band manageability agent to distribute it to the fleet of AMT devices. The in-band manageability agent can invoke RPC to run and activate the AMT devices.</p> Figure 1: RPC configuration <p>Figure 1 Details</p> <p>The RPC on a managed device communicates with the Intel\u00ae Management Engine Interface (Intel\u00ae MEI, previously known as HECI) Driver and the Remote Provisioning Server (RPS) interfaces. The Driver uses the Intel\u00ae MEI to talk to Intel\u00ae AMT. The RPC activates Intel\u00ae AMT with an AMT profile, which is associated with a CIRA configuration (Step 3). The profile, which also distinguishes between Client Control Mode (CCM) or Admin Control Mode (ACM), and configuration were created in Create a CIRA Config or Create an AMT Profile. After running RPC with a profile, Intel\u00ae AMT will establish a CIRA connection with the MPS (Step 4) allowing MPS to manage the remote device and issue AMT commands (Step 5).</p>"},{"location":"GetStarted/buildRPC/#get-rpc","title":"Get RPC","text":"<p>There are two ways to get the RPC-Go binary:</p> <ul> <li>Download from the RPC-Go GitHub Repo Releases</li> <li>Build the RPC-Go binary using Go</li> </ul> <p>See steps below for both options.</p> <p></p>"},{"location":"GetStarted/buildRPC/#download-rpc","title":"Download RPC","text":"<p>Download the latest RPC-Go version from the RPC-Go GitHub Repo Releases Page for the Operating System of the AMT device (Windows or Linux).</p> <p>After downloading, continue on to Run RPC to Activate, Configure, and Connect the AMT Device.</p> <p></p>"},{"location":"GetStarted/buildRPC/#build-rpc","title":"Build RPC","text":"<p>Alternatively, the RPC-Go binaries can be manually built using Go for development purposes or personal preference.</p> Flexible Deployment - RPC as a Library <p>The RPC can be built as an executable file or as a library, which offers the flexibility of deploying in your management agent or client. Read more about building RPC as a library here.</p> <p>If you are building an executable on a development system, you will copy the executable to the AMT device afterwards. </p> <ol> <li> <p>Change to the <code>rpc-go</code> directory of the cloned <code>open-amt-cloud-toolkit</code> repository.</p> <pre><code>cd rpc-go\n</code></pre> Haven't Cloned the <code>open-amt-cloud-toolkit</code> Repository? <ul> <li> <p>Only clone the <code>rpc-go</code> repository:     <pre><code>git clone https://github.com/open-amt-cloud-toolkit/rpc-go --branch v2.36.0\n</code></pre></p> </li> <li> <p>Alternatively, clone the whole toolkit repository:     <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0 --recursive\n</code></pre></p> </li> </ul> </li> <li> <p>Open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows):</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>go build -o rpc ./cmd/main.go\n</code></pre> <pre><code>go build -o rpc.exe ./cmd/main.go\n</code></pre> <pre><code>docker build -f \"Dockerfile\" -t rpc-go:latest .\n</code></pre> <p>Note</p> <p>The image created with the Docker instruction above is only suitable for Docker on a Linux host. </p> </li> <li> <p>Confirm a successful build:</p> <p>RPC must run with elevated privileges. Commands require <code>sudo</code> on Linux or an Administrator Command Prompt on Windows.</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>sudo ./rpc version\n</code></pre> <pre><code>.\\rpc version\n</code></pre> <pre><code>sudo docker run --rm -it --device=/dev/mei0 rpc-go:latest version\n</code></pre> </li> </ol> <p></p>"},{"location":"GetStarted/buildRPC/#run-rpc-to-activate-configure-and-connect-the-amt-device","title":"Run RPC to Activate, Configure, and Connect the AMT Device","text":"<ol> <li> <p>After downloading or building RPC, copy the executable to the AMT device.</p> </li> <li> <p>On the AMT device, open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows).</p> </li> <li> <p>Navigate to the directory containing the RPC application. </p> </li> <li> <p>Run RPC with the activate command to activate, configure, and connect Intel\u00ae AMT to the MPS Server. It will take 1-2 minutes to finish provisioning the device. </p> REPLACE WITH Development-IP-Address Development system's IP address or FQDN, where the MPS and RPS servers are running. profileName THe name of the profile created using the Sample Web UI. LinuxWindowsDocker (On Linux Host Only) <pre><code>sudo ./rpc activate -u wss://[Development-IP-Address]/activate -n -profile [profileName]\n</code></pre> <pre><code>.\\rpc activate -u wss://[Development-IP-Address]/activate -n -profile [profileName]\n</code></pre> <pre><code>sudo docker run --rm -it --device=/dev/mei0 rpc-go:latest activate -u wss://[Development-IP-Address]/activate -n -profile [profileName]\n</code></pre> Note - Other RPC Flags and Commands <p>See more about the flags used here and the other available commands of RPC-Go.</p> <p>Success</p> <p> Figure 2: Example output after configuration </p> <p>Troubleshooting</p> <p>Run into an issue? Try these troubleshooting steps.</p> </li> </ol>"},{"location":"GetStarted/buildRPC/#next-up","title":"Next up","text":"<p>Manage AMT Device</p>"},{"location":"GetStarted/createCIRAConfig/","title":"Create a CIRA Config","text":"<p>Client Initiated Remote Access (CIRA) enables a CIRA-capable edge device to initiate and establish a persistent connection to the MPS. As long as the managed device is connected to the network and to a power source, it can maintain a persistent connection.</p> <p>Note - Wireless Activations</p> <p>This express setup assumes the managed device (i.e. AMT device) is on a wired connection for quickest setup.  To learn more about a Wireless Setup, see the Wireless Activation Tutorial.</p> <p>To create a CIRA Config:</p> <ol> <li> <p>Select the CIRA Configs tab from the left-hand menu.</p> </li> <li> <p>In the top-right corner, click Add New. Figure 1: Create a new CIRA Config </p> </li> <li> <p>Specify a Config Name of your choice.</p> </li> <li> <p>Select IPv4.</p> </li> <li> <p>For MPS Address, provide your development system's IP Address.</p> </li> <li> <p>Cert Common Name (CN=) should auto-populate. If not, provide your development system's IP Address.</p> </li> <li> <p>Leave Port as the default, 4433.</p> </li> <li> <p>Leave the Username as admin or choose your own.</p> </li> <li> <p>Click Save.</p> <p>Example CIRA Config</p> <p> Figure 2: Example CIRA Config </p> </li> </ol>"},{"location":"GetStarted/createCIRAConfig/#next-up","title":"Next up","text":"<p>Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: </p> <p>Client Control Mode (CCM): This mode offers all manageability features including, but not limited to, power control, audit logs, and hardware info. Redirection features, such as KVM or SOL, require user consent. The managed device will display a 6-digit code that must be entered by the remote admin to access the remote device via redirection.</p> <p>Create a CCM Profile</p> <p>Admin Control Mode (ACM): ACM mode supports all manageability features without requiring user consent. This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.</p> <p>Create an ACM Profile</p>"},{"location":"GetStarted/createProfileACM/","title":"Create a Profile with ACM","text":"<p>Admin Control Mode (ACM) provides full access to Intel\u00ae Active Management Technology (Intel\u00ae AMT) functionality. User consent is optional for supported redirection features:</p> <ul> <li>Keyboard, Video, Mouse (KVM): Control multiple devices with one keyboard, monitor, and mouse.</li> <li>Serial-over-LAN (SOL): Manage devices with a command line interface (CLI) through SOL.</li> <li>IDE Redirection: Share and mount images remotely with a specified storage media (e.g., USB flash drive). </li> </ul> <p>Important - IDE Redirection</p> <p>While AMT supports this feature, the toolkit doesn't natively support it.</p> Figure 1: Set up configuration and profiles for n number of clients"},{"location":"GetStarted/createProfileACM/#what-youll-need","title":"What You'll Need","text":""},{"location":"GetStarted/createProfileACM/#provisioning-certificate","title":"Provisioning Certificate","text":"<p>By purchasing a certificate, you'll be able to remotely activate an Intel\u00ae AMT device in ACM. This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities. Find more information about Provisioning Certificates.</p> <ul> <li>DigiCert</li> <li>Entrust</li> <li>GoDaddy</li> </ul> <p>Important - Intel AMT and using CAs</p> <p>For ACM in Open Active Management Technology (Open AMT) Cloud Toolkit, use only certificate vendors that support Intel\u00ae AMT.</p> <p>Alternatively, for development, custom provisioning certificates can be generated. See Custom Provisioning Certificate for additional details.</p>"},{"location":"GetStarted/createProfileACM/#dns-suffix","title":"DNS Suffix","text":"<p>The DNS suffix encompasses the domain suffix (e.g., .com) and follows the hostname. Consider the following DNS Name example:</p> <p>Example - DNS</p> <p>DNS Name: cb-vending1.burgerbusiness.com</p> <p>In this example, the hostname is cb-vending1 and the DNS suffix is burgerbusiness.com.</p> <p>To set the DNS suffix:</p> <ol> <li> <p>Manually set it using MEBX on the managed device. Find instructions here.</p> </li> <li> <p>Alternately, change the DHCP Option 15 to DNS suffix within the Router settings.</p> </li> </ol> <p>To find the DNS suffix, use the following command:</p> LinuxWindows <pre><code>ifconfig\n</code></pre> <pre><code>ipconfig /all\n</code></pre> <p></p>"},{"location":"GetStarted/createProfileACM/#create-a-profile","title":"Create a Profile","text":"<p>A Profile provides configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC).</p> <p>Important - Production Environment</p> <p>In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios.</p> Note - More Information about Passwords <p>Open AMT Cloud Toolkit increases security with multiple passwords. Find an explanation of toolkit passwords in Reference -&gt; Architecture Overview.</p> <p>To create an ACM profile:</p> <ol> <li> <p>Select the Profiles tab from the menu on the left.</p> </li> <li> <p>Under the Profiles tab, click Add New in the top-right corner to create a profile.</p> <p> Figure 2: Create a new profile </p> </li> <li> <p>Specify a Profile Name of your choice.</p> </li> <li> <p>Under Activation, select Admin Control Mode from the dropdown menu.</p> </li> <li> <p>Enable desired redirection features for the profile under AMT Features - Enable/Disable features.</p> </li> <li> <p>Choose level of User Consent. By default for ACM, None is selected. This will disable all User Consent for ACM.</p> </li> <li> <p>Provide or generate a strong AMT Password. AMT will verify this password when receiving a command from a MPS server. This password is also required for device deactivation.</p> Warning - Viewing and Losing Random Passwords <p>The two buttons next to the password input are for toggling visibility and/or generating a new random password. Please note that if the Vault database is lost or corrupted (or container stopped), all credentials that aren't also stored somewhere else will be lost. There will be no way to login. The administrator will have to clear the CMOS battery on the managed devices!</p> </li> <li> <p>Provide or generate a strong MEBX Password. This password can be used to access Intel\u00ae Manageability Engine BIOS Extensions (Intel\u00ae MEBX) on the AMT device.</p> </li> <li> <p>Leave DHCP as the default for Network Configuration.</p> </li> <li> <p>This express setup assumes the managed device (i.e. AMT device) is on a wired connection for quickest setup.  To learn more about a Wireless Setup, see the Wireless Activation Tutorial.</p> </li> <li> <p>Select CIRA (Cloud) for Connection Configuration.</p> </li> <li> <p>Select the name of the CIRA Configuration you created previously from the drop-down menu.</p> </li> <li> <p>Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow.</p> </li> <li> <p>Click Save.</p> <p>Example ACM Profile</p> <p> Figure 3: Example ACM profile </p> </li> </ol>"},{"location":"GetStarted/createProfileACM/#create-a-domain-profile","title":"Create a Domain Profile","text":"<p>In addition to a CIRA Config and an ACM Profile, ACM requires the creation of a Domain profile.</p> <p>Intel\u00ae AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware.  AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority.</p> <p>To create a domain:</p> <ol> <li> <p>Select the Domains tab from the left-hand menu.</p> </li> <li> <p>In the top-right corner, click Add New. Figure 4: Create a new Domain profile </p> </li> <li> <p>Specify a name of your choice for the Domain Profile for the Name field. This does not have to be the actual network Domain Name/Suffix.</p> </li> <li> <p>Provide your DNS suffix as the Domain Name. This is the actual DNS suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX.</p> </li> <li> <p>Click Choose File and select your purchased Provisioning Certificate.  This certificate must contain the private key.</p> </li> <li> <p>Provide the Provisioning Certificate Password used to encrypt the <code>.pfx</code> file.</p> </li> <li> <p>Click Save.</p> <p>Example Domain</p> <p> Figure 5: Example Domain profile </p> </li> </ol>"},{"location":"GetStarted/createProfileACM/#next-up","title":"Next Up","text":"<p>Build &amp; Run RPC</p>"},{"location":"GetStarted/createProfileCCM/","title":"Create a Profile with CCM","text":"<p>Client Control Mode (CCM) provides full access to features of Intel\u00ae Active Management Technology (Intel\u00ae AMT), but it does require user consent for all redirection features.</p> <p>These features require user consent in CCM:</p> <ul> <li>Keyboard, Video, Mouse (KVM): Control multiple devices with one keyboard, monitor, and mouse.</li> <li>Serial-over-LAN (SOL): Manage devices with a command line interface (CLI) through SOL.</li> <li>IDE Redirection: Share and mount images remotely with a specified storage media (e.g., USB flash drive).</li> </ul> <p>Important - IDE Redirection</p> <p>While AMT supports this feature, the toolkit doesn't natively support it. </p> Figure 1: Set up configuration and profiles for n number of clients"},{"location":"GetStarted/createProfileCCM/#create-a-profile","title":"Create a Profile","text":"<p>Profiles provide configuration information to the firmware on platforms featuring Intel\u00ae AMT during the activation process with the Remote Provisioning Client (RPC).</p> Note - More Information about Passwords <p>Open AMT Cloud Toolkit increases security with multiple passwords. Find an explanation of toolkit passwords in Reference -&gt; Architecture Overview.</p> <p>To create a CCM profile:</p> <ol> <li> <p>Select the Profiles tab from the menu on the left.</p> </li> <li> <p>Under the Profiles tab, click New in the top-right corner to create a profile.   Figure 2: Create a new profile </p> </li> <li> <p>Specify a Profile Name of your choice.</p> </li> <li> <p>Under Activation Mode, select Client Control Mode from the dropdown menu.</p> </li> <li> <p>Enable desired redirection features for the profile under AMT Features - Enable/Disable features.</p> </li> <li> <p>Provide or generate a strong AMT Password. AMT will verify this password when receiving a command from a MPS server. This password is also required for device deactivation.</p> Warning - Viewing and Losing Random Passwords <p>The two buttons next to the password input are for toggling visibility and/or generating a new random password. Please note that if the Vault database is lost or corrupted (or container stopped), all credentials that aren't also stored somewhere else will be lost. There will be no way to login. The administrator will have to clear the CMOS battery on the managed devices!</p> </li> <li> <p>The MEBX Password field is disabled. The password for Intel\u00ae Manageability Engine BIOS Extensions (Intel\u00ae MEBX) cannot be set when activating in CCM due to the lower level of trust when compared to ACM.</p> </li> <li> <p>Leave DHCP as the default for Network Configuration.</p> </li> <li> <p>This express setup assumes the managed device (i.e. AMT device) is on a wired connection for quickest setup.  To learn more about a Wireless Setup, see the Wireless Activation Tutorial.</p> </li> <li> <p>Select CIRA (Cloud) for Connection Configuration.</p> </li> <li> <p>Select the name of the CIRA Configuration you created previously from the drop-down menu.</p> </li> <li> <p>Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow.</p> </li> <li> <p>Click Save.</p> <p>Example CCM Profile</p> <p> Figure 3: Example CCM profile </p> </li> </ol>"},{"location":"GetStarted/createProfileCCM/#next-up","title":"Next up","text":"<p>Build &amp; Run RPC</p>"},{"location":"GetStarted/loginToUI/","title":"Login to Sample Web UI","text":"<p>The web portal is available for login after the deployment of the MPS, RPS, and Sample Web UI. Make sure all microservices are successfully running before attempting to login.</p> Getting Started Part 2: Follow along to learn about the Sample Web UI and the various profiles: CIRA Configs, AMT Profiles, and Domain Profiles. Additional Resources: Passwords and What They Mean, Provisioning Certificates, and Setting a DNS Suffix via MEBX"},{"location":"GetStarted/loginToUI/#log-in","title":"Log In","text":"<ol> <li> <p>Open any modern web browser and navigate to the following link.</p> <pre><code>https://&lt;Development-IP-Address&gt;\n</code></pre> <p>Important - URL of Sample Web UI</p> <p>You must use the development system's IP address in the URL. Localhost or 127.0.0.1 will NOT work. Read more about Kong API Gateway to find out why. The development system's IP address is where the Docker containers are running.</p> </li> <li> <p>A warning screen will prompt because the MPS Server is using self-signed certificates for testing. Click Advanced and then Proceed to continue to connect to the Sample Web UI.</p> <p>Example - Chrome* Browser Warning Message</p> <p> Figure 1: MPS warning message </p> </li> <li> <p>Log in to the web portal with the login credentials set for the environment variables <code>MPS_WEB_ADMIN_USER</code> and <code>MPS_WEB_ADMIN_PASSWORD</code> in the <code>.env</code> file.</p> </li> <li> <p>The home page is shown below in Figure 2.</p> <p>Example - Sample Web UI Home Page</p> <p> Figure 2: Sample Web UI home page </p> </li> </ol>"},{"location":"GetStarted/loginToUI/#next-up","title":"Next up","text":"<p>Create a CIRA Config</p>"},{"location":"GetStarted/manageDevice/","title":"Manage AMT Device","text":"Getting Started Part 4: Follow along to learn about the different Out-of-Band capabilities of Intel AMT. Next Steps: Using REST APIs and Deploying with Kubernetes"},{"location":"GetStarted/manageDevice/#try-out-intel-amt-capabilities","title":"Try out Intel AMT Capabilities","text":"<ol> <li> <p>Go back to the Sample Web UI on your development system.</p> </li> <li> <p>Click the Devices tab from the menu on the left.       Figure 1: Devices tab </p> <p>Troubleshooting</p> <p>If the activated device is not listed or if it is listed as unconnected, try restarting the AMT device. After successfully restarting the device, refresh the Sample Web UI to see if the Status changes to connected.</p> <p>Additional troubleshooting steps.</p> </li> <li> <p>Click on your connected device.</p> </li> <li> <p>Select an action to perform from the Power Actions in the center screen or Redirection options in the top-right.</p> <p>Warning - Power Actions in KVM</p> <p>Turn off active redirection sessions, such as KVM or SOL, before specific power state transitions. Power Cycle (Code 5) and Unconditional Power Down (Power Off, Code 8) will be rejected as invalid if there is an active redirection session. Reset (Code 10) will function in KVM along with the other unmentioned Power Actions.</p> <p> Figure 2: Action options </p> </li> </ol>"},{"location":"GetStarted/manageDevice/#user-consent","title":"User Consent","text":"<p>If activated in Client Control Mode(CCM), the keyboard, video, mouse (KVM), serial-over-LAN (SOL), and IDE-Redirect (IDER) features require entering a user consent code, which will be displayed on the managed device.</p> <p>To use KVM/SOL without user consent, follow the ACM Activation Path for how to configure a device into Admin Control Mode.</p> <ol> <li> <p>When performing a KVM action for a device activated in CCM or ACM with user consent enabled, input the user consent code displayed on the client device.</p> <p> Figure 3: User Consent </p> </li> </ol> <p></p>"},{"location":"GetStarted/manageDevice/#next-steps","title":"Next steps","text":"<p>After successfully deploying the Open AMT Cloud Toolkit microservices and client, explore other tools and topics in the Open AMT Cloud Toolkit architecture:</p>"},{"location":"GetStarted/manageDevice/#rest-api-calls","title":"REST API Calls","text":"<p>Learn how to send commands to AMT devices with the curl-based REST API tutorial. Generate a JWT token for Authorization and construct an API call to get a list of devices. </p> <p>Get Started with REST API Calls</p>"},{"location":"GetStarted/manageDevice/#ui-toolkit","title":"UI Toolkit","text":"<p>Explore how to add redirection features, such as Keyboard, Video, and Mouse (KVM) and IDE-Redirect (IDER), with prebuilt React components.</p> <p>Get Started with the UI Toolkit</p>"},{"location":"GetStarted/manageDevice/#security","title":"Security","text":"<p>Learn how to use the Open AMT Cloud Toolkit architecture to secure assets. Topics include credentials, allowlisting, best known security methods, and more.</p> <p>Learn More about Security and Hardening</p>"},{"location":"GetStarted/prerequisites/","title":"Prerequisites","text":"<p>This section contains prerequisites for deploying Open AMT Cloud Toolkit's MPS and RPS microservices on a local development system as Docker* containers. </p> Getting Started Part 1: Follow along to learn about the prerequisites, environment configuration, and using Docker to get your stack started. Additional Resources: Intel vPro Platform"},{"location":"GetStarted/prerequisites/#what-youll-need","title":"What You'll Need","text":""},{"location":"GetStarted/prerequisites/#hardware","title":"Hardware","text":"<p>Configure a network that includes:</p> <ul> <li>A development system </li> <li>At least one Intel vPro\u00ae Platform</li> <li>A flash drive or equivalent means to transfer files between</li> </ul> <p>Both systems must use a wired (i.e., cable) connection on the same network.</p>"},{"location":"GetStarted/prerequisites/#development-system-software","title":"Development System Software","text":"<p>Before MPS and RPS installation, install the following software on your development system:</p> <ul> <li>git*</li> <li>Docker for Windows or Docker for Linux</li> </ul> <p>For RPC setup, install the following software on your development system:</p> <ul> <li>Go* Programming Language</li> </ul> <p></p>"},{"location":"GetStarted/prerequisites/#what-youll-do","title":"What You'll Do","text":"Figure 1: Deploy microservices on a local development system as Docker containers <p>To complete a deployment:</p> <ul> <li>Install the prerequisites.</li> <li>Pull and deploy microservices with Docker.</li> <li>Login to the Sample Web UI and configure profiles.</li> <li>Build RPC.</li> <li>Copy RPC to a managed device.</li> </ul> <p>To connect the managed device:</p> <ul> <li>Run RPC on a managed device.</li> <li>Manage the device with MPS through the Sample Web UI.</li> </ul> <p>These sections include instructions for Windows and Linux* environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal.</p>"},{"location":"GetStarted/prerequisites/#why-docker","title":"Why Docker*?","text":"<p>A Docker container is the instantiation of a Docker image as a virtualized unit that separates the application from the environment. Docker containers start and run reliably, securely, and portably inside different environments, eliminating some of the problems that occur with software deployment on varying platforms. Docker streamlines installation to get you up and running faster.</p> <p>Get more information about Docker images and containers at Docker resources. </p>"},{"location":"GetStarted/prerequisites/#next-up","title":"Next up","text":"<p>Setup - Pull Docker* Images</p>"},{"location":"GetStarted/setup/","title":"Set Up","text":"<p>This setup runs the MPS and RPS microservices as Docker* containers, standardized packages containing an application's source code, libraries, environment, and dependencies. </p>"},{"location":"GetStarted/setup/#get-the-toolkit","title":"Get the Toolkit","text":"<p>To clone the repositories:</p> <ol> <li> <p>Open a Terminal or Command Prompt and navigate to a directory of your choice for development:</p> <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0 --recursive\n</code></pre> </li> <li> <p>Change to the cloned <code>open-amt-cloud-toolkit</code> directory.     <pre><code>cd open-amt-cloud-toolkit\n</code></pre></p> </li> </ol>"},{"location":"GetStarted/setup/#set-environment-variables","title":"Set Environment Variables","text":"<p>The  <code>.env.template</code> file is used by docker to set environment variables.</p> <p>To set the environment variables:</p> <ol> <li> <p>Copy the <code>.env.template</code> file to <code>.env</code>:</p> Linux/PowershellWindows (Cmd Prompt) <pre><code>cp .env.template .env\n</code></pre> <pre><code>copy .env.template .env\n</code></pre> </li> <li> <p>In a text editor or IDE of choice, open the new <code>.env</code> file to edit.</p> </li> <li> <p>Update the following fields for configuring the MPS, Sample Web UI, Vault and Postgres. Save and keep track of the values you choose.</p> Field Name Required Usage MPS_COMMON_NAME Development System IP Address. For connecting to MPS server via UI or APIs. WARNING: Do not use localhost. Use the development system IP Address. MPS_WEB_ADMIN_USER Username of your choice For logging into the Sample Web UI MPS_WEB_ADMIN_PASSWORD Strong password of your choice For logging into the Sample Web UI MPS_JWT_SECRET A strong secret of your choice (Example: A unique, random 256-bit string. See another example in code snippet below). Used when generating a JSON Web Token (JWT) for authentication. This example implementation uses a symmetrical key and HS256 to create the signature. Learn more about JWT. POSTGRES_PASSWORD Strong password of your choice For logging into the Postgres VAULT_TOKEN Strong token of your choice For logging into the vault <p>Important - Using Strong Passwords</p> <p>The MPS_WEB_ADMIN_PASSWORD must meet standard, strong password requirements:</p> <ul> <li> <p>8 to 32 characters</p> </li> <li> <p>One uppercase, one lowercase, one numerical digit, one special character</p> </li> </ul> </li> <li> <p>Save the file.</p> </li> </ol>"},{"location":"GetStarted/setup/#set-kong-json-web-token-jwt","title":"Set Kong JSON Web Token (JWT)","text":"<p>Set the shared secret used in Kong for JWT authentication.</p> <ol> <li> <p>Open the <code>kong.yaml</code> file.</p> </li> <li> <p>Update the secret field with your MPS_JWT_SECRET.</p> <pre><code>jwt_secrets:\n  - consumer: admin\n    key: 9EmRJTbIiIb4bIeSsmgcWIjrR6HyETqc #sample key\n    secret: \"Yq3t6w9z6CbE3HRMcQfTjWnZr4u7x6AJ\" #sample secret, DO NOT use for production\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"GetStarted/setup/#pull-and-run-the-docker-images","title":"Pull and Run the Docker Images","text":"<ol> <li> <p>Pull the Docker images from Intel's Docker Hub repository.</p> Important for Linux - Using <code>sudo</code> with Docker <p>The Docker daemon always runs as the root user and therefore requires <code>sudo</code>. If you do not want to preface all Docker commands with <code>sudo</code>, see Linux post-installation steps for Docker Engine in the Docker Documentation.</p> <pre><code>docker compose pull\n</code></pre> Note for ARM -  ARM-based Devices must Build Images <p>ARM-based devices (i.e. newer-generation Mac products and others) will need to build the images rather than use the prebuilt Dockerhub images. <pre><code>docker compose up -d --build\n</code></pre></p> Note - Using SSL with Postgres Container <p>By default in the Getting Started Guide, we do not enable an SSL connection for Postgres for ease of development. See SSL with Local Postgres for how to enable SSL in your local Postgres container. For production environments, using a cloud-hosted database with an SSL connection to MPS/RPS is highly recommended as one step to maintain a secure deployment. Read more about cloud deployments for Azure or AWS here.</p> </li> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> <li> <p>Check that all the containers are running and healthy.</p> <pre><code>docker ps --format \"table {{.Image}}\\t{{.Status}}\\t{{.Names}}\"\n</code></pre> <p>Success</p> <pre><code>IMAGE                               STATUS                        NAMES\nintel/oact-rps:latest               Up 2 minutes (healthy)        open-amt-cloud-toolkit-rps-1      \nhashicorp/vault                     Up 2 minutes                  open-amt-cloud-toolkit-vault-1    \nintel/oact-mpsrouter:latest         Up 2 minutes (healthy)        open-amt-cloud-toolkit-mpsrouter-1\npostgres:15                         Up 2 minutes (healthy)        open-amt-cloud-toolkit-db-1       \nintel/oact-webui:latest             Up 2 minutes                  open-amt-cloud-toolkit-webui-1    \nkong:3.1                            Up 2 minutes (healthy)        open-amt-cloud-toolkit-kong-1     \nintel/oact-mps:latest               Up 2 minutes (healthy)        open-amt-cloud-toolkit-mps-1\n</code></pre> <p>Warning - Container Issues</p> <p>If any of the above containers are not running, walk through the steps again or file a GitHub issue here.</p> <p>If the kong container reloads repeatedly, verify kong.yaml edits. Misconfiguration of this file will cause the container to reload.</p> </li> </ol> <p>Important - Losing Data without Prod Mode Vault</p> <p>Because the vault is running in a dev mode, stored secrets will be lost upon a restart, and profiles and configs must be recreated. They are not persistent in this mode. Be sure to run <code>docker compose down -v</code> when bringing down the stack, which removes the volumes, and start fresh upon <code>docker compose up</code>.  To run vault in production mode, follow the guide here.</p>"},{"location":"GetStarted/setup/#next-up","title":"Next up","text":"<p>Login to Sample Web UI</p>"},{"location":"Reference/architectureOverview/","title":"Architecture Overview","text":"<p>Figure 1 illustrates the high-level architecture of Open AMT Cloud Toolkit microservice architecture.</p> Figure 1: Deploy Open AMT Cloud Toolkit <p>Figure 1 illustrates the high-level steps for basic deployment: </p> <ol> <li>Deploy Microservices - Install the microservices on a development system as Docker* containers, which can run locally or on the cloud.</li> <li>Deploy RPC Architecture - Transfer the lightweight clients to managed devices.</li> <li>Configure AMT - Through the RPS, configure AMT by creating control mode profile(s).</li> <li>Connect AMT - Use the MPS to manage connectivity, as this microservice listens for the call home messaging of managed devices.  </li> <li>Issue AMT Command - Send power commands (e.g., power off) through the MPS.</li> <li>Add AMT functionality - Explore the additional functionality provided by Open AMT Cloud Toolkit to develop your own web console or application.</li> </ol>"},{"location":"Reference/architectureOverview/#out-of-band-management-oob-management","title":"Out-of-band Management (OOB Management)","text":"<p>Open AMT Cloud Toolkit uses remote management technology, also known as OOB Management, to allow administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, Open AMT Cloud Toolkit software can perform remote management, including powering up as a system that is currently powered down.  </p> <p>Remote management can offer potential cost-savings by decreasing the need for in-person technician visits to remote IT sites and reducing downtime.</p>"},{"location":"Reference/architectureOverview/#whats-the-difference-between-in-band-and-oob-management","title":"What's the difference between in-band and OOB Management?","text":"<p>Remote monitoring and management software solutions often require the managed devices to be in the powered on state. The IT administrator connects to and updates the managed device while it is in the powered on state.</p> <p>With out-of-band management, the administrator can connect to the device when it has been powered down or it is unresponsive. </p>"},{"location":"Reference/architectureOverview/#cira-configuration","title":"CIRA Configuration","text":"<p>CIRA enables OOB connections between Intel\u00ae AMT platforms and administrative development systems running Open AMT on the same network. </p> <p>The following steps occur via a CIRA channel:</p> <ol> <li> <p>A remote Intel vPro\u00ae Platform featuring Intel\u00ae AMT is activated and a CIRA configuration is applied. The remote platform is referred to as the managed device. </p> </li> <li> <p>The managed device connects to the MPS and establishes an encrypted connection using Transport Layer Security (TLS) </p> </li> <li> <p>The Intel vPro\u00ae Platform maintains a long standing connection with the MPS through the use of small keep-alive messages to the MPS.</p> </li> <li> <p>A management console sends a command to the MPS, via provided RESTful interfaces, with the command indicating the managed device should take some action.</p> </li> <li> <p>The MPS authenticates the RESTful command and proxies the command for the management console to the managed device.  </p> </li> </ol> <p>The MPS handles the authentication process with the managed device. </p>"},{"location":"Reference/architectureOverview/#control-mode-profile","title":"Control Mode Profile","text":"<p>Managed devices featuring Intel\u00ae AMT support two control modes: </p> <ul> <li> <p>Admin Control Mode (ACM): In this mode, there are no limitations to Intel\u00ae AMT functionality. This reflects the higher level of trust associated with these setup methods. No user consent is required.</p> </li> <li> <p>Client Control Mode (CCM): This mode limits some of Intel\u00ae AMT functionality, reflecting the lower level of trust.</p> <p>Features requiring User Consent:</p> <ul> <li>Keyboard, Video, Mouse (KVM) Control</li> <li>IDE-Redirection for sharing and mounting images remotely</li> </ul> </li> </ul>"},{"location":"Reference/architectureOverview/#domains","title":"Domains","text":"<p>In addition to a CIRA Config and an ACM Profile, ACM requires the creation of a Domain Profile.</p> <p>Intel\u00ae AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. Intel\u00ae AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority.</p>"},{"location":"Reference/architectureOverview/#power-control","title":"Power Control","text":"<p>With the established CIRA channel, Open AMT Cloud Toolkit enables the administrator to manage remote devices and trigger power actions to:</p> <ul> <li>power up</li> <li>power down</li> <li>power up to BIOS</li> <li>reset</li> <li>reset to BIOS</li> </ul> <p>For more information about power states supported by the REST APIs, see Intel\u00ae AMT Implementation and Reference Guide for more details. </p>"},{"location":"Reference/architectureOverview/#keyboard-video-mouse-kvm-control","title":"Keyboard, Video, Mouse (KVM) Control","text":"<p>Intel\u00ae AMT enables remote management of a device, even when the OS isn't running, through KVM over IP support. No additional equipment is needed for this feature.  With KVM control, IT administrators can access and update PCs and devices as if they were onsite. It eliminates the need for remote KVM switches and other hardware. </p>"},{"location":"Reference/architectureOverview/#passwords","title":"Passwords","text":"<p>There are five levels of passwords: </p> <ol> <li>**Intel\u00ae Manageability Engine BIOS Extensions (MEBX) Password: MEBX Password - ** Use this password to secure the local Intel\u00ae MEBX menu. This password is only used when physically accessing the managed device during system boot. Access the menu with Ctrl-P on most devices.</li> <li>**Sample Web UI Password: MPS_WEB_ADMIN_PASSWORD - ** Use this password when logging into the Sample Web UI. The Sample Web UI Password uses this default MPS user authentication credential when it triggers MPS to issue a JWT (JSON Web Token). In most production environments, this default credential is replaced by a more rigorous authentication protocol. Examples include OAuth2, OpenID, or an authentication service that can issue an Auth Token to be validated by the API gateway. </li> <li>**ACM &amp; CCM Profiles: AMT Password - ** RPS uses this password to activate and configure Intel\u00ae AMT. When MPS requests an action of a managed device, such as a power action, it uses this password. Intel\u00ae AMT verifies this password when it gets a command from the MPS server.</li> <li>**Provisioning Certificate Password - **  The AMT Provisioning certificate is a special certificate used by Intel\u00ae AMT devices to establish trust with the configuration service when activating in Admin Control Mode. RPS requires the .pfx version of this certificate along with the password used to export the .pfx certificate to perform ACM activation. </li> <li>**MPS CIRA Credential: MPS_USER and MPS_PASSWORD - ** This CIRA credential is used by Intel\u00ae AMT managed devices to authenticate the MPS when establishing the CIRA connection. </li> </ol> <p>Multiple passwords enhance the security of Open AMT Cloud Toolkit.</p> What Security Default Values Modify 1. Intel MEBX Password Prevention of Physical Security Violations admin In MEBX (Ctrl-P) 2. Sample Web UI Password Remote Role Management Username: standalone Password: G@ppm0ym .env file 3. ACM &amp; CCM Profiles: AMT Password Authentication of MPS/RPS Access Not applicable. 1. Create a new profile. 2. Make an API call to update. 3. Update Vault. 4. Provisioning Certificate Password Signed Certificate Usage Not applicable. 1.Re-export certificate with another password. 2. Create a new profile. 3. Make an API call to update. 4. Update Vault. 5. MPS CIRA Credential MPS credential used by AMT Not applicable. 1. Create a new profile. 2. Make an API call to update. 3. Update Vault. <p>Table 1: Summary of Open AMT Passwords</p>"},{"location":"Reference/architectureOverview/#log-files","title":"Log Files","text":"<p>Each microservice has an associated log file which can contain helpful debug information. Use <code>docker logs</code> to print log information to the terminal.</p>"},{"location":"Reference/architectureOverview/#docker-logs","title":"Docker Logs","text":"<p>To run docker log files in a terminal window as needed:</p> <ol> <li>Open a Terminal or Powershell/Command Prompt and run the command to list the containers:</li> </ol> <pre><code>docker ps\n</code></pre> <ol> <li>Copy the first three digits of the container ID of interest. Run the docker logs command followed by the container ID: </li> </ol> <pre><code>docker logs &lt;container ID&gt;\n</code></pre> <p>See more help options for the <code>docker logs</code> command in Docker Documentation. </p>"},{"location":"Reference/architectureOverview/#log-level","title":"Log Level","text":"<p>Set the log levels in the <code>.env</code> file by altering the configuration levels, <code>MPS_LOG_LEVEL</code> and <code>RPS_LOG_LEVEL</code>. Find the log level descriptions in the tables contained in MPS Configuration and RPS Configuration. </p>"},{"location":"Reference/faq/","title":"FAQ","text":""},{"location":"Reference/faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"Reference/faq/#how-do-releases-work-with-open-amt","title":"How do releases work with Open AMT?","text":"<p>Open AMT carries two releases, the Rapid (\"Monthly\") Release and the Long-Term Support (LTS) Release. </p> <p>Rapid Releases occur every 4-6 weeks. Support for security and bug fixes is only for the duration of that rapid release. Customers will be encouraged to move to a latest rapid release for the most up to date security and bug fixes.</p> <p>LTS Releases occur roughly every 1 to 1.5 years. Support for security and bug fixes exist until the next LTS version is available. At that point, we will provide migration documentation and support to help customers move over to the new LTS release.</p> <p></p>"},{"location":"Reference/faq/#how-does-versioning-work-with-open-amt","title":"How does versioning work with Open AMT?","text":"<p>Open AMT follows SemVer practices for versioning. This means:</p> <ul> <li>Major Version Increment - Breaking Changes (ex: 2.0.0 -&gt; 3.0.0)</li> <li>Minor Version Increment - New Features (ex: 2.0.0 -&gt; 2.1.0)</li> <li>Patch Version Increment - Security and Bug Fixes (ex: 2.0.0 -&gt; 2.0.1)</li> </ul> <p>All microservices with the same minor version should be compatible.</p> <p>The separate repos for microservices and libraries are versioned individually. These versions are separate from the <code>open-amt-cloud-toolkit</code> repo version.  The <code>open-amt-cloud-toolkit</code> repo is where we have the monthly release. This repo might carry a higher version than some of the individual repos but is tagged as <code>{Month} {Year}</code>. All sub-repos referenced within <code>open-amt-cloud-toolkit</code> for a specific release are guaranteed to be compatible.</p> <p></p>"},{"location":"Reference/faq/#what-versions-of-intel-amt-are-supported","title":"What versions of Intel\u00ae AMT are supported?","text":"<p>Open AMT aligns to the Intel Network and Edge (NEX) Group support roadmap for Intel vPro\u00ae Platform and Intel\u00ae AMT devices. This is currently calculated as <code>Latest AMT Version - 7</code>.</p> <p></p>"},{"location":"Reference/faq/#how-do-i-migrate-versions-to-a-new-release","title":"How do I migrate versions to a new release?","text":"<p>Resources and information for migrating releases for either a Kubernetes deployment or local Docker deployment can be found in the Upgrade Toolkit Version documentation.</p> <p></p>"},{"location":"Reference/faq/#what-is-a-pre-release-feature","title":"What is a Pre-Release Feature?","text":"<p>Sometimes, newer features may be available as pre-release. These are features that are still in-development and subject to change. The team opts to make these available for early feedback. These may have limited functionality or potentially even bugs. When the feature is mature and fully validated, it will move from a pre-release state to a full release.</p> <p></p>"},{"location":"Reference/faq/#how-do-i-find-more-information-about-the-mps-and-rps-configuration-files-and-security-details","title":"How do I find more information about the MPS and RPS configuration files and security details?","text":"<p>Details and descriptions of configuration options can be found in MPS Configuration and RPS Configuration.</p> <p>Security information can be found in MPS Security Information and RPS Security Information.</p> <p></p>"},{"location":"Reference/guids/","title":"GUIDs in Intel\u00ae AMT","text":""},{"location":"Reference/guids/#guids-in-intel-amt","title":"GUIDs in Intel\u00ae AMT","text":"<p>Each Intel\u00ae AMT device has a Global Unique Identifier (GUID) assigned to it by default. This GUID will be used as the reference to each device record. Typically, device GUIDs are required to perform power actions and other device-specific manageability features.</p> <p>There are a number of ways to obtain the GUID on the Intel\u00ae AMT device:</p> <ul> <li>Sample Web UI of the Open AMT Cloud Toolkit </li> <li>Devices API Method</li> </ul>"},{"location":"Reference/guids/#via-sample-web-ui","title":"Via Sample Web UI","text":"<ol> <li> <p>Login to your Sample Web UI.</p> </li> <li> <p>Navigate to the Devices tab.</p> </li> <li> <p>Your AMT device's GUID is listed in the 2nd column.       Figure 1: MPS Connected Device </p> </li> </ol>"},{"location":"Reference/guids/#via-api-method","title":"Via API Method","text":"<p>A device's GUID can also be found via the AllDevices or ConnectedDevices MPS methods. Users can follow the Construct a Rest API Call tutorial on constructing and running the ConnectedDevices method as an example.</p> <p>Example ConnectedDevices Output: <pre><code>[{\n    \"host\": \"d12428be-9fa1-4226-9784-54b2038beab6\",\n    \"amtuser\": \"admin\",\n    \"mpsuser\": \"standalone\",\n    \"conn\": 1,\n    \"name\": \"d12428be-9fa1-4226-9784-54b2038beab6\"\n}]\n</code></pre></p>"},{"location":"Reference/logging/","title":"Logging","text":""},{"location":"Reference/logging/#introduction","title":"Introduction","text":"<p>Microservices logging uses the Winston logging format. Log levels for both MPS and RPS microservices are controlled by the environmental variables MPS_LOG_LEVEL and RPS_LOG_LEVEL respectively. Logging levels are listed in the table below by increasing level of detail: <code>error</code>, <code>warn</code>, <code>info</code>, <code>verbose</code>, <code>debug</code>, and <code>silly</code>.</p>"},{"location":"Reference/logging/#log-levels","title":"Log levels","text":"Log level Description error only critical errors such as exceptions; 500 level api responses warn unexpected issue which don't affect service operation info service startup and shutdown messages (default level for MPS and RPS services) verbose database query messages; device heartbeat; 200 level api responses debug level useful for diagnosing issues with the services; 400 level api responses silly all logs"},{"location":"Reference/middlewareExtensibility/","title":"Middleware Extensibility","text":"<p>Middleware extensibility allows developers to implement new middleware handlers to both MPS or RPS. By adding custom functions, MPS and RPS will process and load these during server startup. The <code>loadCustomMiddleware</code> function that executes on startup can be found in <code>mps/src/server/webserver.ts</code> or <code>rps/src/index.ts</code>.</p> <p>Example use-cases:</p> <ul> <li>Multitenancy</li> <li>Handling Custom Authentication Tokens</li> <li>Adding Trace IDs</li> <li>Debugging Requests</li> </ul> <p>To demonstrate the execution, we'll use an example.  Let's say a custom auth token handler was implemented across all API endpoints.  When a call is then made against an API endpoint, the custom handler will execute first.  This handler might process the token.  After executing the custom function and calling <code>next()</code>, API execution will then continue as normal.</p>"},{"location":"Reference/middlewareExtensibility/#add-a-custom-middleware-function","title":"Add a Custom Middleware Function","text":"<p>To add a new function, create a new typescript file in <code>/src/middleware/custom/</code>. An <code>example.ts</code> file is already provided in this directory.</p> <p>The file must have two key parts in order to successfully load:</p> <ol> <li>The desired function must be exported as a default. Only the single, default function will be what is loaded into MPS or RPS. Additional functions that need to be loaded will need their own separate <code>.ts</code> files.</li> <li>Must call <code>next()</code>. This will allow execution to continue after processing the custom function.</li> </ol>"},{"location":"Reference/middlewareExtensibility/#multitenancy-code-example","title":"Multitenancy Code Example","text":"<p>Implementation might vary depending on cloud provider or other 3rd party solutions. This specific example implements against Microsoft Azure and the default Open AMT components. </p> <p>The following code might not be a final solution, but provides a starting point and template example.</p> <p>The example implementation has a tenantId that is passed as part of the JWT token header when an API is called. The token is decoded and its tenantId is checked against the available tenants in MPS or RPS. This verifies that the user has the correct access to the MPS or RPS data being added, modified, or deleted.</p> <p>Multitenancy Example Code</p> <pre><code>import { Request, Response } from 'express'\nimport { devices } from '../../server/mpsserver'\nimport { Environment } from '../../utils/Environment'\n\n  const tenantMiddleware = (req: Request, res: Response, next): void =&gt; {\n  const jwtTokenHeader = Environment.Config.jwt_token_header ??     'x-id-token'\n  const token = req.headers[jwtTokenHeader]\n  req.tenantId = ''\n  if (token != null &amp;&amp; token !== '') {\n    try {\n      const decodedToken = Buffer.from(token as string, 'base64').  toString  ()\n      if (decodedToken != null &amp;&amp; decodedToken !== '') {\n        const dt = JSON.parse(decodedToken)\n        const tenantProp = Environment.Config.jwt_tenant_property ?? ''\n        req.tenantId = dt[tenantProp] ?? ''\n      }\n    } catch (err) {\n      console.error(err)\n    }\n  }\n  next()\n}\n\nexport default tenantMiddleware\n</code></pre> <p>After implementing the multitenancy code changes and starting the services, profiles and configs can be created by providing a <code>tenantID</code> as part of the API calls.</p> <p>Then when activating and configuring the AMT device using RPC, provide the <code>-tenant</code> flag with the <code>tenantID</code> of the profile. Find all RPC flags in the RPC CLI docs.  See example command below.</p> <pre><code>rpc activate -u wss://server/activate -n -profile profilename -tenant profileTenantID\n</code></pre> <p></p>"},{"location":"Reference/powerstates/","title":"AMT Power States","text":"<p>Possible power actions are listed in the tables below. Power actions are specified by number. </p> <p>To obtain information about power actions, use the following methods:</p> <ul> <li>PowerCapabilities: returns the power actions available for a specific device.</li> <li>PowerState: returns current power state.</li> </ul> <p>Start State or Current Power State</p> <p>Consider the current state of the system when implementing a possible action, for example: </p> <ul> <li>Reset to BIOS implies that the current system state is on or powered up.</li> <li>Power up to BIOS implies that current system state is off or powered down.</li> <li>Hibernate implies that the current system state is powered up. </li> </ul> <p>If the system is already powered up, choosing to Power Up to BIOS will not have any effect on the system. A better choice is Reset to BIOS.</p>"},{"location":"Reference/powerstates/#out-of-band","title":"Out-of-band","text":"<p>The power actions below can be used in-band or out-of-band. </p> <p>Commands 100 and above use a combination of HW level power controls (i.e., 2, 5, 8, 10) and some boot option, such as Boot to BIOS.</p> Action # Power Action Start State Transition Description ACPI State(s) 2 Power up/on Powered down/off, Asleep, Hibernating Power up/on fully G0/S0 5 Power cycle Powered up/on Transition to minimal power state and then power up/on fully G2/S5 &gt; G0/S0 8 Power down/off (hard) Powered up/on Transition to a fully powered down state G2/S5 10 Reset Powered up/on Perform hardware reset on the bus N/A 100 Power up to BIOS settings Powered down/off Power to BIOS to verify or modify system configuration G2/S5 101 Reset to BIOS settings Powered up/on Perform hardware reset on the bus to BIOS to verify or modify system configuration G2/S5 400 Reset to PXE Powered up/on Reset to pre-boot execution environment (PXE)(i.e., a network boot N/A 401 Power on to PXE Powered down/off Power up/on fully to pre-boot execution environment (PXE) (i.e., a network boot) N/A"},{"location":"Reference/powerstates/#in-band-required","title":"In-band Required","text":"<p>The power actions below require an in-band agent, Local Management Service (LMS), or Intel\u00ae Integrated Management and Security Status (Intel\u00ae IMSS).</p> <p>LMS is a service that runs locally on an Intel AMT device and enables local management applications to send requests and receive responses to and from the device. The LMS  listens for and intercepts requests directed to the Intel AMT local host and routes them to to the Management Engine via the Intel Management Engine Interface (MEI) driver.</p> <p>Installing LMS and Drivers</p> <p>The service installer is packaged with the Intel MEI drivers on the OEM websites. If Windows OS is reimaged or reinstalled, only the Intel MEI Driver is reinstalled, not LMS or IMSS.</p> <p>If the LMS is not installed, visit the OEM website and look for download packages for Intel\u00ae IMSS or the Intel CSME driver.</p> Action # Power Action Start State Transition Description ACPI State(s) 4 Sleep (deep) Powered up/on Transition to a standby state of low-power usage and store system context (e.g., open applications) in memory G1/S3 7 Hibernate Powered up/on Transition to zero power usage and store system context in non-volatile storage G1/S4 12 Power down/off (soft) Powered up/on Transition to a very minimal power state G2/S5 14 Soft reset Powered up/on Perform a shutdown and then a hardware reset N/A"},{"location":"Reference/powerstates/#alternative-boot-options","title":"Alternative Boot Options","text":"<p>Currently, the Toolkit doesn't natively support secure erase or 200-level calls.</p> Action # Power Action Start State Transition Description 104 Reset to secure erase Powered up/on Perform hardware reset on the bus to secure erase, a process of completely erasing a solid state drive (SSD) 200 Reset to IDE-R floppy disc Powered up/on Perform hardware reset on the bus to a peripheral IDE-R drive, usually reserved for a remote ISO boot 201 Power on to IDE-R floppy disc Powered down/off Power up/on fully to a peripheral IDE-R drive, usually reserved for a remote ISO boot 202 Reset to IDE-R CD-ROM Powered up/on Perform hardware reset on the bus to a peripheral IDE-R CD-ROM drive, usually reserved for a remote ISO boot 203 Power on to IDE-R CD-ROM Powered down/off Power up/on to the bus to a peripheral IDE-R CD-ROM drive, usually reserved for a remote ISO boot"},{"location":"Reference/productionVault/","title":"Production Mode Vault","text":"<p>Learn how to run MPS and RPS using Vault in production server mode. The current local <code>docker-compose.yml</code> file runs Vault in development mode which makes experimenting with the services easier since static tokens can be used for access and unsealing Vault is not required. The downside to this approach is that all Vault data is only stored in memory and is lost once the Vault container is stopped. Running Vault in production mode requires additional steps, but allows Vault data to persist on host filesystem after the container restarts.</p>"},{"location":"Reference/productionVault/#configure-the-toolkit","title":"Configure the Toolkit","text":"<ol> <li> <p>Follow steps to Get the Toolkit, Set Environment Variables, and Set Kong JSON Web Token in the Get Started guide.</p> </li> <li> <p>Update the vault section in the <code>docker-compose.yml</code> file with the section below.     <pre><code>vault:\n    restart: always\n    image: hashicorp/vault\n    networks:\n      - openamtnetwork\n    ports: \n      - \"8200:8200\"\n    volumes:\n      - private-volume:/vault/data:rw\n      - ./vault:/vault/config:rw\n    environment: \n      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}\n      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200\n    cap_add: \n      - IPC_LOCK\n    entrypoint: vault server -config=/vault/config/vault.json\n</code></pre></p> </li> <li> <p>Create a folder named <code>vault</code> located in <code>./open-amt-cloud-toolkit</code> directory and create a new file named <code>vault.json</code> in that folder with the contents below:     <pre><code>{\n    \"storage\":{\n        \"file\":{\n            \"path\":\"/vault/data\"\n        }\n    },\n    \"listener\":{\n        \"tcp\":{\n            \"address\":\"0.0.0.0:8200\",\n            \"tls_disable\": \"true\"\n        }\n    },\n    \"default_lease_ttl\":\"168h\",\n    \"max_lease_ttl\":\"0h\",\n    \"ui\":true,\n    \"log_level\":\"Debug\"\n}\n</code></pre></p> </li> <li> <p>Run `docker compose`` to start the containers from the ./open-amt-cloud-toolkit directory.     <pre><code>docker compose up -d --build\n</code></pre></p> </li> </ol>"},{"location":"Reference/productionVault/#initialize-and-unseal-vault","title":"Initialize and Unseal Vault","text":"<ol> <li> <p>Navigate to <code>http://localhost:8200</code> to initialize and unseal Vault.</p> <p>Danger - Download and Save Vault Keys</p> <p>Make sure to download your Vault credentials and save them in a secure location when unsealing Vault.  If the keys are lost, a new Vault will need to be started and any stored data will be lost.</p> </li> <li> <p>Please refer to HashiCorp documentation on how to Initialize and unseal Vault. Stop and return here after signing in to Vault with the <code>root_token</code>.</p> </li> <li> <p>After initializing and unsealing the vault, you need to enable the Key Value engine.</p> </li> <li> <p>Click Enable New Engine +.</p> </li> <li> <p>Choose KV.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>Leave the default path and choose version 2 from the drop down under Method Options. </p> </li> <li> <p>Click Enable Engine.</p> </li> </ol>"},{"location":"Reference/productionVault/#update-env-variables","title":"Update ENV Variables","text":"<ol> <li> <p>Open your <code>.env</code> file.</p> </li> <li> <p>Change the <code>SECRETS_PATH</code> to <code>kv/data/</code>.</p> </li> <li> <p>Update the <code>VAULT_TOKEN</code> to the Root Token generated by Vault.</p> <p>Example - Vault Section of .env file</p> <pre><code># VAULT\nSECRETS_PATH=kv/data/\nVAULT_ADDRESS=http://vault:8200\nVAULT_TOKEN=s.Mw7t070naY4PfyJk5KEkcX3I\n</code></pre> </li> <li> <p>Rebuild and restart your Docker images and containers.</p> <pre><code>docker compose up -d --build\n</code></pre> </li> <li> <p>Unseal Vault at <code>http://localhost:8200</code> after restarting the container.</p> </li> </ol>"},{"location":"Reference/productionVault/#next-steps","title":"Next Steps","text":"<p>Continue from the Get Started steps to log in to the Sample Web UI and activate a device.</p> <p></p>"},{"location":"Reference/sslpostgresLocal/","title":"SSL with Local Postgres","text":"<p>This guide will walk through how to enable an SSL connection in the Postgres Docker container. By default in the Getting Started Guide, we disable it to ease the setup process and environment for development.</p> <p>For production environments, using a cloud-hosted database with an SSL connection to MPS/RPS is highly recommended as one step to maintain a secure deployment. Read more about cloud deployments for Azure or AWS here.</p>"},{"location":"Reference/sslpostgresLocal/#edit-docker-composeyml","title":"Edit 'docker-compose.yml'","text":"<ol> <li> <p>Update the RPS and MPS connection strings to <code>no-verify</code> instead of <code>disable</code>.</p> <pre><code>...\nenvironment: \n  RPS_MPS_SERVER: http://mps:3000\n  RPS_SECRETS_PATH: ${SECRETS_PATH}\n  RPS_VAULT_TOKEN: ${VAULT_TOKEN}\n  RPS_VAULT_ADDRESS: ${VAULT_ADDRESS}\n  RPS_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/rpsdb?sslmode=no-verify\n...\n</code></pre> <pre><code>...\nenvironment: \n  MPS_INSTANCE_NAME: '{{.Task.Name}}'\n  MPS_SECRETS_PATH: ${SECRETS_PATH}\n  MPS_VAULT_TOKEN: ${VAULT_TOKEN}\n  MPS_VAULT_ADDRESS: ${VAULT_ADDRESS}\n  MPS_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mpsdb?sslmode=no-verify\n...\n</code></pre> </li> <li> <p>Uncomment the <code>command:</code> line in the <code>db</code> section.</p> <pre><code>...\nbuild:\n  context: ./pg\n  dockerfile: ./Dockerfile\ncommand: -c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key\nnetworks:\n  - openamtnetwork\n...\n</code></pre> </li> </ol>"},{"location":"Reference/sslpostgresLocal/#build-image","title":"Build Image","text":"<ol> <li> <p>Build the new Postgres image with SSL enabled. </p> <pre><code>docker compose up -d --build\n</code></pre> </li> </ol>"},{"location":"Reference/troubleshooting/","title":"Troubleshooting","text":"<p>The sections below detail possible errors that may occur when activating or deactivating managed devices along with some potential solutions.</p> <p>Can't find the answer to your questions or issue below? Reach out to the team via Discord for direct help. Or file a GitHub issue.</p>"},{"location":"Reference/troubleshooting/#most-common-issues","title":"Most Common Issues","text":""},{"location":"Reference/troubleshooting/#why-does-an-activated-device-show-disconnected-in-mps","title":"Why does an activated device show disconnected in MPS?","text":"<ol> <li> <p>Are your login credentials stale? Try to log out of the Sample Web UI and back in.</p> </li> <li> <p>Is your Vault service initialized and unsealed? (Only applicable if using production mode Vault)</p> </li> <li> <p>Is your CIRA certificate correct? </p> <p>You can verify this by going to https://[your-stack]:4433 and looking at the certificate.  The Issued party should match either your IP Address or FQDN.  If it is incorrect, delete your Profile and CIRA Config. Delete the existing MPS Certificate from Vault and restart the MPS service.  This will generate a new, correct certificate.  Then create new CIRA Config/Profile and run RPC to reconfigure the AMT device with the new profiles.</p> </li> <li> <p>Try to unplug the ethernet or power cable of the AMT device and replug. Wait 30 seconds and refresh the Sample Web UI to see if the device has connected. Alternatively, run <code>amtinfo</code> via RPC to see if the status has changed to Connected.</p> </li> <li> <p>Try updating the AMT device's BIOS/AMT version.</p> </li> </ol> <p></p>"},{"location":"Reference/troubleshooting/#why-cant-i-login-to-the-sample-web-ui","title":"Why can't I login to the Sample Web UI?","text":"<ol> <li> <p>Have you accepted the certificate warning? If not, re-navigate to https://[your-stack] and accept the warning. </p> </li> <li> <p>Is the Kong service running and healthy?</p> </li> <li> <p>For local deployment, does the Kong secret match in the <code>.env</code> and the <code>kong.yaml</code> files?</p> </li> <li> <p>For cloud deployment, is the Vault initialized and unsealed?  Vault will reseal itself if the pod is restarted and must be unsealed again. </p> </li> </ol> <p></p>"},{"location":"Reference/troubleshooting/#why-does-mps-or-rps-show-as-unhealthy","title":"Why does MPS or RPS show as Unhealthy","text":"<p>Both MPS and RPS have health API routes that they perform as part of startup for both Docker and Kubernetes. The health check verifies that the database and Vault are both available and reachable by the microservices. </p> <p>If MPS or RPS return unhealthy, then one of the two, database or Vault, are unavailable.</p> <p></p>"},{"location":"Reference/troubleshooting/#why-is-there-an-error-retrieving-device-stats-on-login","title":"Why is there an 'Error Retrieving Device Stats' on Login?","text":"<p>This warning typically means that the Sample Web UI and MPS is unable to reach the MPS database.</p> <ol> <li> <p>Is the MPS service healthy?</p> </li> <li> <p>For cloud deployment, is the Kubernetes secret for the MPS DB connection string correct?</p> </li> <li> <p>For cloud deployment, is the database reachable? Is the IP Address whitelisted and correct?</p> </li> </ol> <p></p>"},{"location":"Reference/troubleshooting/#why-do-profilescira-configsdomains-tabs-in-the-sample-web-ui-return-errors","title":"Why do 'Profiles/CIRA Configs/Domains' tabs in the Sample Web UI return errors?\"","text":"<p>This warning typically means that the Sample Web UI and RPS is unable to reach the RPS database.</p> <ol> <li> <p>Is the RPS service healthy?</p> </li> <li> <p>For cloud deployment, is the Kubernetes secret for the RPS DB connection string correct?</p> </li> <li> <p>For cloud deployment, is the database reachable? Is the IP Address whitelisted and correct?</p> </li> </ol> <p></p>"},{"location":"Reference/troubleshooting/#known-issues","title":"Known Issues","text":""},{"location":"Reference/troubleshooting/#amt-118x-not-connecting-to-sample-web-ui","title":"AMT 11.8.x Not Connecting to Sample Web UI","text":"<p>There is an issue for older AMT 11.8.x firmware where the device is successfully configured, but the CIRA connection is unable to successfully establish between the device and MPS.</p> <ol> <li> <p>Update the AMT device's BIOS firmware.</p> </li> <li> <p>After updating, verify with RPC-Go the new AMT version using <code>rpc amtinfo</code>. The new version should be &gt; 11.8.9x.</p> </li> <li> <p>Rerun the activate command using RPC-Go.</p> </li> <li> <p>If the activation and configuration was successful, but the device still does not show as connected, see Step 4 of Why does an activated device show disconnected in MPS?.</p> </li> </ol>"},{"location":"Reference/troubleshooting/#rpc-returns-failed-to-add-mps-root-certificate","title":"RPC Returns <code>Failed to Add MPS Root Certificate</code>","text":"<p>RPC may return <code>Failed to Add MPS Root Certificate</code> when running the <code>activate</code> command. The following resolution steps may help.</p> <ol> <li> <p>Restart the device and then rerun the <code>activate</code> command.</p> </li> <li> <p>If not resolved, stop the LMS service. Rerun the <code>activate</code> command. Full service name: Intel(R) Management and Security Application Local Management Service</p> </li> </ol>"},{"location":"Reference/troubleshooting/#rpc-freezeshangs-when-executing-a-command","title":"RPC Freezes/Hangs when Executing a Command","text":"<p>This can occur due to the WSMan messages being received out of order during communication with RPS.</p> <ol> <li>After RPC times out or you've stopped the execution, rerun the <code>activate</code> command.</li> </ol> <p></p>"},{"location":"Reference/troubleshooting/#specific-microservice-or-library-errors","title":"Specific Microservice or Library Errors","text":""},{"location":"Reference/troubleshooting/#rpc","title":"RPC","text":"<p>More information about specific RPC error codes can be found in the RPC Library Documentation.</p> Error Issue or Message Possible Solutions \"Decrypting provisioning certificate failed\" Double check the password is correct on the certificate loaded into the \"domains\" on the UI \"Exception reading from device\" If MPS and RPS are running in Docker, check to ensure Vault has been unsealed. \"Unable to connect to Local Management Service (LMS). Please ensure LMS is running\" Check to ensure no application has bound to port 16992 \"Unable to launch MicroLMS.\" Check that Intel ME is present, MEI Driver installed and run this executable as administrator Check to ensure no application has bound to port 16992 \"Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Error while adding the certificates to AMT.\" Unplug the device, from both network and power, let it sit for a while. If that doesn't work, file a github issue Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Missing DNS suffix. Run <code>.\\rpc amtinfo</code> and ensure there is a DNS suffix. If it is blank, double check your router settings for DHCP. Alternatively, you can override the DNS suffix with <code>-d mycompany.com</code>. To learn more, see DNS Suffix and Create a Profile with ACM. Error: amt password DOES NOT match stored version for Device 6c4243ba-334d-11ea-94b5-caba2a773d00 Ensure you have provided the <code>-password</code> flag for the <code>-cmd</code> you are trying to execute, and that it is the password you used when provisioning the device. Unable to connect to websocket server. Please check url. After ensuring you can reach your server. Ensure that the certificate common name on the server matches the FQDN/IP of your host address. Error while activating the AMT in admin mode. Check the logs on the RPS server. The rpc.exe fails to connect. If a device has already been provisioned, unprovision it and then reprovision. To deactivate and reactivate devices, see the Mircoservices section for RPC, RPC Activate/Deactivate Examples"},{"location":"Reference/troubleshooting/#mps","title":"MPS","text":"<p>Additional logging details can be enabled by modifying the <code>log_level</code> field in the MPS configuration.</p> Error Issue or Message Possible Solutions Vault is empty in dev mode. Profiles and configs are not persistent in this mode. To run vault in production mode, follow the Use Docker and Vault in Production Mode. MPS is missing from list of running services. (1) Check for error messages in the logs.  (2) Verify that the <code>.env</code> file contains correct values in each field.  (3) Verify that the Kong secret provided in the <code>.env</code> matches the secret in <code>kong.yaml</code>"},{"location":"Reference/troubleshooting/#rps","title":"RPS","text":"<p>Additional logging details can be enabled by modifying the <code>log_level</code> field in the RPS configuration.</p> Error Issue or Message Possible Solutions Create a profile fails or information cannot be read from vault. Make sure both Vault and Postgres are running. For details, see the <code>docker ps</code> command in Build and Run Docker Images. An error occurred during provisioning. (1) Verify that the correct certificate is being used.  (2) Verify the Domain suffix.  (3) Verify RPS is able to reach the AMT device. Check firewalls and pings."},{"location":"Reference/troubleshooting/#ui-toolkit","title":"UI Toolkit","text":"<ul> <li>If you encounter an error during the installation, verify the prerequisites and version numbers, such as Node.js* LTS, by consulting the tutorial Add MPS UI Toolkit Controls to a WebUI. </li> <li>If adding a control results in an error, double-check the device ID, mpsServer IP address value, and authToken.</li> </ul>"},{"location":"Reference/troubleshooting/#general-troubleshooting-tips","title":"General Troubleshooting Tips","text":"<p>If a configuration becomes unworkable, it may be necessary to clean up the environment by:</p> <ul> <li>unprovisioning, also known as deactivating, the managed device</li> <li>stopping all Docker services</li> </ul> <p>Do all the above if it becomes necessary to reset your environment completely. See instructions below.</p> <ol> <li>Unprovision the Managed Device: Use rpc.exe to dectivate the managed device as described in RPC Activate/Deactivate Examples. The <code>deactivate</code> parameter executes a full unprovision of the managed device. It is also possible to implement a full unprovision via MEBX. See Unprovisioning.</li> <li>Shut down Docker Services: Use <code>docker image prune</code> and <code>docker image rm</code> to stop or remove all images, containers, and volumes, as described in Build and Run Docker Images.</li> </ol> <p>The best practice example below stops Docker and then prunes all volumes. </p> <p>Example - Cleanup of Docker Images</p> <ol> <li> <p>Stop Docker containers.</p> <pre><code>docker compose down -v\n</code></pre> </li> <li> <p>Prune the images and volumes.</p> <pre><code>docker system prune -a --volumes\n</code></pre> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/","title":"Custom Provisioning Certificate","text":"<p>For production deployments, we highly recommend purchasing a 3rd party provisioning certificate. See all available vendors here. </p> <p>Warning - Custom Provisioning Certificates in Production Deployments</p> <p>The hash of custom provisioning certificates must be manually added to all devices that will be configured into ACM. This can be done through MEBx or USB Configuration. Both options require manual, hands-on configuration of each AMT device. Adding the hash to AMT's trusted list is a mandatory requirement for the device to successfully activate.</p> <p>However, some developers opt to use a custom provisioning certificate for testing and validation purposes.</p> <p>The steps below outline how to generate a custom certificate based on the requirements within the Intel\u00ae AMT SDK.</p> <p>Note - Unprovisioning will Delete Custom Hashes</p> <p>When a device is unprovisioned, AMT will delete and remove all hashes inserted. If you want to then activate the device again, you will have to reinsert the certificate hash again.</p>"},{"location":"Reference/Certificates/generateProvisioningCert/#generate-custom-provisioning-certificate","title":"Generate Custom Provisioning Certificate","text":"<p>These steps create a certificate for a domain <code>example.com</code> and walk through how to successfully activate a device using the <code>example.com</code> DNS suffix.</p>"},{"location":"Reference/Certificates/generateProvisioningCert/#what-youll-need","title":"What You'll Need","text":"<p>Software </p> <ul> <li>OpenSSL</li> </ul>"},{"location":"Reference/Certificates/generateProvisioningCert/#configuration-files","title":"Configuration Files","text":"<p>First, we need to prepare two files:</p> <ul> <li>cert.conf - Certificate configuration file. It is used to define the specific settings for the certificate.</li> <li>csr.conf - Certificate signing request configuration file. </li> </ul>"},{"location":"Reference/Certificates/generateProvisioningCert/#create-certconf","title":"Create <code>cert.conf</code>","text":"<ol> <li> <p>Create a new file named <code>cert.conf</code>.</p> </li> <li> <p>Copy and paste the below example into the file.</p> <p>Do not remove the OID 2.16.840.1.113741.1.2.3 from the extendedKeyUsage. This is an AMT requirement.</p> <p>Optionally, update the [alt_names] section with your own server DNS  information.</p> cert.conf<pre><code>basicConstraints = CA:FALSE\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth, 2.16.840.1.113741.1.2.3 \nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = test.example.com\nDNS.2 = example.com\nIP.1 = 192.168.1.1\n</code></pre> </li> <li> <p>Save and close.</p> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/#create-csrconf","title":"Create <code>csr.conf</code>","text":"<ol> <li> <p>Create a new file named <code>csr.conf</code>.</p> </li> <li> <p>Copy and paste the below example into the file.</p> <p>Optionally, update the [dn] section and CN field with your own server FQDN and information.</p> csr.conf<pre><code>[ req ]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[ dn ]\nC = US\nST = Arizona\nL = Chandler \nO = Organization\nOU = Department\nCN = test.example.com\n</code></pre> </li> <li> <p>Save and close.</p> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/#create-the-certificate-and-hash","title":"Create the Certificate and Hash","text":"<ol> <li> <p>Open a terminal and verify OpenSSL is installed.</p> <pre><code>openssl version\n</code></pre> </li> <li> <p>Create a self-signed CA root certificate file named <code>rootCA.crt</code> with a key file named <code>rootCA.key</code>.</p> <pre><code>openssl req -x509 -sha256 -days 3560 -nodes -newkey rsa:2048 -subj \"//SKIP=skip/CN=CA Custom Root Certificate/C=US/ST=Arizona/L=Chandler\" -keyout rootCA.key -out rootCA.crt\n</code></pre> </li> <li> <p>Generate a RSA private key named server.key.</p> <pre><code>openssl genrsa -out server.key 2048\n</code></pre> </li> <li> <p>Generate a Certificate Signing Request using the private key and <code>cert.conf</code> file.</p> <pre><code>openssl req -new -key server.key -out server.csr -config csr.conf\n</code></pre> </li> <li> <p>Sign the Certificate Signing Request with the CA certificate and <code>cert.conf</code> file.</p> <pre><code>openssl x509 -req -in server.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out server.crt -days 3650 -sha256 -extfile cert.conf\n</code></pre> </li> <li> <p>Create a <code>.pfx</code> file using the private key, server certificate, and CA root certificate. It will prompt to create a password. This password will be used when creating a Domain profile.</p> <pre><code>openssl pkcs12 -export -out vprodemo_custom.pfx -inkey server.key -in server.crt -certfile rootCA.crt\n</code></pre> </li> <li> <p>Get the SHA1 hash of the root certificate. </p> <pre><code>openssl x509 -noout -fingerprint -sha1 -inform pem -in rootCA.crt\n</code></pre> <p>Success - SHA1 Output</p> <pre><code>SHA1 Fingerprint=51:45:E3:A4:AE:66:88:E0:AF:85:EC:EB:06:74:6B:8D:C3:07:C1:9D\n</code></pre> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/#upload-provisioning-certificate","title":"Upload Provisioning Certificate","text":""},{"location":"Reference/Certificates/generateProvisioningCert/#create-domain-profile","title":"Create Domain Profile","text":"<ol> <li> <p>Open the Sample Web UI and Login.</p> </li> <li> <p>Create a domain profile. Upload the <code>.pfx</code> file and enter the password set for it. See Create a Domain Profile for more details. </p> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/#insert-the-hash-using-mebx","title":"Insert the Hash using MEBx","text":"<p>Warning - Adding Hash for AMT 16 or Newer</p> <p>These steps may not be exact or available within MEBx on AMT 16 or newer devices due to OEM restrictions. USB Configuration may be required. </p> <ol> <li> <p>Switch to the AMT device.</p> </li> <li> <p>Restart the device. While the device is booting up, press Ctrl+P to reach the MEBX login screen.</p> Note - Other Keybinds to Enter MEBx <p>The keystroke combination Ctrl+P typically invokes the BIOS to display the MEBX login screen. If this does not work, check the manufacturer's instructions or try function keys (e.g., F2, F12).</p> </li> <li> <p>Enter the MEBx password.</p> Note - Default MEBx Password for First Time Use <p>If it is the first time entering MEBX and the device has not been provisioned previously, the default password is <code>admin</code>. Create a new password when prompted.</p> </li> <li> <p>Select Intel(r) AMT Configuration.</p> </li> <li> <p>Verify that the device is in pre-provisioning mode. If not, perform a full unprovision under Unconfigure Network Access.</p> </li> <li> <p>Select Remote Setup and Configuration.</p> </li> <li> <p>Select TLS PKI.</p> </li> <li> <p>Set the PKI DNS suffix to <code>example.com</code>.</p> <p>Or, if using a different DNS suffix, set it to that instead. See DNS Suffix for more details.</p> </li> <li> <p>Select Manage Hashes.</p> <p> Figure 1: Manage Hashes </p> </li> <li> <p>Press the <code>Insert</code> key.</p> </li> <li> <p>Provide a name for the new hash and press Enter.</p> </li> <li> <p>Insert the new SHA1 hash using the fingerprint obtained from Step 7 in Create the Certificate and Hash. The hash must be formatted as shown in example.</p> <p> Figure 2: Hash Input </p> </li> <li> <p>Press the <code>Y</code> key to set the hash as active.</p> </li> <li> <p>Press the <code>esc</code> key repeatedly to exit MEBx and reboot the device.</p> </li> </ol>"},{"location":"Reference/Certificates/generateProvisioningCert/#verify-the-hash","title":"Verify the Hash","text":"<ol> <li> <p>After the device reboots, open Terminal or Command Prompt as Administrator.</p> </li> <li> <p>Verify the certificate hash was inserted correctly.</p> <p>The new hash should be listed.</p> <pre><code>rpc amtinfo -cert\n</code></pre> <p>Success - Hash Inserted Correctly</p> <p> Figure 4: Hash Output </p> </li> <li> <p>Activate the AMT device with an ACM Profile. See Create a Profile with ACM and Build &amp; Run RPC for more details.</p> Troubleshoot - Error During Activation <p>The following error may occur during the first attempt at activation.</p> <pre><code>time=\"2023-08-17T11:38:57-07:00\" level=trace msg=\"HTTP/1.1 200 OK\\r\\nDate: Thu, 17 Aug 2023 18:38:57 GMT\\r\\nServer: Intel(R) Active Management Technology 15.0.35.2039\\r\\nX-Frame-Options: DENY\\r\\nContent-Type: application/soap+xml; charset=UTF-8\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n043E\\r\\n&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;&lt;a:Envelope xmlns:a=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xmlns:b=\\\"http://schemas.xmlsoap.org/ws/2004/08/addressing\\\" xmlns:c=\\\"http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd\\\" xmlns:d=\\\"http://schemas.xmlsoap.org/ws/2005/02/trust\\\" xmlns:e=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\\" xmlns:f=\\\"http://schemas.dmtf.org/wbem/wsman/1/cimbinding.xsd\\\" xmlns:g=\\\"http://intel.com/wbem/wscim/1/ips-schema/1/IPS_HostBasedSetupService\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"&gt;&lt;a:Header&gt;&lt;b:To&gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/b:To&gt;&lt;b:RelatesTo&gt;3&lt;/b:RelatesTo&gt;&lt;b:Action a:mustUnderstand=\\\"true\\\"&gt;http://intel.com/wbem/wscim/1/ips-schema/1/IPS_HostBasedSetupService/AdminSetupResponse&lt;/b:Acti\"\ntime=\"2023-08-17T11:38:57-07:00\" level=debug msg=\"sending message to RPS\"\ntime=\"2023-08-17T11:38:57-07:00\" level=debug msg=\"closing connection to lms\"\ntime=\"2023-08-17T11:38:57-07:00\" level=debug msg=\"received messages from RPS\"\ntime=\"2023-08-17T11:38:57-07:00\" level=error msg=\"Unknown error has occured\"\ntime=\"2023-08-17T11:38:57-07:00\" level=debug msg=\"closing connection to lms\"\n</code></pre> <p></p> <ol> <li> <p>If this error occurs, verify the device was activated successfully.</p> <pre><code>rpc amtinfo\n</code></pre> </li> <li> <p>If the device shows it was activated into admin control mode, rerun the activate command to successfully finish AMT configuration.</p> </li> </ol> </li> <li> <p>During device unprovisioning, AMT will delete any inserted hashes and will have to be manually reinserted.</p> </li> </ol> <p></p>"},{"location":"Reference/Certificates/remoteProvisioning/","title":"Provisioning Certificate","text":""},{"location":"Reference/Certificates/remoteProvisioning/#what-is-remote-provisioning","title":"What is remote provisioning?","text":"<p>Provisioning is the process of bringing a remote device under the management of the Management Presence Server (MPS). Ideally, the process activates and configures a remote device without physically touching it. To manage a device remotely, you must provision it, securely configure it using the Remote Provisioning Server (RPS), which communicates with the Management Presence Server (MPS). </p> <p>The table below describes the process: </p> Step Significance to Provisioning 1. Create a Client Initiated Remote Access (CIRA) configuration This saved configuration will be used to configure the CIRA protocol for public cloud environments. 2. Set up the AMT Profile and choose an activation type Choose from two modes, Admin Control Mode (ACM) and Client Control Mode (CCM). If ACM is chosen, add a provisioning certificate in Step 3. CCM does not require a certificate. 3. Add a domain profile and associated signed provisioning certificate Upload a provisioning certificate. 4. Use the rpc-go client application to activate the remote device Deploy and run the client as Administrator on the desired remote platform. Leverage the profile you created in Step 2. <p>Figure 1 illustrates the steps below. Also, see Get Started.</p> <p>The toolkit accomplishes secure provisioning with authentication and a secure tunnel using the Transport Layer Security (TLS) protocol. </p> <p>The authentication process involves:</p> <ul> <li>A provisioning certificate*: an electronic document used to establish the identity of the holder</li> <li>CIRA: a protocol used by the remote device to \"call home\", initiate remote connectivity, with an MPS.</li> </ul> <p>After a device is provisioned, the administrator can use the management console to perform different control activities, such as power actions (e.g., Reset) without an onsite visit.</p> Figure 1: Provisioning and CIRA"},{"location":"Reference/Certificates/remoteProvisioning/#what-about-manual-provisioning","title":"What about manual provisioning?","text":"<p>Sometimes it's not possible to deploy the rpc-go client application to activate the device remotely. When remote provisioning is not an option, provision manually in the BIOS.</p> <p>To provision manually for ACM, see Set a DNS Suffix through MEBX.</p>"},{"location":"Reference/Certificates/remoteProvisioning/#what-is-a-remote-provisioning-certificate","title":"What is a remote provisioning certificate?","text":"<p>A remote provisioning certificate is used for the activation of the remote device by the provisioning server. The activation phase of provisioning turns on or enables Intel AMT in the remote device. The Intel AMT firmware contains the root certificate hashes, TLS-based thumbprints, of participating vendors, known as certificate authorities (CA). The root certificate hash is compared with that certificate's hash. If they match, the certificate is deemed valid. </p> <p>Note</p> <ul> <li>The remote provisioning certificate is used only for initial provisioning of the device, bringing it under the management of the provisioning server. </li> <li>Purchase a separate certificate for website hosting. </li> </ul>"},{"location":"Reference/Certificates/remoteProvisioning/#how-do-provisioning-certificates-work-in-the-toolkit","title":"How do provisioning certificates work in the Toolkit?","text":""},{"location":"Reference/Certificates/remoteProvisioning/#acquire","title":"Acquire","text":""},{"location":"Reference/Certificates/remoteProvisioning/#purchase","title":"Purchase","text":"<p>To use a provisioning certificate in the toolkit, purchase the certificate from a CA. </p> <p>Note</p> <ul> <li>You do not have to purchase a certificate for each device in a fleet. The certificate is purchased for the provisioning server. </li> <li>Prices vary per vendor.</li> </ul> <ul> <li>Comodo</li> <li>DigiCert</li> <li>Entrust</li> <li>GoDaddy</li> </ul> <p>Important - Intel AMT and using CAs</p> <p>For ACM in Open Active Management Technology (Open AMT) Cloud Toolkit, use only certificate vendors that support Intel\u00ae AMT.</p>"},{"location":"Reference/Certificates/remoteProvisioning/#generate","title":"Generate","text":"<p>Alternatively, for development, custom provisioning certificates can be generated for use using tools like OpenSSL. See Custom Provisioning Certificate for additional details.</p>"},{"location":"Reference/Certificates/remoteProvisioning/#upload","title":"Upload","text":"<p>After purchasing a certificate:</p> <ol> <li>Download the personal exchange format (PFX) file. This file contains public and private objects in a single file. It also contains a certificate chain, including the public key of the root certificate, the public key the intermediate certificate, public key of the SSL certificate. </li> <li>Upload it during the domain profile stage of provisioning. The PFX is saved to Vault. </li> </ol> <p>This uploaded file is used during the activation stage.</p>"},{"location":"Reference/Certificates/remoteProvisioning/#activate","title":"Activate","text":"<p>After you switch Intel AMT on, or activate it, CIRA is configured. In order to configure CIRA, another certificate is necessary. Currently, the toolkit uses a self-signed certificate generated by MPS and stored in Vault. The certificate generation happens during deployment of the MPS. This certificate cannot be obtained from a vendor. MPS automatically loads the CIRA self-signed certificate into Vault.</p> <p>Intel AMT checks the common name of the self-signed certificate. It must match the one you've supplied in the CIRA Config Profile on the MPS Address line. </p>"},{"location":"Reference/Certificates/remoteProvisioning/#learn-more","title":"Learn More","text":"Link Description An Introduction To Intel AMT Remote Configuration Selection Outlines the provisioning process. Certificate Setup and Configuration Video Describes the certificate purchase process. What is the  vPro\u00ae Platform? Describes the certificate purchase process."},{"location":"Reference/Certificates/tls/","title":"TLS Certificate","text":""},{"location":"Reference/Certificates/tls/#what-is-tls","title":"What is TLS?","text":"<p>Transport Layer Security (TLS) is a protocol used to establish encrypted communication sessions over an IP network between an application and server. As the most widely-used encryption protocol, it secures email, instant messaging, voice over IP (VoIP), HTTPS, and more. Encrypted TLS sessions promote data security and prevent tampering, eavesdropping, and other malicious activity.</p> <p>The protocol involves: </p> <ul> <li>Public-key Cryptography: public-private key pairs generated by cryptographic algorithms</li> <li>Digital Certificates: an electronic document used to establish identity of the holder with the use of the public key</li> </ul>"},{"location":"Reference/Certificates/tls/#what-is-a-tls-digital-certificate","title":"What is a TLS digital certificate?","text":"<p>Electronic documents, called certificates, are issued by and purchased from Certificate Authorities (CA), organizations that comply with TLS industry regulations, requirements, and standards.</p> <p>When a client running a web application, such as a browser, connects to a server, the server sends a TLS certificate that can be used to verify the authenticity of a server. The web application uses certificates present on the client to establish a secure connection. </p> <p>There are two ways to use TLS in the toolkit:</p> <ul> <li>Purchase a certificate from a CA and inject it via a proxy application </li> <li>Generate a self-signed certificate with mesh commander</li> </ul> <p>There are three types of TLS certificates available for purchase from CAs:</p> Certificate Type CA issues to Authentication Level Appropriate for Domain Validated an applicant listed in domain name's admin contact list Low Individuals and very small businesses Organization Validated an organization that submits required documentation Medium Businesses that collect sensitive data, confidential information, social media information, etc. Extended Validation an organization that submits required documentation and passes an EV validation guideline High Businesses that deal with payments, sensitive data, confidential information, etc. <p>All certificate types use 256-bit encryption.</p>"},{"location":"Reference/Certificates/tls/#what-is-a-self-signed-certificate","title":"What is a self-signed certificate?","text":"<p>In addition to purchasing a certificate from a CA, it is possible to generate free self-signed certificates. Self-signed certificates offer trust value within an organization and are appropriate for development, but they are not appropriate for securing content that is presented to outside world.</p>"},{"location":"Reference/Certificates/tls/#how-does-tls-work-in-the-toolkit","title":"How does TLS work in the Toolkit?","text":"<p>Intel\u00ae AMT is preloaded with TLS-based certificate thumbprints, a string of hexadecimal characters that identifies a certificate, of participating vendors. When you purchase and install a certificate from a participating vendor, you'll be able to use the toolkit to perform remote configuration. </p> <p>To get a list of participating vendors, see Intel Developer Zone.</p> <p>MPS and RPS contain TLS-based self-signed certificates that are involved in the device activation. See Remote Provisioning.</p>"},{"location":"Reference/Certificates/tls/#learn-more","title":"Learn More","text":"Link Description An Introduction To Intel AMT Remote Configuration Selection Outlines the provisioning process. Certificate Setup and Configuration Video Describes the certificate purchase process."},{"location":"Reference/Console/overview/","title":"Overview","text":"<p>Warning - Console in Alpha Development</p> <p>Console is currently under development. The current available tags for download are Alpha version code. This could mean that certain features may not function yet, visual look and feel may change, or bugs/errors may occur. It is not recommended for use in Production deployments. Follow along our Feature Backlog for future releases and feature updates</p> <p>Console is an application that provides a 1:1, direct connection for AMT devices for use in an enterprise environment. Users can add activated AMT devices to access device information and device management functionality such as power control, remote keyboard-video-mouse (KVM) control, and more.</p> Figure 1: Console Overview <p>RPC-Go can perform activation and configuration of Intel AMT locally. Using Enterprise Assistant, RPC-Go can also securely configure 802.1x and TLS, if required, based on existing network requirements.</p> <p>After a device is activated, the device can be added into Console with the device's hostname and AMT credentials. Once added, users can view device information and perform out-of-band management operations, such as power control, on the device. </p>"},{"location":"Reference/Console/overview/#get-started","title":"Get Started","text":"<p>Set up Console quickly and get a device connected.</p> <p>Get Started Now</p> <p></p>"},{"location":"Reference/Console/wsmanExplorer/","title":"WSMAN Explorer","text":"<p>Console has the ability to view both the correctly formatted WSMAN input sent to AMT and the WSMAN output response of the supported classes. This can be used to help with development or to view additional AMT data that might not be displayed in the default UI.</p> <p>Note - Additional Supported WSMAN Classes</p> <p>Console does not have support for all of the WSMAN classes that AMT supports today. The most commonly used classes have been prioritized. If you need additional support for a specific class, log an issue for Console here.</p>"},{"location":"Reference/Console/wsmanExplorer/#to-use-wsman-explorer","title":"To Use WSMAN Explorer","text":"<ol> <li> <p>Open Console.</p> </li> <li> <p>Navigate to the Devices tab on the left-hand menu.</p> </li> <li> <p>Select the magnifying glass icon for the device that you want to explore.</p> <p> Figure 1: Start WSMAN Explorer </p> </li> <li> <p>Select a call from the dropdown menu in the upper-right to view.</p> <p> Figure 2: View a WSMAN Call </p> </li> </ol>"},{"location":"Reference/Console/GetStarted/activateDevice/","title":"Activate a Device","text":"<p>Developed in Go* programming language, the Remote Provisioning Client (RPC) application runs on the managed device. RPC-Go activates and configures Intel\u00ae AMT on the managed device. Once properly configured, the device can be added to Console.</p>"},{"location":"Reference/Console/GetStarted/activateDevice/#download-rpc","title":"Download RPC","text":"<p>On the AMT device, download the latest RPC-Go version from the RPC-Go GitHub Repo Releases Page for the Operating System of the AMT device (Windows or Linux).</p>"},{"location":"Reference/Console/GetStarted/activateDevice/#activate-device","title":"Activate Device","text":"<ol> <li> <p>On the AMT device, open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows).</p> </li> <li> <p>Navigate to the directory containing the RPC application.</p> </li> <li> <p>Intel AMT can be activated in one of two modes:</p> <ul> <li> <p>Client Control Mode (CCM): This mode offers all manageability features including, but not limited to, power control, audit logs, and hardware info. Redirection features, such as KVM or SOL, require user consent. The managed device will display a 6-digit code that must be entered by the remote admin to access the remote device via redirection.</p> </li> <li> <p>Admin Control Mode (ACM): ACM mode supports all manageability features without requiring user consent. This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.</p> </li> </ul> Client Control Mode (CCM)Admin Control Mode (ACM) <ol> <li> <p>Run the following command. Choose a strong password to set as the AMT Password.</p> <pre><code>rpc activate -local -ccm -password NewAMTPassword\n</code></pre> <p>Success</p> <pre><code>time=\"2024-07-02T10:29:22-07:00\" level=info msg=\"Status: Device activated in Client Control Mode\"\n</code></pre> </li> </ol> <p>Admin Control Mode requires additional steps to establish strong security due to the elevated privileges.</p> <p></p> <p>Provisioning Certificate</p> <ul> <li>DigiCert</li> <li>Entrust</li> <li>GoDaddy</li> </ul> <p>Important - Intel AMT and using CAs</p> <p>For ACM in Open Active Management Technology (Open AMT) Cloud Toolkit, use only certificate vendors that support Intel\u00ae AMT.</p> <p>Alternatively, for development, custom provisioning certificates can be generated. See Custom Provisioning Certificate for additional details.</p> <p></p> <p>DNS Suffix</p> <p>The DNS suffix encompasses the domain suffix (e.g., .com) and follows the hostname. Consider the following DNS Name example:</p> <p>Example - DNS</p> <p>DNS Name: cb-vending1.burgerbusiness.com</p> <p>In this example, the hostname is cb-vending1 and the DNS suffix is burgerbusiness.com.</p> <p>To set the DNS suffix:</p> <ul> <li> <p>Manually set it using MEBX on the managed device. See MEBX Documentation.</p> </li> <li> <p>Alternately, change the DHCP Option 15 to the DNS suffix within the Router settings.</p> </li> </ul> <p></p> <p>Activate into ACM</p> <p>After obtaining a provisioning certificate and setting the DNS suffix, the AMT device is ready to be activated.</p> <ol> <li> <p>Run the following command. Choose a strong password to set as the AMT Password.</p> <pre><code>rpc activate -local -acm -amtPassword NewAMTPassword -provisioningCert \"{BASE64_PROV_CERT}\" -provisioningCertPwd certPassword\n</code></pre> <p>Note - Using Config File and/or SMB Share</p> <p>If you do not want to provide the base64 string of the provisioning certificate on the command line, a config file and/or SMB share can be used as a more secure method. See the Local Activation RPC CLI Documentation.</p> <p>Success</p> <pre><code>time=\"2024-07-02T10:38:32-07:00\" level=info msg=\"Status: Device activated in Admin Control Mode\"\n</code></pre> </li> </ol> </li> </ol>"},{"location":"Reference/Console/GetStarted/activateDevice/#configure-network-settings","title":"Configure Network Settings","text":"<p>AMT can be configured for both wired and wireless networks. Intel AMT does not currently support wireless for Linux-based devices.</p> WiredWireless <ol> <li> <p>Create a new file called <code>config.yaml</code>. Copy and paste the corresponding template below.</p> <p>These templates show how to create a simple Wired profile for configuring a device for either DHCP or a Static IP Address.</p> DHCPStatic config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  dhcp: true\n  ipsync: true\n</code></pre> config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  static: true\n  ipaddress: 192.168.1.50\n  subnetmask: 255.255.255.0\n  gateway: 192.168.1.1\n  primarydns: 8.8.8.8\n  secondarydns: 4.4.4.4\n</code></pre> </li> <li> <p>Change the fields with your desired values.</p> </li> <li> <p>Save the file.</p> </li> <li> <p>Provide the <code>config.yaml</code> file using the <code>-config</code> flag. </p> <pre><code>rpc configure wired -config config.yaml\n</code></pre> </li> </ol> <ol> <li> <p>Create a new file called <code>config.yaml</code>. Copy and paste the corresponding template below.</p> <p>These templates show how to create a simple Wireless profile called exampleWifiWPA2.</p> config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwifiConfigs:\n  - profileName: 'exampleWifiWPA2' # friendly name (ex. Profile name)\n    ssid: 'exampleSSID' # network name\n    priority: 1\n    authenticationMethod: 6 # 4 for WPA, 6 for WPA2\n    encryptionMethod: 4 # 3 for TKIP, 4 for CCMP\n    pskPassphrase: '' # network password\n</code></pre> </li> <li> <p>Fill in fields with desired options and secrets. If the secrets are not provided (e.g. secret field is an empty string or not given), the secrets will be prompted for as user input in the command line.</p> <p>Alternatively, secrets can be stored and referenced in a separate file. See the RPC-Go Configure Wireless documentation.</p> </li> <li> <p>Save the file.</p> </li> <li> <p>Provide the <code>config.yaml</code> file using the <code>-config</code> flag. </p> <pre><code>rpc configure wireless -config config.yaml\n</code></pre> </li> </ol> <p></p> <p>After the device has been activated and the network configured, the device can now be added and connected to using Console. </p>"},{"location":"Reference/Console/GetStarted/activateDevice/#next-up","title":"Next up","text":"<p>Add a Device</p>"},{"location":"Reference/Console/GetStarted/addDevice/","title":"Add a Device","text":"<p>Warning - Console in Alpha Development</p> <p>Console is currently under development. The current available tags for download are Alpha version code. This could mean that certain features may not function yet, visual look and feel may change, or bugs/errors may occur. It is not recommended for use in Production deployments. Follow along our Feature Backlog for future releases and feature updates</p> <ol> <li> <p>In the Console UI, navigate to the Devices page in the left-hand menu sidebar.</p> </li> <li> <p>In the upper-right, select Add a Device.</p> <p> Figure 1: Add a New Device </p> </li> <li> <p>Enter the Hostname of the device.</p> </li> <li> <p>Choose a Friendly Name of your choice. This provides a more user-friendly way to refer to the device.</p> </li> <li> <p>Enter admin as the Username.</p> </li> <li> <p>Enter the AMT Password of the device set during activation.</p> </li> <li> <p>For AMT 16.1 or newer devices only, select the Use TLS checkbox and Allow Self-Signed Certificates checkbox.</p> Important - TLS Requirement for AMT 16.1 and newer devices <p>Starting with AMT 16.1, TLS is required. By default, the AMT device will come with a self-signed TLS certificate as part of the firmware. By selecting both the Use TLS and Allow Self-Signed Certificates checkboxes, AMT will utilize the built-in TLS certificate. This is the recommended path for Getting Started as it requires less initial setup.</p> <p>To use a different TLS certificate, such as a 3rd party CA signed certificate, Enterprise Assistant is required. See the Enterprise Assistant Overview and Enterprise Assistant TLS Configuration with RPC-Go documentation for additional details.</p> <p>Note - Not Sure of the AMT Version?</p> <p>If the AMT version is not known, the RPC-Go <code>amtinfo</code> command can be used. This will print out the device's AMT version as part of the response.</p> <pre><code>rpc amtinfo\n</code></pre> </li> <li> <p>Click Submit.</p> <p>Example - Add a New Device</p> <p> Figure 2: Add a New Device Example </p> </li> </ol>"},{"location":"Reference/Console/GetStarted/addDevice/#next-up","title":"Next up","text":"<p>Manage a Device</p>"},{"location":"Reference/Console/GetStarted/manageDevice/","title":"Manage a Device","text":"<p>Warning - Console in Alpha Development</p> <p>Console is currently under development. The current available tags for download are Alpha version code. This could mean that certain features may not function yet, visual look and feel may change, or bugs/errors may occur. It is not recommended for use in Production deployments. Follow along our Feature Backlog for future releases and feature updates</p>"},{"location":"Reference/Console/GetStarted/manageDevice/#try-out-intel-amt-capabilities","title":"Try out Intel AMT Capabilities","text":"<ol> <li> <p>Select the newly added AMT device.</p> <p> Figure 1: Devices Tab </p> </li> <li> <p>Select an action to perform from the Power Actions or Redirection options in the top-right.</p> <p>The right-hand navigation menu can be used to find additional device information, such as logs and hardware info, and out-of-band capabilities, such as KVM and Serial-Over-LAN.</p> <p>Warning - Power Actions in KVM</p> <p>Turn off active redirection sessions, such as KVM or SOL, before specific power state transitions. Power Cycle (Code 5) and Unconditional Power Down (Power Off, Code 8) will be rejected as invalid if there is an active redirection session. Reset (Code 10) will function in KVM along with the other unmentioned Power Actions.</p> <p> Figure 2: Device Page and Options </p> </li> </ol>"},{"location":"Reference/Console/GetStarted/manageDevice/#next-steps","title":"Next steps","text":"<p>After successfully adding and managing devices using Console, explore other tools and next-level topics related to Console:</p>"},{"location":"Reference/Console/GetStarted/manageDevice/#8021x-and-tls-environments-using-enterprise-assistant","title":"802.1x and TLS Environments using Enterprise Assistant","text":"<p>Learn how to setup and use Enterprise Assistant to help with configuring devices for 802.1x and TLS environments using existing Microsoft services such as Microsoft Certificate Authority and Microsoft Active Directory. </p> <p>Get Started with Enterprise Assistant</p>"},{"location":"Reference/Console/GetStarted/setup/","title":"Download and Run","text":"<p>Warning - Console in Alpha Development</p> <p>Console is currently under development. The current available tags for download are Alpha version code. This could mean that certain features may not function yet, visual look and feel may change, or bugs/errors may occur. It is not recommended for use in Production deployments. Follow along our Feature Backlog for future releases and feature updates</p>"},{"location":"Reference/Console/GetStarted/setup/#what-youll-need","title":"What You'll Need","text":"<p>Configure a network that includes:</p> <ul> <li>A development system </li> <li>An activated Intel AMT device</li> </ul> <p></p>"},{"location":"Reference/Console/GetStarted/setup/#what-youll-do","title":"What You'll Do","text":"Figure 1: Get Started with Console <p>To complete a deployment:</p> <ul> <li>Download and run Console.</li> <li>Activate and configure an Intel AMT device.</li> <li>Add a device to Console.</li> <li>Manage a device using Console.</li> </ul>"},{"location":"Reference/Console/GetStarted/setup/#get-console","title":"Get Console","text":""},{"location":"Reference/Console/GetStarted/setup/#download","title":"Download","text":"<ol> <li> <p>Find the latest release of Console under Github Releases.</p> </li> <li> <p>Download the appropriate binary assets for your OS and Architecture under the Assets dropdown section.</p> </li> </ol> <p>Note - Warnings when Downloading from Github</p> <p>If downloading Console on Windows, a warning may appear and require approval to continue the download. The Alpha executable of Console is not currently signed. This will no longer be the case when the full release of Console is available. </p> <ol> <li>Unzip the downloaded file.</li> </ol>"},{"location":"Reference/Console/GetStarted/setup/#run","title":"Run","text":"<ol> <li> <p>Run the Console executable.</p> </li> <li> <p>Console is now running! A terminal will open containing the Console process and a browser window will open running <code>localhost:8181</code>. The Console UI is now useable and devices can be added.</p> </li> </ol> <p>Success</p> <p> Figure 2: Console Process Startup </p> <p> Figure 3: Console UI Startup </p>"},{"location":"Reference/Console/GetStarted/setup/#next-up","title":"Next up","text":"<p>Activate a Device</p>"},{"location":"Reference/EA/overview/","title":"Overview","text":"<p>Enterprise Assistant (EA) is a Windows application that can run as a normal application or as a background Windows service. Once setup to connect to RPS (hosted in either the cloud or enterprise) or RPC-Go, EA can assist with configuring 802.1x and TLS settings on AMT devices. Enterprise Assistant will handle certificate signing requests (CSRs) to Microsoft CA.</p> <p>Enterprise Assistant must run on a computer that is joined to your domain and with sufficient rights that it can create LDAP computer objects. It must have access to the Domain Certificate Authority so it can request that certificates be signed.</p> <p>Enterprise Assistant is based off the open-source project MeshCentral Satellite.</p>"},{"location":"Reference/EA/overview/#prerequisites","title":"Prerequisites","text":""},{"location":"Reference/EA/overview/#software","title":"Software","text":"<ul> <li>git</li> <li> <p>Microsoft* Visual Studio 2022 Community or better</p> <p>Requires installation of the .NET Desktop Development Workload under the Desktop &amp; Mobile section at time of installation.</p> </li> </ul>"},{"location":"Reference/EA/overview/#build-the-executable","title":"Build the Executable","text":"<p>The Enterprise Assistant source code must be compiled into a Windows executable before it can be run.</p> <ol> <li> <p>Clone the Enterprise Assistant Repository.     <pre><code>git clone https://github.com/open-amt-cloud-toolkit/enterprise-assistant.git\n</code></pre></p> </li> <li> <p>Open the project file <code>OpenAMTEnterpriseAssistant.csproj</code> in Visual Studio.</p> </li> <li> <p>From the menus, choose <code>Build &gt; Build OpenAMTEnterpriseAssistant</code>.</p> </li> <li> <p>By default after compiling, the <code>.exe</code> will be saved in <code>.\\enterprise-assistant\\bin\\Debug\\OpenAMTEnterpriseAssistant.exe</code>.</p> <p>Note - Running as a Windows Application versus a Windows Service</p> <p>It is suggested to run Enterprise Assistant as a normal Windows application at first to make sure everything works correctly before running it as a background Windows service. You can start by going in the \"Settings\" option in the menus. Settings are also saved in a local <code>.config</code> file that can be referenced when running as a background Windows service.</p> <p> Figure 1: Enterprise Assistant Startup </p> </li> </ol>"},{"location":"Reference/EA/overview/#configuration","title":"Configuration","text":"<p>There are two ways to configure 802.1x and TLS in an enterprise environment using Enterprise Assistant:</p>"},{"location":"Reference/EA/overview/#ea-configuration-using-rpc-go","title":"EA Configuration using RPC-Go","text":"<p>The RPC-Go local configuration option does not communicate with a remote server (RPS). RPC-Go will establish a communication channel to Enterprise Assistant (EA) directly and handle the CSR process. The wanted configuration options will be passed via command line flags or a config <code>.yaml</code>/<code>.json</code> file using RPC-Go. Configuration of AMT is handled entirely locally by RPC-Go.</p> <p>Configure EA using RPC-Go</p> Figure 2: Enterprise Assistant Architecture using RPC-Go"},{"location":"Reference/EA/overview/#ea-configuration-using-rps","title":"EA Configuration using RPS","text":"<p>RPS will handle communication with Enterprise Assistant (EA). Desired configuration options will be provided via the AMT profile, Wireless Config, and IEEE802.1x Config. RPS will communicate with EA at the time of provisioning to configure 802.1x and/or TLS configuration options based on the profiles.</p> <p>Configure EA using RPS</p> Figure 3: Enterprise Assistant Architecture using RPS <p></p>"},{"location":"Reference/EA/tlsCertTemplate/","title":"TLS Certificate Template","text":"<p>This template is used by EA to request certificates on behalf of your AMT devices. These certificates will be installed into the AMT device firmware and used for traffic authentication.</p>"},{"location":"Reference/EA/tlsCertTemplate/#create-amt-tls-certificate-template","title":"Create AMT TLS Certificate Template","text":"<ol> <li> <p>On your Enterprise Subordinate CA server, open the Start menu.</p> </li> <li> <p>Choose Run, then enter <code>certtmpl.msc</code>.</p> </li> <li> <p>Right-click the certificate template named Web Server and choose Duplicate.</p> </li> <li> <p>Right-click and rename the new template AMT TLS Certificate.</p> </li> <li> <p>Right-click the template and open the Properties menu.</p> </li> <li> <p>Navigate to the Request Handling tab, and check the box labeled Allow private key to be exported.</p> </li> <li> <p>Navigate to the Subject Name tab, and ensure that the radio button Supply in the request is selected.</p> </li> <li> <p>Click OK to save the template.</p> </li> </ol>"},{"location":"Reference/EA/tlsCertTemplate/#enable-the-template","title":"Enable the Template","text":"<ol> <li> <p>On the Enterprise Subordinate CA server, run the Certification Authority tool.</p> </li> <li> <p>Navigate to the Certificate Templates folder on the left pane.</p> </li> <li> <p>Right-click the Certificate Templates folder and choose New -&gt; Certificate Template to Issue.</p> </li> <li> <p>Choose the AMT TLS Certificate template.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"Reference/EA/tlsCertTemplate/#select-the-template-in-enterprise-assistant","title":"Select the Template in Enterprise Assistant","text":"<p>When configuring the Settings menu of Enterprise Assistant, choose the AMT TLS Certificate from the TLS Template drop down menu under Certificate Authority. </p> <p>Example - Configured TLS Template in Settings</p> <p> Figure 1: Enterprise Assistant Settings Example </p>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/","title":"Local IEEE 802.1x Configuration with RPC-Go","text":"<p>802.1x Configuration is a Preview Feature</p> <p>802.1x Configuration feature is a Preview Feature and is subject to change. This means it has not been fully validated and cannot be guaranteed to work. There are still potential bugs and tweaks needed for a production-level feature standard. Interested in this feature and helping us test it? Reach out via GitHub.</p>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/#overview","title":"Overview","text":"<p>IEEE 802.1X is an IEEE Standard for port-based network access control (PNAC). It provides an authentication mechanism to devices wishing to attach to a LAN or WLAN.</p> <p>It typically consists of three parts:</p> <ol> <li>Supplicant (Client-end User, AMT Device)</li> <li>Authenticator (Access Point or Switch)</li> <li>Authentication Server (RADIUS Server)</li> </ol> <p></p> <p>The following steps highlight how to:</p> <ul> <li>Configure the connection of EA and RPC-Go</li> <li>Run 802.1x configuration using RPC-Go</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/#prerequisites","title":"Prerequisites","text":"<p>The following are requirements to configure and connect an AMT device using TLS.</p> <ul> <li>Enterprise Assistant configured for RPC-Go</li> <li>RPC-Go</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/#services","title":"Services","text":"<p>The following services are assumed to be configured and running in your enterprise environment.</p> <ul> <li> <p>Microsoft* Certificate Authority (CA)</p> <ul> <li>An AMT TLS Certificate template is required. See TLS Certificate Template for additional steps on creating a template.</li> </ul> </li> <li> <p>Microsoft* Active Directory (AD)</p> </li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/#wired-8021x-configuration","title":"Wired 802.1x Configuration","text":"<p>These steps will show how to configure a device for DHCP and 802.1x (EAP-TLS). See the RPC CLI Configure Wired Documentation for all configuration options.</p> <ol> <li> <p>Create and open a new file named <code>config.yaml</code>.</p> </li> <li> <p>Copy and paste the following template.</p> config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  dhcp: true\n  ipsync: true\n  ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nenterpriseAssistant:\n  eaAddress: 'http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000'\n  eaUsername: 'myUsername'\n  eaPassword: 'myPassword'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    authenticationProtocol: 0\n</code></pre> </li> <li> <p>Update the <code>password</code> with your AMT Password.</p> </li> <li> <p>Update the <code>enterpriseAssistant:</code> section with the configured settings of your EA instance.</p> <p>The following are the supported wired authentication protocols.</p> Auth Protocol API Value Description EAP-TLS 0 Indicates that the desired EAP type is the Transport Layer Security EAP type specified in RFC 2716. PEAPv0/EAP-MSCHAPv2 2 Indicates that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner authentication method. </li> <li> <p>Save and close the file.</p> </li> <li> <p>On an activated AMT device, run the following RPC-Go command to configure wired 802.1x settings.</p> <pre><code>rpc configure wired -config config.yaml\n</code></pre> </li> </ol> <p></p>"},{"location":"Reference/EA/RPCConfiguration/localIEEE8021xConfig/#wireless-8021x-configuration","title":"Wireless 802.1x Configuration","text":"<p>These steps will show how to configure a device for DHCP and 802.1x (EAP-TLS). See the RPC CLI Configure Wireless Documentation for all configuration options.</p> <ol> <li> <p>Create and open a new file named <code>config.yaml</code>.</p> </li> <li> <p>Copy and paste the following template.</p> config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in  the command line\nenterpriseAssistant:\n  eaAddress: 'http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000'\n  eaUsername: 'myUsername'\n  eaPassword: 'myPassword'\nwifiConfigs:\n  - profileName: 'exampleWifi8021x' # friendly name (ex. Profile name)\n    ssid: 'ssid'\n    priority: 1\n    authenticationMethod: 7\n    encryptionMethod: 4\n    ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    authenticationProtocol: 0 #8021x profile (ex. EAP-TLS(0))\n</code></pre> </li> <li> <p>Update the <code>password</code> with your AMT Password.</p> </li> <li> <p>Update the <code>enterpriseAssistant:</code> section with the configured settings of your EA instance.</p> <p>The following are the supported wireless authentication protocols.</p> Auth Protocol API Value Description EAP-TLS 0 Indicates that the desired EAP type is the Transport Layer Security EAP type specified in RFC 2716. PEAPv0/EAP-MSCHAPv2 2 Indicates that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner authentication method. </li> <li> <p>Update the <code>ssid</code> with your network SSID.</p> </li> <li> <p>Save and close the file.</p> </li> <li> <p>On an activated AMT device, run the following RPC-Go command to configure wireless 802.1x settings.</p> <pre><code>rpc configure wireless -config config.yaml\n</code></pre> </li> </ol> <p></p>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/","title":"Local TLS Configuration with RPC-Go","text":"<p>Local TLS Configuration using RPC-Go is a Preview Feature</p> <p>Local TLS Configuration using RPC-Go is a Preview Feature and is subject to change. This means it has not been fully validated and cannot be guaranteed to work. There are still potential bugs and tweaks needed for a production-level feature standard. Interested in this feature and helping us test it? Reach out via GitHub.</p> <p>In Open AMT, the TLS protocol supports the following types of authentication today:</p> <ul> <li>Server Authentication \u2013 Only the server is authenticated (i.e., its identity is ensured) while the client remains unauthenticated. This means that the end user (whether an individual or an application, such as a Web browser) can be sure with whom they are communicating.</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/#overview","title":"Overview","text":"<p>AMT can be configured to use TLS without the need for a remote server (i.e. RPS). RPC-Go can configure TLS settings in AMT using Enterprise Assistant, or it can configure TLS in AMT using a self-signed certificate.</p> <p>This document explains how to perform the configuration using a certificate signed by the Microsoft CA with the help of Enterprise Assistant.</p> <p>The following steps highlight how to:</p> <ul> <li>Configure the connection of EA and RPC-Go</li> <li>Run TLS configuration using RPC-Go</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/#prerequisites","title":"Prerequisites","text":"<p>The following are requirements to configure and connect an AMT device using TLS.</p> <ul> <li>Enterprise Assistant configured for RPC-Go</li> <li>RPC-Go</li> <li> <p>Management Tool supporting TLS (ex: Meshcommander)</p> <p>This is not required for configuration and therefore not needed for this guide. However, a management tool will be needed if you want to manage the device post-configuration.</p> </li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/#services","title":"Services","text":"<p>The following services are assumed to be configured and running in your enterprise environment.</p> <ul> <li> <p>Microsoft* Certificate Authority (CA)</p> <ul> <li>An AMT TLS Certificate template is required. See TLS Certificate Template for additional steps on creating a template.</li> </ul> </li> <li> <p>Microsoft* Active Directory (AD)</p> </li> </ul>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/#configure-enterprise-assistant-for-rpc-go","title":"Configure Enterprise Assistant for RPC-Go","text":"<p>See EA Configuration for RPC-Go for steps on how to setup EA to accept a connection and request from RPC-Go.</p>"},{"location":"Reference/EA/RPCConfiguration/localtlsconfig/#configure-the-amt-device","title":"Configure the AMT Device","text":"<ol> <li> <p>Open Command Prompt as Administrator.</p> </li> <li> <p>Navigate to the directory with RPC-Go.</p> </li> <li> <p>Run the <code>rpc configure tls</code> command. Replace the [bracketed] values with your own.</p> <p>Alternative Option - Using a Config File</p> <p>Rather than passing in individual flag options, a <code>.yaml</code> or <code>.json</code> config file can be passed. See <code>rpc configure tls</code> Command Documentation for more details and examples.</p> <pre><code>rpc configure tls -mode [configurationMode] -password [AMTPassword] -eaAddress http://[IP-Address-or-FQDN]:8000 -eaUsername [myUsername] -eaPassword [myPassword]\n</code></pre> <p>Example Command</p> <pre><code>rpc configure tls -mode Server -password AMTpassword123! -eaAddress http://192.168.2.50:8000 -eaUsername admin -eaPassword P@ssw0rd\n</code></pre> <p>The toolkit offers two configuration modes: </p> CONFIGURATION MODE DESCRIPTION Server The client authenticates the server request and accepts only those servers with a digital certificate. ServerAndNonTLS Used primarily for testing. The client authenticates the server request and accepts legitimate digital certificates from TLS-enabled servers. However, if the server is not TLS-enabled, the client defaults to a CIRA connection. <p>Success - TLS Configured</p> <p> Figure 1: TLS Configured Example </p> </li> <li> <p>Now, the device is manageable via a TLS connection using the management tool of your choice!</p> </li> </ol> <p></p>"},{"location":"Reference/EA/RPCConfiguration/rpcgoConfiguration/","title":"Enterprise Assistant Configuration for RPC-Go","text":"<p>The RPC-Go local configuration option does not communicate with a remote server (RPS). RPC-Go will establish a communication channel to Enterprise Assistant (EA) directly and handle the CSR process. The wanted configuration options will be passed via command line flags or a config <code>.yaml</code>/<code>.json</code> file using RPC-Go. Configuration of AMT is handled entirely locally by RPC-Go.</p>"},{"location":"Reference/EA/RPCConfiguration/rpcgoConfiguration/#prerequisites","title":"Prerequisites","text":""},{"location":"Reference/EA/RPCConfiguration/rpcgoConfiguration/#software","title":"Software","text":"<ul> <li>Enterprise Assistant</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/rpcgoConfiguration/#services","title":"Services","text":"<p>The following services are assumed to be configured and running in your enterprise environment.</p> <ul> <li>Microsoft* Certificate Authority (CA)<ul> <li>An AMT TLS Certificate template is required. See TLS Certificate Template for additional steps on creating a template.</li> </ul> </li> <li>Microsoft* Active Directory (AD)</li> </ul>"},{"location":"Reference/EA/RPCConfiguration/rpcgoConfiguration/#settings-configuration","title":"Settings Configuration","text":"<ol> <li> <p>Start Enterprise Assistant.</p> </li> <li> <p>Open the Enterprise Assistant <code>File &gt; Settings</code> menu to configure the RPC-Go connection.</p> <p> Figure 1: Enterprise Assistant Settings Menu </p> </li> <li> <p>Under RPC Client section, for Address, choose the IP Address or FQDN of the EA Server.</p> </li> <li> <p>Set a Username of your choice.</p> </li> <li> <p>Set a Password of your choice.</p> </li> <li> <p>Set a 32 or 64-character Security Key of your choice. This key is used when generating JWT tokens for authentication between RPC-Go and EA communication.</p> </li> <li> <p><code>Security Groups</code> will list all of the security groups of the domain controller that have been created within the Computers group. When Enterprise Assistant creates a new Computer account (like a new AMT device), it will join the selected Security Groups.</p> </li> <li> <p>Provide the full name of the Certificate Authority and click the checkmark.</p> </li> <li> <p>It will then list the available Certificate Templates to choose from. This will let you select a template specifically created for AMT. See TLS Certificate Template for additional steps on creating a template.</p> </li> <li> <p>Choose how to issue the certificate. Typically, <code>SAM Account Name</code> is most commonly used as the <code>Common Name</code>.</p> <p>Example - Configured Settings</p> <p> Figure 2: Enterprise Assistant Settings Example </p> </li> <li> <p>Press OK to save the Settings.</p> </li> <li> <p>Restart Enterprise Assistant by exiting the program and rerunning the executable.</p> </li> <li> <p>The HTTP server should show as started now in the Console output.</p> <p> Figure 3: Enterprise Assistant HTTP Server Started </p> </li> <li> <p>Enterprise Assistant will now wait and listen for RPC-Go to make requests to issue Certificates signed by Microsoft CA.</p> </li> </ol> <p></p>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/","title":"802.1x Configuration","text":"<p>802.1x Configuration is a Preview Feature</p> <p>802.1x Configuration feature is a Preview Feature and is subject to change. This means it has not been fully validated and cannot be guaranteed to work. There are still potential bugs and tweaks needed for a production-level feature standard. Interested in this feature and helping us test it? Reach out via GitHub.</p> <p>IEEE 802.1X is an IEEE Standard for port-based network access control (PNAC). It provides an authentication mechanism to devices wishing to attach to a LAN or WLAN.</p> <p>It typically consists of three parts:</p> <ol> <li>Supplicant (Client-end User, AMT Device)</li> <li>Authenticator (Access Point or Switch)</li> <li>Authentication Server (RADIUS Server)</li> </ol>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#prerequisites","title":"Prerequisites","text":"<p>The following are requirements to configure and connect an AMT device within an 802.1x environment. However, these are not required for the RPS profile creation steps below.</p> <ul> <li>Enterprise Assistant configured, running, and connected to an RPS server.</li> <li>Updated to latest AMT Firmware version</li> </ul> <p>Note - System Name Length</p> <p>The System Names of the AMT devices must be 15 characters or less. If the name is greater than 15 characters long, it will exceed the system name length allowed by Active Directory and Enterprise Assistant will fail to add the device.</p>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#wired-8021x-configuration","title":"Wired 802.1x Configuration","text":"<p>Only one wired IEEE8021x Config can be created (per tenant). The following steps walk through how to create the required configs and profiles.</p>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#create-wired-ieee8021x-config","title":"Create Wired IEEE802.1x Config","text":"<ol> <li> <p>Select the IEEE 802.1x tab from the left-hand menu.</p> </li> <li> <p>In the top-right corner, click Add New. Figure 1: Create a new IEEE802.1x Config </p> </li> <li> <p>Select the Wired option.</p> </li> <li> <p>Specify a Profile Name of your choice.</p> </li> <li> <p>Select an Authentication Protocol.</p> <p>The following are the supported wired authentication protocols.</p> Auth Protocol API Value Description EAP-TLS 0 Indicates that the desired EAP type is the Transport Layer Security EAP type specified in RFC 2716. PEAPv0/EAP-MSCHAPv2 2 Indicates that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner authentication method. </li> <li> <p>Optionally, change the PXE Timeout.</p> <p>PXE Timeout is the number of seconds in which the Intel(R) AMT will hold an authenticated 802.1X session. During the defined period, Intel(R) AMT manages the 802.1X negotiation while a PXE boot takes place. After the timeout, control of the negotiation passes to the host.</p> </li> <li> <p>Click Save.</p> <p>Example Wired IEEE802.1x Config</p> <p> Figure 2: Example Wired IEEE802.1x Config </p> </li> </ol>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#link-amt-profile","title":"Link AMT Profile","text":"<ol> <li> <p>Select the Profiles tab from the left-hand menu.</p> </li> <li> <p>Choose an existing profile or create a new one.</p> </li> <li> <p>Under Network Configuration, select the Wired 802.1x Config from the Wired 802.1x Configuration dropdown.</p> </li> <li> <p>Click Save.</p> <p>After creating the profile and configs, AMT can now be configured for wired 802.1x.</p> <p>Example ACM Profile with IEEE802.1x</p> <p> Figure 3: Example ACM profile with IEEE802.1x </p> </li> </ol> <p></p>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#wireless-8021x-configuration","title":"Wireless 802.1x Configuration","text":"<p>There can be a maximum of 8 wireless IEEE8021x Config created (per tenant). 8 profiles is the maximum AMT can accept. The following steps walk through how to create the required configs and profiles.</p>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#create-wireless-ieee8021x-config","title":"Create Wireless IEEE802.1x Config","text":"<ol> <li> <p>Select the IEEE 802.1x tab from the left-hand menu.</p> </li> <li> <p>In the top-right corner, click Add New. Figure 4: Create a new IEEE802.1x Config </p> </li> <li> <p>Select the Wireless option.</p> </li> <li> <p>Specify a Profile Name of your choice.</p> </li> <li> <p>Select an Authentication Protocol.</p> <p>The following are the supported wireless authentication protocols.</p> Auth Protocol API Value Description EAP-TLS 0 Indicates that the desired EAP type is the Transport Layer Security EAP type specified in RFC 2716. PEAPv0/EAP-MSCHAPv2 2 Indicates that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner authentication method. </li> <li> <p>Click Save.</p> <p>Example Wireless IEEE802.1x Config</p> <p> Figure 5: Example Wireless IEEE802.1x Config </p> </li> </ol>"},{"location":"Reference/EA/RPSConfiguration/remoteIEEE8021xConfig/#link-wifi-config-profile","title":"Link Wifi Config Profile","text":"<ol> <li> <p>Select the Wireless tab from the left-hand menu.</p> </li> <li> <p>Choose an existing profile or create a new one.</p> </li> <li> <p>Under Authentication Method, there should now be two new options. Select either WPA IEEE 802.1x or WPA2 IEEE 802.1x.</p> </li> <li> <p>Click Save. The new wireless config can now be included in an AMT profile.</p> <p>After creating the profile and configs, AMT can now be configured for wireless 802.1x.</p> <p>Example Wireless Config with IEEE802.1x</p> <p> Figure 6: Example Wireless Config with IEEE802.1x </p> </li> </ol>"},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/","title":"Enterprise Assistant Configuration for RPS","text":"<p>RPS will handle communication with Enterprise Assistant (EA). Desired configuration options will be provided via the AMT profile, Wireless Config, and IEEE802.1x Config. RPS will communicate with EA at the time of provisioning to configure 802.1x and/or TLS configuration options based on the profiles.</p>"},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/#prerequisites","title":"Prerequisites","text":""},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/#software","title":"Software","text":"<ul> <li>Enterprise Assistant</li> <li>Open AMT Local or Cloud Deployment running. See Get Started for a basic deployment option.</li> </ul>"},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/#services","title":"Services","text":"<p>The following services are assumed to be configured and running in your enterprise environment.</p> <ul> <li>Microsoft* Certificate Authority (CA)<ul> <li>An AMT TLS Certificate template is required. See TLS Certificate Template for additional steps on creating a template.</li> </ul> </li> <li>Microsoft* Active Directory (AD)</li> </ul>"},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/#kong-configuration","title":"Kong Configuration","text":"<p>To use Enterprise Assistant with Kong API Gateway, we need to configure a new route.</p> <ol> <li> <p>Open the <code>kong.yaml</code> file in the <code>./open-amt-cloud-toolkit/</code> directory.</p> </li> <li> <p>Uncomment the <code>rps-ea</code> block to enable the <code>/ea</code> route.</p> <pre><code># uncomment to use with enterprise assistant\n# - name: rps-ea\n#   host: rps\n#   port: 8082\n#   tags:\n#   - rps\n#   routes:\n#   - name: rps-ea-route\n#     strip_path: true\n#     paths:\n#     - /ea\n</code></pre> </li> <li> <p>Restart the Kong service.</p> </li> </ol>"},{"location":"Reference/EA/RPSConfiguration/rpsConfiguration/#settings-configuration","title":"Settings Configuration","text":"<ol> <li> <p>Open the Enterprise Assistant <code>File &gt; Settings</code> menu to configure the RPS connection.</p> <p> Figure 1: Enterprise Assistant Settings Menu </p> </li> <li> <p>Provide the RPS Server Hostname. Enterprise Assistant communicates via Websocket. </p> <p>Make sure to include the route <code>/ea</code> (e.g. <code>wss://192.168.1.34/ea</code>).</p> </li> <li> <p>The <code>Device Name</code> is the name used to configure the domain controller for each device account. Using <code>Node Identifier</code> is more secure due to the inability to be tampered with but is less friendly to maintain as a user.</p> </li> <li> <p><code>Security Groups</code> will list all of the security groups of the domain controller that have been created within the Computers group. When Enterprise Assistant creates a new Computer account (like a new AMT device), it will join the selected Security Groups.</p> </li> <li> <p>Provide the full name of the Certificate Authority and click the checkmark.</p> </li> <li> <p>It will then list the available Certificate Templates to choose from. This will let you select a template specifically created for AMT. See TLS Certificate Template for additional steps.</p> </li> <li> <p>Choose how to issue the certificate. Typically, <code>SAM Account Name</code> is most commonly used as the <code>Common Name</code>.</p> <p>Example - Configured Settings</p> <p> Figure 2: Enterprise Assistant Settings Example </p> </li> <li> <p>Press OK to save the Settings.</p> </li> <li> <p>Start the connection by going to <code>File &gt; Local Connect</code>.</p> <p> Figure 3: Enterprise Assistant Connecting to RPS </p> </li> <li> <p>After connecting, Enterprise Assistant will wait and listen for RPS to make requests to either add/revoke Computers or issue/revoke Certificates.</p> </li> </ol> <p></p>"},{"location":"Reference/MEBX/dnsSuffix/","title":"DNS Suffix","text":""},{"location":"Reference/MEBX/dnsSuffix/#manageability-engine-bios-extensions-mebx","title":"Manageability Engine BIOS Extensions (MEBX)","text":"<p>Intel\u00ae MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually.</p>"},{"location":"Reference/MEBX/dnsSuffix/#set-a-dns-suffix-through-mebx","title":"Set a DNS Suffix through MEBX","text":"<p>If DHCP option15 is not set, configure the DNS Suffix manually through MEBX. This enables the reactivation of the device remotely at a later time.</p> <p>Important</p> <p>MEBX Must Be Enabled in the BIOS</p> <p>The MEBX screens must be enabled in the BIOS to perform the instructions below. Enter the BIOS configuration at boot to verify MEBX availability. Enable according to manufacturers instructions. </p> <p>To configure the DNS Suffix in the BIOS:</p> <ol> <li> <p>Restart or power on the device.</p> </li> <li> <p>While the device is booting up, press Ctrl+P to reach the MEBX login screen. </p> <p>Note</p> <p>The keystroke combination Ctrl+P typically invokes the BIOS to display the MEBX login screen. If this does not work, check the manufacturer's instructions or try function keys (e.g., F2, F12).</p> </li> <li> <p>Enter the AMT password.</p> <p>Note</p> <p>If it is the first time entering MEBX and the device has not been provisioned previously, the default password is <code>admin</code>. Create a new password when prompted.</p> </li> <li> <p>Select Remote Setup and Configuration.</p> </li> <li> <p>Select TLS PKI.</p> </li> <li> <p>Select PKI DNS Suffix.</p> </li> <li> <p>Provide a DNS suffix name and press Enter.</p> </li> <li> <p>Press Esc three times to reach the main menu.</p> </li> <li> <p>Select MEBX Exit, and then press y to confirm the exit.</p> </li> </ol>"},{"location":"Reference/MEBX/unprovision/","title":"Unprovisioning","text":""},{"location":"Reference/MEBX/unprovision/#manageability-engine-bios-extensions-mebx","title":"Manageability Engine BIOS Extensions (MEBX)","text":"<p>Intel\u00ae MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Use this interface to provision and unprovision AMT. It also provides a variety of settings to configure manually. </p> <p>Use the unprovision functionality to remove a device from MPS control. </p>"},{"location":"Reference/MEBX/unprovision/#unprovision-an-amt-device-through-mebx","title":"Unprovision an AMT Device Through MEBX","text":"<p>To unprovision in the BIOS:</p> <ol> <li> <p>Restart or power on the device. </p> </li> <li> <p>While the device is booting up, press Ctrl+P to reach the MEBX login screen </p> <p>Note</p> <p>The keystroke combination Ctrl+P typically invokes the BIOS to display the MEBX login screen. If this does not work, check the manufacturer's instructions or try function keys (e.g., F2, F12).</p> </li> <li> <p>Enter the AMT password.</p> <p>Note</p> <p>If it is the first time entering MEBX and the device has not been provisioned previously, the default password is <code>admin</code>. Create a new password when prompted.</p> </li> <li> <p>Select Intel AMT configuration.</p> </li> <li> <p>Select Unconfigure Network access.</p> </li> <li> <p>Select Full unprovision, and then press y to continue </p> </li> <li> <p>It takes 30 seconds to a minute to unprovision the device. While it is unprovisioning, the up/down arrow keys will not work.</p> </li> </ol>"},{"location":"Reference/MPS/configuration/","title":"Configuration","text":""},{"location":"Reference/MPS/configuration/#mps-configuration","title":"MPS Configuration","text":"<p>The <code>.env</code> variables set have priority and overwrite the corresponding <code>.mpsrc</code> variables.</p> <code>.env</code> Variable Name <code>.mpsrc</code> Variable Name Default Description MPS_VAULT_ADDRESS vault_address <code>http://vault:8200</code> or <code>http://localhost:8200</code> Address of where the vault is hosted MPS_GENERATE_CERTS generate_certificates <code>true</code> Enables/Disables generation of self signed certificates based on MPS_COMMON_NAME MPS_COMMON_NAME common_name <code>localhost</code> Common Name of MPS server. May be an IP or FQDN. Used when generating self-signed CIRA certificate. MPSPORT port <code>4433</code> CIRA connection port to listen on MPSWEBPORT web_port <code>3000</code> Web API port to listen on MPS_DEBUG <code>true</code> NOT USED MPS_WEB_ADMIN_USER web_admin_user No Value Username for Sample Web UI and API authentication MPS_WEB_ADMIN_PASSWORD web_admin_password No Value Password for Sample Web UI and API authentication MPS_HTTPS <code>true</code> Specifies whether or not to enable https MPS_TLS_OFFLOAD <code>false</code> NOT USED MPS_LOG_LEVEL <code>info</code> Controls the level of logging provided in the service. Options are (in order of increasing detail): <code>error</code>, <code>warn</code>, <code>info</code>, <code>verbose</code>, <code>debug</code>, and <code>silly</code>. MPS_JWT_EXPIRATION jwt_expiration <code>1440</code> The default expiration in minutes for the JWT Token. Default is 24 hours. MPS_JWT_SECRET jwt_secret No Value Secret used for generating a JWT Token. IMPORTANT: This must match the <code>secret</code> in your <code>Kong.yaml</code> file for the jwt plugin configuration. MPS_JWT_ISSUER jwt_issuer <code>9EmRJTbIiIb4bIeSsmgcWIjrR6HyETqc</code> The issuer that will be populated in the token. This is a not considered a secret. IMPORTANT: This must match the <code>key:</code> property in the <code>Kong.yaml</code> file for the jwt plugin configuration. MPS_MQTT_ADDRESS mqtt_address No Value Address of where the mqtt broker is hosted. Mqtt container is named <code>mosquitto</code> and is open to port <code>8883</code>. Thus unless setting are changed the value should be either empty (off) or <code>mqtt://mosquitto:8883</code> (on) MPS_COUNTRY country <code>US</code> Country for Self-Signed Certificate MPS_COMPANY company <code>NoCorp</code> Company for Self-Signed Certificate MPS_WEB_AUTH_ENABLED web_auth_enabled <code>true</code> MPS provides a simple auth using <code>web_admin_user</code> and <code>web_admin_password</code>. Set web_auth_enabled to <code>false</code> to disable this auth mechanism. MPS_VAULT_TOKEN vault_token <code>myroot</code> Token used to access the vault MPS_SECRETS_PATH secrets_path <code>secret/data/</code> Path for where secrets are stored in the vault MPS_SECRETS_PROVIDER secrets_provider <code>vault</code> Secret provider used (<code>vault</code>) MPS_CERT_FORMAT cert_format <code>file</code> Format to store certificates to Vault MPS_DATA_PATH data_path <code>../private/data.json</code> File path to store Vault data locally MPS_CERT_PATH cert_path <code>../private</code> File path to store certificates in Vault locally MPS_CORS_ORIGIN cors_origin <code>*</code> (NOT USED) Allowed origin for CORS policy MPS_CORS_HEADER cors_header <code>*</code> (NOT USED) Allowed headers MPS_CORS_METHODS cors_methods <code>*</code> (NOT USED) Allowed methods MPS_DB_PROVIDER db_provider <code>postgres</code> Database provider used (<code>postgres</code>, <code>nosql</code>) MPS_CONNECTION_STRING connection_string <code>postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@localhost:5432/mpsdb?sslmode=no-verify</code> The database connection string MPS_INSTANCE_NAME instance_name <code>localhost</code> Value used to record and address specific mps instances. (i.e containerIp in k8s) MPS_TLS_CONFIG mps_tls_config Used only if <code>generate_certificates = false</code> Cert settings for CIRA connection MPS_WEB_TLS_CONFIG web_tls_config NOT USED MPS_REDIRECTION_EXPIRATION_TIME redirection_expiration_time <code>5</code> Default expiration for redirection token MPS_CONSUL_ENABLED consul_enabled <code>false</code> Enable/disable use of Consul for centralized configuration MPS_CONSUL_HOST consul_host <code>localhost</code> Address of where Consul is hosted MPS_CONSUL_PORT consul_port <code>8500</code> Consul Port to listen on MPS_CONSUL_KEY_PREFIX consul_key_prefix <code>MPS</code> Default prefix key for Consul data structure"},{"location":"Reference/MPS/securityMPS/","title":"MPS Security Considerations","text":"<p>The cloud agnostic microservice Management Presence Server (MPS) enables platforms featuring Intel\u00ae AMT to connect over the internet securely to manageability consoles. Secrets are used to ensure the security of the MPS REST APIs. In a deployment environment, consider these security assets:</p> <ul> <li>Intel\u00ae AMT remote admin credentials</li> <li>Intel\u00ae AMT CIRA credentials</li> <li>Authorize API end point</li> <li>Server Configuration</li> <li>Web User Credentials</li> </ul> <p>In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system.  The following sections will cover each asset and the recommended practices to use to protect the assets.</p>"},{"location":"Reference/MPS/securityMPS/#security-assets","title":"Security Assets","text":""},{"location":"Reference/MPS/securityMPS/#1-intel-amt-remote-admin-credentials","title":"1. Intel\u00ae AMT remote admin credentials","text":"<p>Intel\u00ae AMT remote admin credentials enable a user to remotely control a device featuring Intel\u00ae AMT. These credentials are configured in AMT Firmware by a configuration server (e.g., RPS). When an administrator performs a REST API call, such as a power off action to the managed device, MPS fetches the corresponding credentials of that device from the configured secrets store (e.g., Vault). MPS uses the fetched secret as part of digest authentication with Intel\u00ae AMT. </p> <p>Intel discourages reuse of passwords among managed devices. Use a strong, unique password for each device to enhance security.</p>"},{"location":"Reference/MPS/securityMPS/#2-intel-amt-cira-credentials","title":"2. Intel\u00ae AMT CIRA credentials","text":"<p>When a managed device attempts to establish a connection to the MPS, the MPS performs two checks prior to allowing the connection: 1. The Intel\u00ae AMT device's GUID: This GUID must be stored in the MPS database and is typically added by using the devices POST API. 2. MPS CIRA Credential: The Intel\u00ae AMT device needs to supply the correct credentials to MPS.  These credentials are checked against the username, stored in the database, and password, stored in Vault.</p> <p>Use a strong, unique password for each device to enhance security.</p>"},{"location":"Reference/MPS/securityMPS/#3-authorize-api-end-point","title":"3. Authorize API end point","text":"<p>MPS supports basic user authentication to the REST APIs with an Authorize API endpoint for issuing a JSON Web Token (JWT). This eliminates the need to set up a full user authentication service before evaluating the software and enables developers to use the microservices right away.</p> <p>However, in a production deployment, use a robust user authentication service (e.g., OAuth2, OpenID, LDAP) and disable the Authorize API endpoint by leaving the MPS Web User credentials blank in the MPS configuration file.</p>"},{"location":"Reference/MPS/securityMPS/#4-server-configuration","title":"4. Server Configuration","text":"<p>To use secure protocols, MPS requires configured certificates and securely stored certificate keys. If the keys are compromised, an attacker will be able to decrypt messages that are encrypted with these certificates. For evaluation purposes, MPS will generate self-signed certificates used for encryption.</p> <p>For production deployment, purchase CA-signed certificates whose signatures can be independently verified.</p>"},{"location":"Reference/MPS/securityMPS/#5-web-user-credentials","title":"5. Web User Credentials","text":"<p>The Open AMT Cloud Toolkit is designed to operate behind an API gateway, such as Kong API Gateway. The API Gateway validates the Auth Tokens provided by an administrator who is requesting access to an API end point. Once verified, the API Gateway will forward the request to the appropriate microservice, MPS or RPS. To make evaluation easy, MPS has implemented an Authorize API end point that will issue a JWT when the proper web user credentials are provided. The Web User credentials are global credentials that are configured in the MPS configuration file and do not provide any fine-grain permissions.  Integration with other user authentication models and fine-grain endpoint permissions are supported through Kong plug-ins and modification of the Kong API Gateway configuration file, respectively.</p>"},{"location":"Reference/MPS/securityMPS/#best-known-security-methods","title":"Best Known Security Methods","text":""},{"location":"Reference/MPS/securityMPS/#1-enable-tls-on-network-connections","title":"1. Enable TLS on Network Connections","text":"<p>There are three potential places where TLS could be enabled to protect the security assets:</p> <ul> <li>HTTPS/WSS connection between Web UI and MPS (recommended)</li> <li>Connection between MPS and Vault - If communication between MPS and Vault is outside a secure container environment (not recommended deployment, see item 2 below)</li> <li>Connection between MPS and Intel\u00ae AMT device (required and done automatically by MPS)</li> </ul> <p>Securing these communication routes will help prevent security assets being exposed through network based attacks intercepting messages between components. It is recommended that the most modern version of TLS be used when encrypting communication.</p>"},{"location":"Reference/MPS/securityMPS/#2-secure-and-isolate-execution-environment","title":"2. Secure and Isolate Execution Environment","text":"<p>MPS holds several security assets in memory during execution. To protect these assets while in the memory of MPS, run MPS in a secure execution environment such as a dedicated container. Deploying into a secure container environment eases the burden of individually securing the assets while in memory or in transit between Open AMT Cloud Toolkit services. Running MPS, RPS, API Gateway, MPS Router, Vault, and Database all within the same secure container instance will help ensure that the communication between these services remains secure.</p>"},{"location":"Reference/MPS/securityMPS/#3-use-vault-for-storing-credentials","title":"3. Use Vault for Storing Credentials","text":"<p>Vault is a tool used to secure, store, and tightly control access to secrets. Utilizing Vault to store passwords used by MPS will greatly increase the security of these assets.</p>"},{"location":"Reference/MPS/securityMPS/#4-use-kubernetes-secrets-for-storing-dynamic-configuration-values","title":"4. Use Kubernetes Secrets for Storing Dynamic Configuration Values","text":"<p>Kubernetes Secrets help you to store and manage sensitive information like Tokens. Use Kubernetes secrets for storing environment variables required for configuring MPS rather than putting them in the image/pod. Vault token, Session secret key, and Server configuration assets required for MPS should be stored in Kubernetes secrets.</p> <p></p>"},{"location":"Reference/MQTT/customMqttEvents/","title":"Customizing MQTT Events","text":"<p>RPS and MPS microservices can publish event messages through an MQTT Broker. The following instructions demonstrate how to add, remove, or edit the events published by the server. To learn more about subscribing to these events, see Viewing MQTT Events.</p> <p>Three main components can be manipulated within the MQTT event flow:</p> <ul> <li>Individual events throughout MPS and RPS</li> <li>MqttProvider class </li> <li>MQTT broker</li> </ul>"},{"location":"Reference/MQTT/customMqttEvents/#individual-events","title":"Individual Events","text":""},{"location":"Reference/MQTT/customMqttEvents/#add-events","title":"Add Events","text":"<p>To add an event:</p> <ol> <li>Import MqttProvider class.</li> <li>Use the <code>publishEvent</code> method to add RPS or MPS events. </li> </ol> <p>Example:</p> <p><pre><code>import { MqttProvider } from '../../utils/mqttProvider'\n\nMqttProvider.publishEvent('success', ['Example'], 'Hello World', guid)\n</code></pre> The <code>publishEvent</code> method parameters:</p> Parameter Description message type string designating the message type array of methods methods associated with the message message string message to be published by the event broker GUID device GUID (optional) <p>Note</p> <p>Learn more about <code>publishEvent</code> in the MqttProvider Class.</p>"},{"location":"Reference/MQTT/customMqttEvents/#edit-or-delete-events","title":"Edit or Delete Events","text":"<p>A number of default events have been added to RPS and MPS, such as API calls and action events. Edit or delete any events that are unnecessary or irrelevant for your deployment. </p> <p>Note</p> <p>Event publishing operates independently of the microservices. It will function normally with the addition, adaptation, or deletion of any individual events.</p>"},{"location":"Reference/MQTT/customMqttEvents/#mqttprovider-class","title":"MqttProvider Class","text":""},{"location":"Reference/MQTT/customMqttEvents/#connect","title":"Connect","text":"<p>The <code>MqttProvider</code> class handles the interactions with the MQTT Broker.</p> <p>To establish a connection with the broker: </p> <ol> <li>Open the <code>index.ts</code> file of RPS or MPS.</li> <li>Add the following:</li> </ol> <p><pre><code>  const mqtt: MqttProvider = new MqttProvider(config)\n  mqtt.connectBroker()\n</code></pre> The <code>connectBroker</code> method creates the connection between a client, stored in the class, and the <code>mosquitto</code> docker container, which acts as the MQTT Broker. The instance of the class, after it has been created and connected, is stored as a static object within the class. This storage enables access to the methods in the class with a simple import rather than passing the instance to MPS or RPS.</p> <p>The config parameter contains the config types of MPS and RPS. <code>MqttProvider</code> uses the <code>MQTT_ADDRESS</code> environment variable to establish a connection. </p> <p>Important</p> <p>The <code>MQTT_ADDRESS</code> environment variables for MPS and RPS are left blank in the .env.template file. This corresponds to the OFF state. To turn event logging with mosquitto ON provide the address of the MQTT Broker, <code>mqtt://mosquitto:8883</code>, to the <code>MPS_MQTT_ADDRESS</code> and <code>RPS_MQTT_ADDRESS</code> environment variables.</p>"},{"location":"Reference/MQTT/customMqttEvents/#usage","title":"Usage  <p>The <code>publishEvent</code> method publishes events to the MQTT Broker where subscribers can access event data. The method accepts information about an event, organizes it, adds a timestamp, and sends it to the MQTT Broker. </p> <p>Expand the setup by changing the parameters and the elements within <code>OpenAMTEvent</code>, the interface used to organize the message, or by adding new methods. Indicate information you'd like to receive by subscribing to Topics, which are organized in a directory-like structure. Topics enable administrators to narrow eventing to subjects of interest. </p>  <p>Example</p> <p>message type 'success'</p> <p>message: 'CarStarted'</p> <p>topic: <code>cars/ford</code></p>  <p>Subscribers of <code>#</code>, <code>cars</code> or <code>cars/ford</code> receive the above message while subscribers of <code>trucks</code> or <code>cars/ferrari</code> will not. </p> <p>Use <code>publish</code> to send a message to the MQTT Broker and supply a topic as the first argument. Currently, the topic is hard-coded to a default value. Alter this value by adding a parameter, tying the topic to existing parameters, or create different publishEvent methods that correspond to different topics.</p>","text":""},{"location":"Reference/MQTT/customMqttEvents/#mqtt-broker","title":"MQTT Broker","text":"<p>The Broker for MQTT messages runs as the Docker* container <code>mosquitto</code> with the image <code>eclipse-mosquitto:latest</code>. Make changes to the functionality of the Broker through <code>mosquitto.conf</code>. Most of the Broker setup has been left in its default state but more information about customizing the broker can be found here.</p>"},{"location":"Reference/MQTT/viewMqttEvents/","title":"Event Monitoring with MQTT (MQTT Eventing)","text":"<p>Open AMT Cloud Toolkit supports Eventing using Message Queuing Telemetry Transport (MQTT), an IoT publish-and-subscribe network protocol. With MQTT Eventing, administrators can subscribe to specific topics, categories of events, for server event monitoring. This eliminates the need to query or poll MPS to determine network events, such as a device's activation or deactivation. Administrators can subscribe to events and respond proactively. </p> <p>Important</p> <p>Currently, the implementation publishes all MPS and RPS REST API call events to the MQTT Broker. </p> Figure 1: MQTT Eventing Examples <p>MPS and RPS send JSON events to a Mosquitto* broker deployed as a Docker container. Administrators subscribe to the broker. As shown in Figure 1, proactive notifications are published in the MQTT Broker container.  </p>"},{"location":"Reference/MQTT/viewMqttEvents/#set-up-mqtt-support","title":"Set Up MQTT Support","text":"<p>To enable support:</p> <ol> <li> <p>This guide assumes you have completed the Getting Started Guide and have Open AMT currently running in Docker containers.  If not, follow the Get Started Guide Setup page. Stop and return here after the your services are running.</p> </li> <li> <p>In a text editor or IDE of choice, open the <code>.env</code> file to edit.</p> </li> <li> <p>Update the following fields. The <code>mqtt:</code> prefix indicates an MQTT broker is being used. Kong* will now route event messages to port 8883.</p> Field Name Set to: RPS_MQTT_ADDRESS mqtt://mosquitto:8883 MPS_MQTT_ADDRESS mqtt://mosquitto:8883 </li> <li> <p>Save and close the file.</p> </li> <li> <p>Pull the Mosquitto image. Read more about profiles in the Docker docs at Using profiles with Compose.</p> <pre><code>docker compose --profile mqtt pull\n</code></pre> </li> <li> <p>Start the Mosquitto container.</p> <pre><code>docker compose --profile mqtt up -d\n</code></pre> <p>Note - Cleaning up Mosquitto Container</p> <p>When stopping and cleaning up containers deployed using the <code>mqtt</code> profile, you must also use that profile when running <code>docker compose down</code> in order to remove all resources.</p> <p>Example: <pre><code>docker compose --profile mqtt down -v\n</code></pre></p> </li> </ol>"},{"location":"Reference/RPC/buildRPC_Manual/","title":"Build RPC-Go Manually","text":"<p>Developed in Go* programming language, the Remote Provisioning Client (RPC) application runs on the managed device and communicates with the Remote Provisioning Server (RPS) microservice on the development system. The RPC and RPS configure and activate Intel\u00ae AMT on the managed device. Once properly configured, the remote managed device can call home to the Management Presence Server (MPS) by establishing a Client Initiated Remote Access (CIRA) connection with the MPS. See Figure 1.</p> <p>Production Environment</p> <p>In a production environment, RPC can be deployed with an in-band manageability agent to distribute it to the fleet of AMT devices. The in-band manageability agent can invoke RPC to run and activate the AMT devices.</p> Figure 1: RPC Configuration <p>Figure 1 Details</p> <p>The RPC on a managed device communicates with the Intel\u00ae Management Engine Interface (Intel\u00ae MEI, previously known as HECI) Driver and the Remote Provisioning Server (RPS) interfaces. The Driver uses the Intel\u00ae MEI to talk to Intel\u00ae AMT. The RPC activates Intel\u00ae AMT with an AMT profile, which is associated with a CIRA configuration (Step 3). The profile, which also distinguishes between Client Control Mode (CCM) or Admin Control Mode (ACM), and configuration were created in Create a CIRA Config or Create an AMT Profile. After running RPC with a profile, Intel\u00ae AMT will establish a CIRA connection with the MPS (Step 4) allowing MPS to manage the remote device and issue AMT commands (Step 5).</p>"},{"location":"Reference/RPC/buildRPC_Manual/#overview","title":"Overview","text":"<p>This guide details how to manually build the RPC-Go binary for development or testing purposes.</p> <p>Important - RPC-Go Prebuilt Binaries</p> <p>Just need the binary and don't want to build it manually? Download the latest RPC-Go binary version from the RPC-Go GitHub Repo Releases Page for the Operating System of the AMT device (Windows or Linux).</p>"},{"location":"Reference/RPC/buildRPC_Manual/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Go* Programming Language</li> </ul>"},{"location":"Reference/RPC/buildRPC_Manual/#clone-the-rpc-go-repository","title":"Clone the RPC-Go Repository","text":"<ol> <li> <p>Open a Terminal or Command Prompt and navigate to a directory of your choice for development:    <pre><code>git clone https://github.com/open-amt-cloud-toolkit/rpc-go --branch v2.36.0\n</code></pre></p> </li> <li> <p>Change to the cloned <code>rpc-go</code> directory:    <pre><code>cd rpc-go\n</code></pre></p> </li> </ol>"},{"location":"Reference/RPC/buildRPC_Manual/#build-rpc","title":"Build RPC","text":"<p>Flexible Deployment - RPC as a Library</p> <p>The RPC can be built as an executable file or as a library, which offers the flexibility of deploying in your management agent or client. Read more about building RPC as a library here.</p> <ol> <li> <p>Open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows):</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>go build -o rpc ./cmd/main.go\n</code></pre> <pre><code>go build -o rpc.exe ./cmd/main.go\n</code></pre> <pre><code>docker build -f \"Dockerfile\" -t rpc-go:latest .\n</code></pre> </li> <li> <p>Confirm a successful build.</p> <p>RPC must run with elevated privileges. Commands require <code>sudo</code> on Linux or an Administrator Command Prompt on Windows.</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>sudo ./rpc version\n</code></pre> <pre><code>.\\rpc version\n</code></pre> <pre><code>sudo docker run --rm -it --device=/dev/mei0 rpc-go:latest version\n</code></pre> </li> </ol>"},{"location":"Reference/RPC/commandsRPC/","title":"RPC CLI","text":"<p>On the managed device, a Remote Provisioning Client (RPC) communicates with the Remote Provision Server (RPS) in the process of activating or deactivating the device. In addition to activation and deactivation, the RPC provides informational and maintenance commands.</p>"},{"location":"Reference/RPC/commandsRPC/#list-commands","title":"List Commands","text":"<p>RPC must run with elevated privileges. Commands require <code>sudo</code> on Linux or an Administrator Command Prompt on Windows.</p> <p>Run the RPC application on the command line with no arguments to see supported commands:</p> <pre><code>rpc\n</code></pre> COMMAND DESCRIPTION EXAMPLE activate Activate this device with a specified profile. ./rpc activate -u wss://server/activate -profile profilename deactivate Deactivate this device. You will be prompted for the AMT password. ./rpc deactivate -u wss://server/deactivate maintenance Execute a maintenance task for the device. You will be prompted for the AMT password. ./rpc maintenance syncclock -u wss://server/maintenance configure Local configuration of a feature on this device. You will be prompted for the AMT password. ./rpc configure addwifisettings ... amtinfo Display AMT status and configuration. ./rpc amtinfo version Display the current version of RPC and the RPC Protocol version. ./rpc version"},{"location":"Reference/RPC/commandsRPC/#list-command-options","title":"List Command Options","text":"<p>Run the application with a command to see available options for the command:</p> <pre><code>rpc [COMMAND]\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#activate","title":"activate","text":""},{"location":"Reference/RPC/commandsRPC/#activate-and-configure-the-device-using-rps","title":"Activate and Configure the device using RPS:","text":"<p>Activate the device with a specified profile:</p> <pre><code>rpc activate -u wss://server/activate -profile profilename\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#activate-the-device-locally","title":"Activate the device locally:","text":"<p>This capability is only supported for activating unprovisioned (e.g. pre-provisioning state) devices. This command only activates AMT. It does not do profile-based configuration.</p> CCMACMACM w/ Config File <pre><code>rpc activate -local -ccm -password NewAMTPassword\n</code></pre> Local Stored Provisioning CertRemote Stored Provisioning Cert <pre><code>rpc activate -local -acm -amtPassword NewAMTPassword -provisioningCert \"{BASE64_PROV_CERT}\" -provisioningCertPwd certPassword\n</code></pre> <p>Currently, the only supported remote network share is Server Message Block (SMB) based shares. </p> No Credentials Required<pre><code>rpc activate -local -acm -config smb://server/shareName/filePath/test.pfx -provisioningCertPwd certPassword -amtPassword amtPass\n</code></pre> Credentials Required<pre><code>rpc activate -local -acm -config smb://workgroup;username:password@server/shareName/filePath/test.pfx -provisioningCertPwd certPassword -amtPassword amtPass\n</code></pre> Credentials Required but Prompt for Password<pre><code>rpc activate -local -acm -config smb://workgroup;username:*@server/shareName/filePath/test.pfx -provisioningCertPwd certPassword -amtPassword amtPass\n</code></pre> <p>Options can be passed via a config file. This can also be combined into a single config file with addwifisettings information.</p> YAML config.yaml<pre><code>acmactivate:\n  amtPassword: 'P@ssw0rd'\n  provisioningCert: 'BASE64_PROV_CERT'\n  provivisioningCertPwd: 'CertP@ssw0rd'\n</code></pre> <p>Example Commands:</p> Local Stored Config FileRemote Stored Config File <pre><code>rpc activate -local -acm -config config.yaml\n</code></pre> <p>Currently, the only supported remote network share is Server Message Block (SMB) based shares.</p> No Credentials Required<pre><code>rpc activate -local -acm -config smb://shareName/filePath/config.yaml\n</code></pre> Credentials Required<pre><code>rpc activate -local -acm -config smb://workgroup;username:password@server/shareName/filePath/config.yaml\n</code></pre> Credentials Required but Prompt for Password<pre><code>rpc activate -local -acm -config smb://workgroup;username:*@server/shareName/filePath/config.yaml\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#activate-general-options","title":"<code>activate</code> General Options","text":"OPTION DESCRIPTION --echo-password Show AMT Password input in terminal. By default, password user input is hidden. -json JSON output -l string Log level (panic,fatal,error,warn,info,debug,trace) (default \"info\") Caution: Do not run log level <code>trace</code> in production as sensitive information may be logged to the console. -lmsaddress string LMS address (default \"localhost\"). Can be used to change location of LMS for debugging. -lmsport string LMS port (default \"16992\") -n Skip WebSocket server certificate verification -skipIPRenew Skip DHCP renewal of the IP address if AMT becomes enabled. Only applicable for 13th Gen Raptor Lake (AMT 16.1) or newer devices. -t duration Time to wait until AMT is ready (e.g. <code>2m</code> or <code>30s</code>), the default is <code>2m0s</code> -v Verbose output Caution: Do not run in production as sensitive information may be logged to the console."},{"location":"Reference/RPC/commandsRPC/#activate-remote-specific-options","title":"<code>activate</code> Remote-Specific Options","text":"OPTION DESCRIPTION -d string DNS suffix override -h string Hostname override -n Skip WebSocket server certificate verification -name string Friendly name to associate with this device -p string Proxy address and port -password Existing set AMT password -profile string Name of the profile to use -tenant string TenantID of profile. If not provided, then assumed empty string (i.e. no Multitenancy enabled) -token string JWT Token for Authorization -u string WebSocket address of server to activate against -uuid string Override AMT device UUID for use with non-CIRA workflow and deployments. This is for specific use cases where the hardware does not have a correctly assigned or formatted UUID. This is NOT recommended in other situations and could potentially break features.  Input must match standard UUID alphanumeric, hyphenated format (e.g. 4c4c4544-005a-3510-8047-b4c04f564433)."},{"location":"Reference/RPC/commandsRPC/#activate-local-specific-options","title":"<code>activate</code> Local-Specific Options","text":"OPTION DESCRIPTION -acm Flag for ACM Local Activation. -amtPassword string New AMT Password to set on device. -ccm Flag for CCM Local Activation. -config Remote <code>smb://</code> or local file path of a <code>.yaml</code> file with desired ACM configuration. -local Execute command to AMT directly without cloud interaction. -provisioningCert Base64 string Base64 Encoded String of the <code>.pfx</code> provisioning certificate. -provisioningCertPwd string Password of provisioning certificate."},{"location":"Reference/RPC/commandsRPC/#deactivate","title":"deactivate","text":"<p>Warning - Future Deprecation: Changing of Kong Routes</p> <p>We have now enabled the <code>/deactivate</code> Kong route. The previous <code>/activate</code> route will still function for deactivate commands to avoid breaking changes. However, the <code>/activate</code> route's use with deactivate will be deprecated in the future and it is recommended to utilize the new, <code>/deactivate</code> route for new development.</p>"},{"location":"Reference/RPC/commandsRPC/#deactivate-the-device-using-rps","title":"Deactivate the device using RPS:","text":"<pre><code>rpc deactivate -u wss://server/deactivate\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#deactivate-the-device-locally","title":"Deactivate the device locally:","text":"<pre><code>rpc deactivate -local -password AMTPassword\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#deactivate-options","title":"<code>deactivate</code> Options","text":"OPTION DESCRIPTION --echo-password Show AMT Password input in terminal. By default, password user input is hidden. -json JSON output -l string Log level (panic,fatal,error,warn,info,debug,trace) (default \"info\") Caution: Do not run log level <code>trace</code> in production as sensitive information may be logged to the console. -lmsaddress string LMS address (default \"localhost\"). Can be used to change location of LMS for debugging. -lmsport string LMS port (default \"16992\") -local Execute command to AMT directly without cloud interaction. -password string AMT password -t duration Time to wait until AMT is ready (e.g. <code>2m</code> or <code>30s</code>), the default is <code>2m0s</code> -v Verbose output. Caution: Do not run in production as sensitive information may be logged to the console."},{"location":"Reference/RPC/commandsRPC/#deactivate-remote-specific-options","title":"<code>deactivate</code> Remote-Specific Options","text":"OPTION DESCRIPTION -f Force deactivate even if device is not registered with the RPS server -n Skip WebSocket server certificate verification -p string Proxy address and port -token string JWT Token for Authorization -u string WebSocket address of server to activate against"},{"location":"Reference/RPC/commandsRPC/#maintenance","title":"maintenance","text":"<p>Warning - Future Deprecation: Changing of Kong Routes</p> <p>We have now enabled the <code>/maintenance</code> Kong route. The previous <code>/activate</code> route will still function for maintenance commands to avoid breaking changes. However, the <code>/activate</code> route's use with maintenance will be deprecated in the future and it is recommended to utilize the new, <code>/maintenance</code> route for new development.</p> <p>Execute a maintenance command for the managed device:</p> SUBCOMMAND DESCRIPTION changepassword Change the AMT password.  A random password is generated by default if <code>-static</code> is not provided. syncclock Sync the host OS clock to AMT. syncdeviceinfo Sync the device info stored in the MPS database with the current local AMT device info. synchostname Sync the OS hostname to AMT Network Settings. syncip Sync the static IP of host OS to AMT Network Settings. <p></p>"},{"location":"Reference/RPC/commandsRPC/#common-maintenance-options","title":"Common <code>maintenance</code> Options","text":"OPTION DESCRIPTION --echo-password Show AMT Password input in terminal. By default, password user input is hidden. -f Force maintenance commands even if device is not registered with a server -json JSON output -l string Log level (panic,fatal,error,warn,info,debug,trace) (default \"info\") Caution: Do not run log level <code>trace</code> in production as sensitive information may be logged to the console. -lmsaddress string LMS address (default \"localhost\"). Can be used to change location of LMS for debugging. -lmsport string LMS port (default \"16992\") -n Skip WebSocket server certificate verification -p string Proxy address and port -password string AMT password -t duration Time to wait until AMT is ready (e.g. <code>2m</code> or <code>30s</code>), the default is <code>2m0s</code> -tenant string TenantID of profile. If not provided, then assumed empty string (i.e. no Multitenancy enabled) -token string JWT Token for Authorization -u string WebSocket address of server to activate against -uuid string Override AMT device UUID for use with non-CIRA workflow and deployments. This is for specific use cases where the hardware does not have a correctly assigned or formatted UUID. This is NOT recommended in other situations and could potentially break features.  Input must match standard UUID alphanumeric, hyphenated format (e.g. 4c4c4544-005a-3510-8047-b4c04f564433). -v Verbose output Caution: Do not run in production as sensitive information may be logged to the console."},{"location":"Reference/RPC/commandsRPC/#changepassword","title":"changepassword","text":"<p>Change the AMT password. A random password is generated by default if <code>static</code> option is not passed.</p> <pre><code>rpc maintenance changepassword -u wss://server/maintenance\n</code></pre> OPTION DESCRIPTION -static New password to be used <p></p>"},{"location":"Reference/RPC/commandsRPC/#syncclock-maintenance","title":"syncclock (maintenance)","text":"<p>Syncs the host OS clock to AMT.</p> <pre><code>rpc maintenance syncclock -u wss://server/maintenance\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#syncdeviceinfo","title":"syncdeviceinfo","text":"<p>Sync stored device info within the MPS database to the current, local device info. On device activation, MPS will store some device information as a JSON object. Some of this data may change over time like the firmware versions, activation modes, or IP address and could be outdated.</p> <pre><code>rpc maintenance syncdeviceinfo -u wss://server/maintenance\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#synchostname","title":"synchostname","text":"<p>Sync the OS hostname to AMT Network Settings.</p> <pre><code>rpc maintenance synchostname -u wss://server/maintenance\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#syncip","title":"syncip","text":"<p>Sync the static IP of host OS to AMT Network Settings.</p> <pre><code>rpc maintenance syncip -staticip 192.168.1.7 -netmask 255.255.255.0 -gateway 192.168.1.1 -primarydns 8.8.8.8 -secondarydns 4.4.4.4 -u wss://server/maintenance\n</code></pre> OPTION DESCRIPTION -staticip IP address to be assigned to AMTIf not specified, the IP address of the active OS newtork interface is used -netmask Network mask to be assigned to AMTIf not specified, the network mask of the active OS newtork interface is used -gateway Gateway address to be assigned to AMT -primarydns Primary DNS address to be assigned to AMT -secondarydns Secondary DNS address to be assigned to AMT <p></p>"},{"location":"Reference/RPC/commandsRPC/#configure","title":"configure","text":"<p>Execute a configuration command for the managed device:</p> SUBCOMMAND DESCRIPTION amtfeatures Enable/disable redirection features (KVM, IDER, SOL) and configure user consent. amtpassword Update the AMT Password. If no flags are provided, the current and new AMT passwords will be prompted for. enablewifiport Enables WiFi port and local profile synchronization settings in AMT. AMT password is required. mebx Configure MEBx Password. AMT password is required. syncclock Sync the host OS clock to AMT. AMT password is required. tls Configure TLS in AMT. AMT password is required. wired  wiredsettings (Deprecated) Configure wired settings (DHCP or Static IP) locally with RPC (no communication with RPS and EA) wireless  addwifisettings (Deprecated) Configure wireless 802.1x locally with RPC (no communication with RPS and EA) <p></p>"},{"location":"Reference/RPC/commandsRPC/#common-configure-options","title":"Common <code>configure</code> Options","text":"OPTION DESCRIPTION --echo-password Show AMT Password input in terminal. By default, password user input is hidden. -json JSON output -l string Log level (panic,fatal,error,warn,info,debug,trace) (default \"info\") Caution: Do not run log level <code>trace</code> in production as sensitive information may be logged to the console. -password string AMT password -v Verbose output Caution: Do not run in production as sensitive information may be logged to the console."},{"location":"Reference/RPC/commandsRPC/#amtfeatures","title":"amtfeatures","text":"<p>Enable or disable redirection features (KVM, IDER, SOL) and set the user consent type (none, kvm, all). AMT password is required.</p> <p>Control Mode and User Consent</p> <p>User consent can only be configured if the device is activated in ACM mode. In CCM, User Consent is set to <code>all</code> and cannot be changed.</p> <pre><code>rpc configure amtfeatures -kvm -sol -ider -userConsent none\n</code></pre> OPTION DESCRIPTION -ider Enable/disable IDER (IDE Redirection). -kvm Enable/disable KVM (Keyboard, Video, Mouse). -sol Enable/disable SOL (Serial-over-LAN). -userConsent string Configure user consent. Valid Values = {none, kvm, all}  Only configurable for devices activated in ACM. <p></p>"},{"location":"Reference/RPC/commandsRPC/#amtpassword","title":"amtpassword","text":"<p>Change or update the AMT password of the device. If the <code>-password</code> flag, <code>-newamtpassword</code> flag, or neither flag are provided, then the user will be prompted to input the password or passwords.</p> <p><code>configure amtpassword</code> versus <code>maintenance changepassword</code></p> <p><code>configure amtpassword</code> is a local command. This does not communicate with a centralized database storing the new AMT passwords so make sure to take note of any changes made! To ensure the database is updated with the new passwords for deployments utilizing RPS and MPS, see the <code>rpc maintenance changepassword</code> command.</p> <pre><code>rpc configure amtpassword -password CurrentAMTPassword -newamtpassword NewAMTPassword   \n</code></pre> OPTION DESCRIPTION -newamtpassword New AMT password to set. <p></p>"},{"location":"Reference/RPC/commandsRPC/#enablewifiport","title":"enablewifiport","text":"<p>Enables WiFi port and local profile synchronization settings in AMT. This feature synchronizes the wireless profile set in the OS with the wireless profile set in AMT. AMT Password is required.</p> <pre><code>rpc configure enablewifiport -password AMTPassword\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#mebx","title":"mebx","text":"<p>Configure the MEBx password. The MEBx password can only be configured if the device is activated in ACM mode. AMT password is required.</p> <p><code>configure mebx</code> Storing Passwords</p> <p><code>configure mebx</code> is a local command. This does not communicate with a centralized database storing the new MEBx passwords so make sure to take note of any changes made!</p> <pre><code>rpc configure mebx -mebxpassword newMEBxPassword -password AMTPassword\n</code></pre> OPTION DESCRIPTION -mebxpassword New MEBx password to set. <p>Important - Using Strong Passwords</p> <p>The MEBx password must meet standard, strong password requirements:</p> <ul> <li> <p>8 to 32 characters</p> </li> <li> <p>At least one of each: Uppercase letter, lowercase letter, numerical digit, and special character</p> </li> </ul> <p></p>"},{"location":"Reference/RPC/commandsRPC/#syncclock-configure","title":"syncclock (configure)","text":"<p>Syncs the host OS clock to AMT. AMT password is required.</p> <pre><code>rpc configure syncclock -password AMTPassword\n</code></pre> <p></p>"},{"location":"Reference/RPC/commandsRPC/#tls","title":"tls","text":"<p>Configures TLS in AMT. AMT password is required.</p> Config FileIndividual Options <p>Use the <code>-config</code> flag to pass either a <code>.yaml</code> or <code>.json</code> file. </p> <pre><code>rpc configure tls -config config.yaml\n</code></pre> Using Enterprise AssistantWithout Enterprise Assistant <p>See the TLS Configuration using Enterprise Assistant and RPC-Go documentation for more details.</p> YAMLJSON config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in  the command line\ntlsConfig:\n  mode: 'Server'\nenterpriseAssistant:\n  eaAddress: 'http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000'\n  eaUsername: 'eaUser'\n  eaPassword: 'eaPass'\n</code></pre> config.json<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"tlsConfig\": {\n    \"mode\": \"Server\"\n  },\n  \"enterpriseAssistant\": {\n    \"eaAddress\": \"http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000\",\n    \"eaUsername\": \"eaUser\",\n    \"eaPassword\": \"eaPass\"\n  }\n}\n</code></pre> <p>If Enterprise Assistant is not used, a self-signed TLS certificate will be generated and used by AMT.</p> YAMLJSON config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in  the command line\ntlsConfig:\n  mode: 'Server'\n</code></pre> config.json<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"tlsConfig\": {\n    \"mode\": \"Server\"\n  }\n}\n</code></pre> <p>Alternatively, provide all options directly in the command line. </p> Using Enterprise AssistantWithout Enterprise Assistant <p>Provide the EA Address and configured RPC-Go Credentials. See the TLS Configuration using Enterprise Assistant and RPC-Go documentation for more details.</p> <pre><code>rpc configure tls -mode Server -password AMTPassword -eaAddress http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000 -eaUsername eaUser -eaPassword eaPass\n</code></pre> <p>If Enterprise Assistant is not used, a self-signed TLS certificate will be generated and used by AMT.</p> <pre><code>rpc configure tls -mode Server -password AMTPassword\n</code></pre> <p></p> OPTION DESCRIPTION -config string File path of a <code>.yaml</code> or <code>.json</code> file with desired TLS configuration. -delay int Delay time in seconds after putting remote TLS settings. Default value is 3 seconds if not provided. -eaAddress string IP Address or FQDN of Enterprise Assistant -eaPassword string Configured Enterprise Assistant Password -eaUsername Configured Enterprise Assistant Username -mode value TLS authentication usage model. Valid Values = {Server, ServerAndNonTLS}. Default value is <code>Server</code> if not provided. <p></p>"},{"location":"Reference/RPC/commandsRPC/#wired","title":"wired","text":"<p>Warning - Deprecation: <code>wiredsettings</code> subcommand</p> <p><code>rpc configure wired</code> is the recommended subcommand. The previous <code>rpc configure wiredsettings</code> subcommand is deprecated will be removed in the future. It is recommended to utilize the new, <code>rpc configure wired</code> subcommand for new development.</p> <p>Configure AMT wired settings for DHCP or Static IP locally using RPC-Go (no communication with RPS and EA). AMT password is required.</p> <p>Configure wired 802.1x settings of an existing, activated AMT device by passing credentials and certificates directly to AMT or using Enterprise Assistant. More information on configuring AMT to use 802.1x can be found in RPC-Go 802.1x Configuration or RPS 802.1x Configuration.</p> Config FileConfig w/ Secrets FileIndividual Options-configJson String Option <p></p> OPTION DESCRIPTION -authenticationProtocol 802.1x profile protocol. Valid Values = {0, 2} where <code>0</code> = EAP-TLS, <code>2</code> = EAP/MSCHAPv2 -caCert Trusted Microsoft root CA or 3rd-party root CA in Active Directory domain. -clientCert Client certificate chained to the <code>caCert</code>. Issued by enterprise CA or mapped to computer account in Active Directory. AMT provides this certificate to authenticate itself with the Radius Server. -config string File path of a <code>.yaml</code> or <code>.json</code> file with desired wired DHCP or Static IP configuration. -configJson string Configuration as a JSON string -dhcp Configure AMT wired settings to use DHCP. -eaAddress string IP Address or FQDN of Enterprise Assistant. -eaPassword string Configured Enterprise Assistant Password. -eaUsername Configured Enterprise Assistant Username. -gateway value Gateway address to assign to AMT. For use with <code>-static</code> only. -ieee8021xPassword 802.1x profile password if authenticationProtocol is PEAPv0/EAP-MSCHAPv2(2). -ieee8021xProfileName IEEE 802.1x Profile name (Friendly name), must be alphanumeric. -ipaddress value IP Address to assign to AMT. For use with <code>-static</code> only. -ipsync Sync the IP configuration of the host OS to AMT network settings. -primarydns value Primary DNS to assign to AMT. For use with <code>-static</code> only. -secondarydns value Secondary DNS to assign to AMT. For use with <code>-static</code> only. -secrets string File path of a <code>.yaml</code> or <code>.json</code> file with required secrets. -static Configure AMT wired settings to use Static IP. -subnetmask value Subnetwork mask to assign to AMT. For use with <code>-static</code> only. -username 802.1x username, must match the Common Name of the <code>clientCert</code>. <p></p>"},{"location":"Reference/RPC/commandsRPC/#via-config-file","title":"via Config file","text":"<ol> <li> <p>Create a new file called <code>config.yaml</code> or <code>config.json</code>. Copy and paste the corresponding template below.</p> <p>These templates show how to create a simple Wired profile for configuring a device for either DHCP or a Static IP Address.</p> DHCPStatic <p>The config file can be passed as either a <code>YAML</code> or <code>JSON</code> formatted file.</p> YAMLJSON config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  dhcp: true\n  ipsync: true\n</code></pre> config.json<pre><code>{\n\"password\": \"AMTPassword\",\n\"wiredConfig\": {\n  \"dhcp\": true,\n  \"ipsync\": true\n  }\n}\n</code></pre> <p>The config file can be passed as either a <code>YAML</code> or <code>JSON</code> formatted file.</p> YAMLJSON config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  static: true\n  ipaddress: 192.168.1.50\n  subnetmask: 255.255.255.0\n  gateway: 192.168.1.1\n  primarydns: 8.8.8.8\n  secondarydns: 4.4.4.4\n</code></pre> config.json<pre><code>{\n\"password\": \"AMTPassword\",\n\"wiredConfig\": {\n  \"static\": true,\n  \"ipaddress\": \"192.168.1.50\",\n  \"subnetmask\": \"255.255.255.0\",\n  \"gateway\": \"192.168.1.1\",\n  \"primarydns\": \"8.8.8.8\",\n  \"secondarydns\": \"4.4.4.4\"\n  }\n}\n</code></pre> </li> <li> <p>Change the fields with your desired values.</p> </li> <li> <p>Provide the <code>config.yaml</code> or <code>config.json</code> file using the <code>-config</code> flag. </p> <pre><code>rpc configure wired -config config.yaml\n</code></pre> </li> </ol>"},{"location":"Reference/RPC/commandsRPC/#with-8021x","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> YAMLJSON config.yaml with 802.1x<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in  the command line\nwiredConfig:\n  dhcp: true\n  ipsync: true\n  ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nenterpriseAssistant:\n  eaAddress: 'http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000'\n  eaUsername: 'eaUser'\n  eaPassword: 'eaPass'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    authenticationProtocol: 0\n    # ieee8021xPassword: ''  # 8021x password if authenticationProtocol is 2 (PEAPv0/EAP-MSCHAPv2)\n</code></pre> config.json with 802.1x<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"wiredConfig\": {\n    \"dhcp\": true,\n    \"ipsync\": true,\n    \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\"\n  },\n  \"enterpriseAssistant\": {\n    \"eaAddress\": \"http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000\",\n    \"eaUsername\": \"admin\",\n    \"eaPassword\": \"P@ssw0rd\"\n  },\n  \"ieee8021xConfigs\": [\n    {\n      \"profileName\": \"exampleIeee8021xEAP-TLS\",\n      \"authenticationProtocol\": 0\n    }\n  ]\n}\n</code></pre> YAMLJSON config.yaml with 802.1x<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwiredConfig:\n  dhcp: true\n  ipsync: true\n  ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    username: 'exampleUserName'\n    authenticationProtocol: 0\n    # ieee8021xPassword: ''  # 8021x password if authenticationProtocol is 2 (PEAPv0/EAP-MSCHAPv2)\n    clientCert: ''\n    caCert: ''\n    privateKey: ''\n</code></pre> config.json with 802.1x<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"wiredConfig\": {\n    \"dhcp\": true,\n    \"ipsync\": true,\n    \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\"\n  },\n  \"ieee8021xConfigs\": [\n    {\n      \"profileName\": \"exampleIeee8021xEAP-TLS\",\n      \"username\": \"exampleUserName\",\n      \"authenticationProtocol\": 0,\n      \"clientCert\": \"\",\n      \"caCert\": \"\",\n      \"privateKey\": \"\"\n    }\n  ]\n}\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#via-config-with-secrets-file","title":"via Config with Secrets file","text":"<p>If a secrets file is included with the configuration file, those secrets will be used in the matching <code>ieee8021xProfileName</code> configuration. These templates show how to create a simple Wired profile utilizing 802.1x.</p> <ol> <li> <p>Create a new file called <code>config.yaml</code>. Copy and paste the corresponding template below.</p> <p>This <code>config.yaml</code> is slightly different from the standard one as we either delete or leave blank the secret fields <code>ieee8021xPassword</code> and <code>privateKey</code>.</p> YAMLJSON config.yaml<pre><code>wiredConfig:\n  dhcp: true\n  ipsync: true\n  ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    username: \"exampleUserName\"\n    authenticationProtocol: 0 #8021x profile (ex. EAP-TLS(0))\n    clientCert: ''\n    caCert: ''\n</code></pre> config.json<pre><code>\n</code></pre> </li> <li> <p>Create a new file called <code>secrets.yaml</code>. Copy and paste the template below.</p> YAMLJSON secrets.yaml<pre><code>secrets:\n- profileName: 'exampleIeee8021xEAP-TLS'\n  privateKey: ''\n- profileName: 'ieee8021xPEAPv0'\n  password: ''\n</code></pre> secrets.json<pre><code>{\n\"secrets\": [\n    {\n    \"profileName\": \"exampleIeee8021xEAP-TLS\",\n    \"privateKey\": \"\"\n    },\n    {\n    \"profileName\": \"ieee8021xPEAPv0\",\n    \"password\": \"\"\n    }\n]\n}\n</code></pre> </li> <li> <p>Fill in fields with the secrets. The <code>profileName</code> given in the secrets file must match the corresponding 802.1x configuration <code>iee8021xProfileName</code>.</p> </li> <li> <p>Provide the <code>secrets.yaml</code> file using the <code>-secrets</code> flag. </p> <pre><code>rpc configure wired -config config.yaml -secrets secrets.yaml\n</code></pre> </li> </ol>"},{"location":"Reference/RPC/commandsRPC/#via-individual-options","title":"via Individual Options","text":"<p>Alternatively, provide all options directly in the command line.</p> <p>Warning - Use Case and Security</p> <p>The CLI option is intended for use as part of an integration of RPC as a shared library. The passing of secrets directly via command line is highly insecure and NOT recommended.</p> DHCPStatic <pre><code>rpc configure wired -dhcp -ipsync -password AMTPassword\n</code></pre> <pre><code>rpc configure wired -static -ipaddress 192.168.1.50 -subnetmask 255.255.255.0 -gateway 192.168.1.1 -primarydns 8.8.8.8 -secondarydns 4.4.4.4 -password AMTPassword\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#with-8021x_1","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> <pre><code>rpc configure wired -dhcp -ipsync -password AMTPassword -ieee8021xProfileName example8021xProfile -eaAddress http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000 -eaUsername eaUser -eaPassword eaPass -authenticationProtocol 0\n</code></pre> <pre><code>rpc configure wired -dhcp -ipsync -password AMTPassword -ieee8021xProfileName example8021xProfile -authenticationProtocol 0 -clientCert \"\" -caCert \"\" -privateKey \"\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#via-configjson-option","title":"via -configJson Option","text":"<p>Or, provide the JSON string directly in the command line.</p> <p>Warning - Use Case and Security</p> <p>The CLI option is intended for use as part of an integration of RPC as a shared library. The passing of secrets directly via command line is highly insecure and NOT recommended.</p> DHCPStatic <pre><code>rpc configure wired -configJson \"{ \"password\": \"AMTPassword\", \"wiredConfig\": { \"dhcp\": true, \"ipsync\": true } }\"\n</code></pre> <pre><code>rpc configure wired -configJson \"{ \"password\": \"AMTPassword\", \"wiredConfig\": { \"static\": true, \"ipaddress\": \"192.168.1.50\", \"subnetmask\": \"255.255.255.0\", \"gateway\": \"192.168.1.1\", \"primarydns\": \"8.8.8.8\", \"secondarydns\": \"4.4.4.4\" } }\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#with-8021x_2","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> <pre><code>rpc configure wired -configJson \"{ \"password\": \"AMTPassword\", \"wiredConfig\": { \"dhcp\": true, \"ipsync\": true, \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\" }, \"enterpriseAssistant\": { \"eaAddress\": \"http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000\", \"eaUsername\": \"eaUser\", \"eaPassword\": \"eaPass\" }, \"ieee8021xConfigs\": [ { \"profileName\": \"exampleIeee8021xEAP-TLS\", \"authenticationProtocol\": 0 } ] }\"\n</code></pre> <pre><code>rpc configure wired -configJson \"{ \"password\": \"AMTPassword\", \"wiredConfig\": { \"dhcp\": true, \"ipsync\": true, \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\" }, \"ieee8021xConfigs\": [ { \"profileName\": \"exampleIeee8021xEAP-TLS\", \"username\": \"exampleUserName\", \"authenticationProtocol\": 0, \"clientCert\": \"\", \"caCert\": \"\", \"privateKey\": \"\" } ] }\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#wireless","title":"wireless","text":"<p>Warning - Deprecation: <code>addwifisettings</code> subcommand</p> <p><code>rpc configure wireless</code> is the recommended subcommand. The previous <code>rpc configure addwifisettings</code> subcommand is deprecated will be removed in the future. It is recommended to utilize the new, <code>rpc configure wireless</code> subcommand for new development.</p> <p>Configure wireless 802.1x settings of an existing, activated AMT device by passing credentials and certificates directly to AMT or using Enterprise Assistant. More information on configuring AMT to use 802.1x can be found in RPC-Go 802.1x Configuration or RPS 802.1x Configuration. AMT password is required.</p> <p>On failure, the <code>wireless</code> configure command will rollback any certificates added before the error occurred.</p> Config FileConfig w/ Secrets FileIndividual Options-configJson String Option <p></p> OPTION DESCRIPTION -authenticationMethod Wifi authentication method. Valid Values = {4, 5, 6, 7} where <code>4</code> = WPA PSK, <code>5</code> = WPA_IEEE8021X, <code>6</code> = WPA2 PSK, <code>7</code> = WPA2_IEEE8021X -authenticationProtocol 802.1x profile protocol. Valid Values = {0, 2} where <code>0</code> = EAP-TLS, <code>2</code> = EAP/MSCHAPv2 -caCert Trusted Microsoft root CA or 3rd-party root CA in Active Directory domain. -clientCert Client certificate chained to the <code>caCert</code>. Issued by enterprise CA or mapped to computer account in Active Directory. AMT provides this certificate to authenticate itself with the Radius Server. -config File path of a <code>.yaml</code> or <code>.json</code> file with desired wireless and/or wireless 802.1x configuration. -configJson Configuration as a JSON string. -eaAddress string IP Address or FQDN of Enterprise Assistant. -eaPassword string Configured Enterprise Assistant Password. -eaUsername Configured Enterprise Assistant Username. -encryptionMethod Wifi encryption method. Valid Values = {3, 4} where <code>3</code> = TKIP, <code>4</code> = CCMP -ieee8021xPassword 802.1x profile password if authenticationProtocol is PEAPv0/EAP-MSCHAPv2(2). -profileName Profile name (Friendly name), must be alphanumeric. -priority Ranked priority over other profiles. -privateKey 802.1x profile private key of the <code>clientCert</code>. -pskPassphrase Wifi <code>pskPassphrase</code>, if <code>authenticationMethod</code> is WPA PSK(4) or WPA2 PSK(6). -secrets File path of a <code>.yaml</code> or <code>.json</code> file with secrets to be applied to the configurations. -ssid Wifi SSID. -username 802.1x username, must match the Common Name of the <code>clientCert</code>. <p></p>"},{"location":"Reference/RPC/commandsRPC/#via-config-file_1","title":"via Config file","text":"<p>The Config file can be formatted as either YAML or JSON. This example shows YAML but a JSON template is provided as well.</p> <ol> <li> <p>Create a new file called <code>config.yaml</code>. Copy and paste the corresponding template below.</p> <p>These templates show how to create a simple Wireless profile called exampleWifiWPA2.</p> YAMLJSON config.yaml<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwifiConfigs:\n  - profileName: 'exampleWifiWPA2' # friendly name (ex. Profile name)\n    ssid: 'exampleSSID'\n    priority: 1\n    authenticationMethod: 6\n    encryptionMethod: 4\n    pskPassphrase: ''\n</code></pre> config.json<pre><code>{\n\"password\": \"AMTPassword\",\n\"wifiConfigs\": [\n    {\n    \"profileName\": \"exampleWifiWPA2\",\n    \"ssid\": \"exampleSSID\",\n    \"priority\": 1,\n    \"authenticationMethod\": 6,\n    \"encryptionMethod\": 4,\n    \"pskPassphrase\": \"\"\n    }\n]\n}\n</code></pre> </li> <li> <p>Fill in fields with desired options and secrets.  If the secrets are not provided (e.g. secret field is an empty string or not given), the secrets will be prompted for as user input in the command line.</p> <p>Alternatively, secrets can be stored and referenced in a separate file. See Config w/ Secrets File tab for more information.</p> </li> <li> <p>Provide the <code>config.yaml</code> file using the <code>-config</code> flag. </p> <pre><code>rpc configure wireless -config config.yaml\n</code></pre> </li> </ol>"},{"location":"Reference/RPC/commandsRPC/#with-8021x_3","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> YAMLJSON config.yaml with 802.1x<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in  the command line\nenterpriseAssistant:\n  eaAddress: 'http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000'\n  eaUsername: 'eaUser'\n  eaPassword: 'eaPass'\nwifiConfigs:\n  - profileName: 'exampleWifi8021x' # friendly name (ex. Profile name)\n    ssid: 'ssid'\n    priority: 1\n    authenticationMethod: 7\n    encryptionMethod: 4\n    ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    # password: \"\" # 8021x password if authenticationProtocol is PEAPv0/EAP-MSCHAPv2(2)\n    authenticationProtocol: 0 #8021x profile (ex. EAP-TLS(0))\n</code></pre> config.json with 802.1x<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"enterpriseAssistant\": {\n    \"eaAddress\": \"http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000\",\n    \"eaUsername\": \"admin\",\n    \"eaPassword\": \"P@ssw0rd\"\n  },\n  \"wifiConfigs\": [\n    {\n      \"profileName\": \"exampleWifi8021x\",\n      \"ssid\": \"ssid\",\n      \"priority\": 1,\n      \"authenticationMethod\": 7,\n      \"encryptionMethod\": 4,\n      \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\"\n    }\n  ],\n  \"ieee8021xConfigs\": [\n    {\n      \"profileName\": \"exampleIeee8021xEAP-TLS\",\n      \"authenticationProtocol\": 0\n    }\n  ]\n}\n</code></pre> YAMLJSON config.yaml with 802.1x<pre><code>password: 'AMTPassword' # alternatively, you can provide the AMT password of the device in the command line\nwifiConfigs:\n  - profileName: 'exampleWifi8021x' # friendly name (ex. Profile name)\n    ssid: 'ssid'\n    priority: 1\n    authenticationMethod: 7\n    encryptionMethod: 4\n    ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    username: \"exampleUserName\"\n    # password: \"\" # 8021x password if authenticationProtocol is PEAPv0/EAP-MSCHAPv2(2)\n    authenticationProtocol: 0 #8021x profile (ex. EAP-TLS(0))\n    clientCert: ''\n    caCert: ''\n    privateKey: ''\n</code></pre> config.json with 802.1x<pre><code>{\n  \"password\": \"AMTPassword\",\n  \"wifiConfigs\": [\n    {\n      \"profileName\": \"exampleWifi8021x\",\n      \"ssid\": \"ssid\",\n      \"priority\": 1,\n      \"authenticationMethod\": 7,\n      \"encryptionMethod\": 4,\n      \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\"\n    }\n  ],\n  \"ieee8021xConfigs\": [\n    {\n      \"profileName\": \"exampleIeee8021xEAP-TLS\",\n      \"username\": \"exampleUserName\",\n      \"authenticationProtocol\": 0,\n      \"clientCert\": \"\",\n      \"caCert\": \"\",\n      \"privateKey\": \"\"\n    }\n  ]\n}\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#via-config-with-secrets-file_1","title":"via Config with Secrets file","text":"<p>If a secrets file is included with the configuration file, those secrets will be used in the matching <code>profileName</code> configuration. These templates show how to create a simple Wireless profile called exampleWifiWPA2 and a Wireless profile utilizing 802.1x called exampleWifi8021x.</p> <ol> <li> <p>Create a new file called <code>config.yaml</code>. Copy and paste the corresponding template below.</p> <p>This <code>config.yaml</code> is slightly different from the standard one as we either delete or leave blank the secret fields <code>pskPassphrase</code>, <code>password</code>, and <code>privateKey</code>.</p> YAMLJSON config.yaml<pre><code>wifiConfigs:\n  - profileName: 'exampleWifiWPA2' # friendly name (ex. Profile name)\n    ssid: 'exampleSSID'\n    priority: 1\n    authenticationMethod: 6\n    encryptionMethod: 4\n  - profileName: 'exampleWifi8021x' # friendly name (ex. Profile name)\n    ssid: 'ssid'\n    priority: 2\n    authenticationMethod: 7\n    encryptionMethod: 4\n    ieee8021xProfileName: 'exampleIeee8021xEAP-TLS'\nieee8021xConfigs:\n  - profileName: 'exampleIeee8021xEAP-TLS'\n    username: \"exampleUserName\"\n    authenticationProtocol: 0 #8021x profile (ex. EAP-TLS(0))\n    clientCert: ''\n    caCert: ''\n</code></pre> config.json<pre><code>{\n\"wifiConfigs\": [\n    {\n    \"profileName\": \"exampleWifiWPA2\",\n    \"ssid\": \"exampleSSID\",\n    \"priority\": 1,\n    \"authenticationMethod\": 6,\n    \"encryptionMethod\": 4,\n    \"pskPassphrase\": \"\"\n    },\n    {\n    \"profileName\": \"exampleWifi8021x\",\n    \"ssid\": \"ssid\",\n    \"priority\": 2,\n    \"authenticationMethod\": 7,\n    \"encryptionMethod\": 4,\n    \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\"\n    }\n],\n\"ieee8021xConfigs\": [\n    {\n    \"profileName\": \"exampleIeee8021xEAP-TLS\",\n    \"username\": \"exampleUserName\",\n    \"password\": \"\",\n    \"authenticationProtocol\": 0,\n    \"clientCert\": \"\",\n    \"caCert\": \"\",\n    }\n]\n}\n</code></pre> </li> <li> <p>Create a new file called <code>secrets.yaml</code>. Copy and paste the template below.</p> YAMLJSON secrets.yaml<pre><code>secrets:\n- profileName: 'exampleWifiWPA2'\n  pskPassphrase: ''\n- profileName: 'exampleIeee8021xEAP-TLS'\n  privateKey: ''\n- profileName: 'ieee8021xPEAPv0'\n  password: ''\n</code></pre> secrets.json<pre><code>{\n\"secrets\": [\n    {\n    \"profileName\": \"exampleWifiWPA2\",\n    \"pskPassphrase\": \"\"\n    },\n    {\n    \"profileName\": \"exampleIeee8021xEAP-TLS\",\n    \"privateKey\": \"\"\n    },\n    {\n    \"profileName\": \"ieee8021xPEAPv0\",\n    \"password\": \"\"\n    }\n]\n}\n</code></pre> </li> <li> <p>Fill in fields with the secrets. The <code>profileName</code> given in the secrets file must match the corresponding Wireless or 802.1x configuration <code>profileName</code>.</p> </li> <li> <p>Provide the <code>secrets.yaml</code> file using the <code>-secrets</code> flag. </p> <pre><code>rpc configure wireless -config config.yaml -secrets secrets.yaml\n</code></pre> </li> </ol>"},{"location":"Reference/RPC/commandsRPC/#via-individual-options_1","title":"via Individual Options","text":"<p>Alternatively, provide all options directly in the command line. The user will be prompted for missing secrets (i.e. password, privateKey, pskPassphrase, ieee8021xPassword), if not provided.</p> <p>Warning - Use Case and Security</p> <p>The CLI option is intended for use as part of an integration of RPC as a shared library. The passing of secrets directly via command line is highly insecure and NOT recommended.</p> <pre><code>rpc configure wireless -profileName profileName -password AMTPassword -authenticationMethod 6 -encryptionMethod 4 -ssid \"networkSSID\" -pskPassphrase networkPass -authenticationProtocol 0 -priority 1\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#with-8021x_4","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> <pre><code>rpc configure wireless -profileName profileName -password AMTPassword -authenticationMethod 7 -encryptionMethod 4 -ssid \"networkSSID\" -pskPassphrase networkPass -authenticationProtocol 0 -priority 1 -eaAddress http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000 -eaUsername eaUser -eaPassword eaPass\n</code></pre> <pre><code>rpc configure wireless -profileName profileName -password AMTPassword -authenticationMethod 7 -encryptionMethod 4 -ssid \"networkSSID\" -pskPassphrase networkPass -username \"username\" -authenticationProtocol 0 -priority 1 -clientCert \"\" -caCert \"\" -privateKey \"\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#via-configjson-option_1","title":"via -configJson Option","text":"<p>Or, provide the JSON string directly in the command line. The user will be prompted for missing secrets (i.e. password, privateKey, pskPassphrase, ieee8021xPassword), if not provided.</p> <p>Warning - Use Case and Security</p> <p>The CLI option is intended for use as part of an integration of RPC as a shared library. The passing of secrets directly via command line is highly insecure and NOT recommended.</p> <pre><code>rpc configure wireless -configJson \"{ \"wifiConfigs\": [ { \"profileName\": \"exampleWifi\", \"authenticationMethod\": 6, \"encryptionMethod\": 4, \"ssid\": \"networkSSID\", \"username\": \"username\", \"authenticationProtocol\": 0, \"priority\": 1 } ] }\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#with-8021x_5","title":"with 802.1x","text":"Using Enterprise AssistantWithout Enterprise Assistant <p>Using Enterprise Assistant for 802.1x configuration offers the most secure path. See Enterprise Assistant RPC-Go 802.1x Configuration for more information.</p> <pre><code>rpc configure wireless -configJson \"{ \"password\": \"AMTPassword\", \"enterpriseAssistant\": { \"eaAddress\": \"http://&lt;YOUR-IPADDRESS-OR-FQDN&gt;:8000\", \"eaUsername\": \"eaUser\", \"eaPassword\": \"eaPass\" }, \"wifiConfigs\": [ { \"profileName\": \"exampleWifi8021x\", \"ssid\": \"ssid\", \"priority\": 1, \"authenticationMethod\": 7, \"encryptionMethod\": 4, \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\" } ], \"ieee8021xConfigs\": [ { \"profileName\": \"exampleIeee8021xEAP-TLS\", \"authenticationProtocol\": 0 } ] }\"\n</code></pre> <pre><code>rpc configure wireless -configJson \"{ \"wifiConfigs\": [ { \"profileName\": \"exampleWifi8021x\", \"ssid\": \"networkSSID\", \"priority\": 1, \"authenticationMethod\": 7, \"encryptionMethod\": 4, \"ieee8021xProfileName\": \"exampleIeee8021xEAP-TLS\" } ], \"ieee8021xConfigs\": [ { \"profileName\": \"exampleIeee8021xEAP-TLS\", \"username\": \"exampleUserName\", \"password\": \"\", \"authenticationProtocol\": 0, \"clientCert\": \"\", \"caCert\": \"\", \"privateKey\": \"\" } ] }\"\n</code></pre>"},{"location":"Reference/RPC/commandsRPC/#amtinfo","title":"amtinfo","text":"<p>Display AMT status and configuration:</p> <pre><code>rpc amtinfo [OPTIONS]\n</code></pre> <p>Not passing <code>[OPTIONS]</code> will print all information.</p> AMT INFO OPTION DESCRIPTION -json JSON Output Version -ver Intel AMT version. Build Number -bld Intel AMT Build Number. System Certificates -cert System Certificate Hashes. If given <code>-password</code>, will print both System and User Certificate Hashes. User Certificates -userCert User Certificate Hashes. Will prompt for AMT password. Or, provide <code>-password</code> flag. SKU -sku Product SKU UUID -uuid Unique Universal Identifier of the device. Used when creating device-specific MPS API calls as part of the REST API's URL path. Control Mode -mode Control Mode below indicates the managed device's state: (a) pre-provisioning state (b) activated in client control mode (c) activated in admin control mode Operational State -operationalState Enabled/Disabled boolean. Returns state of AMT for 13th Gen Raptor Lake (AMT 16.1) or newer devices. N/A for earlier generation devices. DNS Suffix -dns DNS Suffix set according to PKI DNS Suffix in Intel MEBX or through DHCP Option 15. Required for ACM activation. DNS Suffix (OS) -dns Hostname (OS) -hostname Device's hostname as set in the Operating System. RAS Network -ras RAS Remote Status -ras Unconnected or connected. State of connection to a management server. RAS Trigger -ras User initiated or periodic. When activated, periodic signifies CIRA established. By default, CIRA sends a heartbeat to the server every 30 seconds to verify and maintain connection. RAS MPS Hostname -ras IP Address or FQDN of the MPS server. <p>---Wired/Wireless Adapters---</p> WIRED/WIRELESS ADAPTER OPTION DESCRIPTION DHCP Enabled -lan True/False. Whether or not the network is using DHCP or Static IPs. DHCP Mode -lan Link Status -lan Up/Down. Shows whether or not this adapter is being used by Intel AMT. AMT IP Address -lan If using CIRA or the device is unactivated, this field will show 0.0.0.0 OS IP Address -lan IP Address of device set in Operating System MAC Address -lan Device's MAC Address <p>For more information, see Wireless Activation.</p>"},{"location":"Reference/RPC/commandsRPC/#version","title":"version","text":"<p>Display the current version of RPC and the RPC Protocol version:</p> <pre><code>rpc version\n</code></pre>"},{"location":"Reference/RPC/libraryRPC/","title":"RPC Library","text":"<p>On the managed device, a Remote Provisioning Client (RPC) communicates with the Remote Provision Server (RPS) in the process of activating or deactivating the device. In addition to activation and deactivation, the RPC provides informational and maintenance commands. </p> <p>Find all RPC commands here.</p>"},{"location":"Reference/RPC/libraryRPC/#prerequisites","title":"Prerequisites","text":"<p>A GCC toolchain is required to compile RPC as a library.</p> LinuxWindows <p>Run the following command to install: <pre><code>sudo apt install build-essential\n</code></pre></p> <p>Download and Install tdm-gcc.</p>"},{"location":"Reference/RPC/libraryRPC/#build-library","title":"Build Library","text":"Linux Lib (.so file)Windows Lib (.dll file) <pre><code>go build -buildmode=c-shared -o librpc.so ./cmd \n</code></pre> <pre><code>go build -buildmode=c-shared -o rpc.dll ./cmd\n</code></pre>"},{"location":"Reference/RPC/libraryRPC/#library-functions","title":"Library Functions","text":"<p>The library contains two functions:</p> Function Description Usage checkAccess Determines if RPC is being run as admin, the ME driver is installed, and AMT is available. Use this function to check for basic AMT availability conditions. rpcExec Executes RPC commands. Use this function as you would the RPC executable, passing in arguments to activate, deactivate, perform maintenance, etc."},{"location":"Reference/RPC/libraryRPC/#sample-client-in-c","title":"Sample Client in <code>C#</code>","text":"<p>Find a simple sample client in the RPC-go's dotnet folder. </p>"},{"location":"Reference/RPC/libraryRPC/#include-in-c","title":"Include in <code>C#</code>","text":"<p>This sample code demonstrates how to import the DLL's functions:</p> <pre><code>    //Linux-style example (.so extension)\n    [DllImport(\"rpc\")]\n    static extern int rpcCheckAccess();\n</code></pre>"},{"location":"Reference/RPC/libraryRPC/#call-a-function","title":"Call a Function","text":"<p>This sample provides an example of calling the <code>rpcExec</code> function to activate a device:</p> <pre><code>    //Import\n    [DllImport(\"rpc\")]\n    static extern int rpcExec([In] byte[] rpccmd, ref IntPtr output);\n\n    int returnCode;\n\n    Console.WriteLine(\"... CALLING rpcCheckAccess ...\");\n    returnCode = rpcCheckAccess();\n    Console.WriteLine(\"... rpcCheckAccess completed: return code[\" + returnCode + \"] \");\n    Console.WriteLine();\n\n    var res = \"\";\n    foreach (var arg in args)\n    {\n        res += $\"{arg} \";\n    }\n\n    // Example commands to be passed in\n    // string res = \"activate -u wss://192.168.1.96/activate -n -profile Test_Profile\";\n    // string res = \"amtinfo\";\n\n    IntPtr output = IntPtr.Zero;\n    Console.WriteLine(\"... CALLING rpcExec with argument string: \" + res);\n    returnCode = rpcExec(Encoding.ASCII.GetBytes(res), ref output);\n    Console.WriteLine(\"... rpcExec completed: return code[\" + returnCode + \"] \" + Marshal.PtrToStringAnsi(output));\n</code></pre>"},{"location":"Reference/RPC/libraryRPC/#rpc-error-code-charts","title":"RPC Error Code Charts","text":""},{"location":"Reference/RPC/libraryRPC/#general-errors","title":"General Errors","text":""},{"location":"Reference/RPC/libraryRPC/#1-19-basic-errors-outside-of-open-amt-cloud-toolkit","title":"(1-19) Basic Errors Outside of Open AMT Cloud Toolkit","text":"Error Code Message 1 Incorrect permissions (not admin or sudo) 2 HECI driver not detected 3 AMT not detected 4 AMT not ready 10 Generic Failure"},{"location":"Reference/RPC/libraryRPC/#20-69-input-errors-to-rpc","title":"(20-69) Input errors to RPC","text":"Error Code Message 20 Missing or incorrect URL 21 Missing or incorrect profile 22 Server certificate verification failed 23 Missing or incorrect password 24 Missing DNS Suffix 25 Missing hostname 26 Missing proxy address and port 27 Missing static IP information 28 Incorrect Command Line Parameters 29 Missing or incorrect Network Mask 30 Missing or incorrect Gateway 31 Missing or incorrect Primary DNS 32 Missing or incorrect Secondary DNS 33 Invalid Parameter Combination 34 Failed Reading Configuration 35 Missing Or Invalid Configuration 36 Invalid User Input 37 Invalid UUID 38 Password do not match"},{"location":"Reference/RPC/libraryRPC/#70-99-connection-errors","title":"(70-99) Connection Errors","text":"Error Code Message 70 RPS authentication failed 71 AMT connection failed 72 OS network interfaces lookup failed"},{"location":"Reference/RPC/libraryRPC/#amt-specific-errors","title":"AMT-Specific Errors","text":""},{"location":"Reference/RPC/libraryRPC/#100-149-activation-and-configuration-errors","title":"(100-149) Activation and Configuration Errors","text":"Error Code Message 100 AMT authentication failed 101 WSMAN message error 102 Activation failed 103 Network configuration failed 104 CIRA configuration failed 105 TLS configuration failed 106 WiFi configuration failed 107 AMT features configuration failed 108 802.1x configuration failed 109 Unable to Deactivate 110 Deactivation Failed 111 Unable to Activate 112 Wifi Configuration succeeded with warnings 113 Unmarshal Message Failed 114 Delete Wifi Config Failed 116 Missing or incorrect Wifi Profile Name 117 Missing IEEE 802.1x Configuration 118 Set MEBx Password Failed 119 Change AMT Password Failed 110 Unable to Configure"},{"location":"Reference/RPC/libraryRPC/#150-199-maintenance-errors","title":"(150-199) Maintenance Errors","text":"Error Code Message 150 Clock synchronization failed 151 Hostname synchronization failed 152 IP synchronization failed 153 Change Password failed 154 Sync Device Info failed"},{"location":"Reference/RPC/libraryRPC/#1000-3000-amt-pt-status-code-block","title":"(1000-3000) AMT PT Status Code Block","text":"Error Code Message 1000 AMT Pt Status Code Base"},{"location":"Reference/RPC/transitionDeviceRPC/","title":"Transition Activated Device","text":"<p>If an Intel vPro\u00ae Platform has been previously activated, either in the BIOS or with another management solution or tool, it can be brought under Open AMT Cloud Toolkit control with the RPC-Go application. </p> <p>Additionally, use the following instructions to transition from a previously established toolkit stack to a fresh installation on a new development system.</p> <p>Note - Passwords used in Open AMT Cloud Toolkit</p> <p>Use the following instructions to transition devices to either ACM or CCM profiles. You will need the AMT password.</p> <p>Open AMT Cloud Toolkit increases security with multiple passwords. Find an explanation of toolkit passwords in Reference -&gt; Architecture Overview.</p> <p>To transition the activated device:</p> <ol> <li> <p>Check the activation status with <code>amtinfo</code> command:</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>sudo ./rpc amtinfo\n</code></pre> <pre><code>.\\rpc amtinfo\n</code></pre> <pre><code>sudo docker run --rm -it --device=/dev/mei0 rpc-go:latest amtinfo\n</code></pre> <p>The control mode indicates the managed device's state:</p> <ul> <li>pre-provisioning or deactivated</li> <li>activated in client control mode (CCM)</li> <li>activated in admin control mode (ACM)</li> </ul> </li> <li> <p>Run the rpc-go application with the <code>activate</code> command and the <code>-password</code> flag:</p> LinuxWindowsDocker (On Linux Host Only) <pre><code>sudo ./rpc activate -u wss://[Development-IP-Address]/activate -n -profile [profileName] -password [AMTPassword]\n</code></pre> <pre><code>.\\rpc activate -u wss://[Development-IP-Address]/activate -n -profile [profileName] -password [AMTPassword]\n</code></pre> <pre><code>sudo docker run --rm -it --device=/dev/mei0 rpc-go:latest activate -u wss://[Development-IP-Address]/activate -n -profile [profileName] -password [AMTPassword]\n</code></pre> <p>Success</p> <p>To verify the managed devices list after transitioning, log into the Sample Web UI on the development system. Go to the Devices tab. Alternatively, learn how to list the managed devices via a REST API Call. </p> </li> </ol>"},{"location":"Reference/RPS/configuration/","title":"Configuration","text":""},{"location":"Reference/RPS/configuration/#rps-configuration","title":"RPS Configuration","text":"<p>The <code>.env</code> variables set have priority and overwrite the corresponding <code>.rpsrc</code> variables.</p> <code>.env</code> Variable Name <code>.rpsrc</code> Variable Name Default Description RPS_WEBSOCKETTLS <code>true</code> Enable/disable TLS on Websocket Connection RPSWEBPORT web_port <code>8081</code> Web API port to listen on RPSWEBSOCKETPORT websocketport <code>8080</code> Websocket port to listen on RPS_LOG_LEVEL <code>info</code> Controls the level of logging provided in the service. Options are (in order of increasing detail): <code>error</code>, <code>warn</code>, <code>info</code>, <code>verbose</code>, <code>debug</code>, and <code>silly</code> RPS_DELAY_TIMER delay_timer <code>12</code> Sets the number of seconds to wait after activation but before proceeding with final steps. By default it is set to 12 seconds. During this waiting period, RPS sends heartbeats to RPC to keep the connection alive. RPS_MQTT_ADDRESS mqtt_address No Value Address of where the mqtt broker is hosted. Mqtt container is named <code>mosquitto</code> and is open to port <code>8883</code>. Thus unless setting are changed the value should be either empty (off) or <code>mqtt://mosquitto:8883</code> (on) RPS_SECRETS_PATH secrets_path <code>secret/data/</code> Path for where secrets are stored in the vault RPS_VAULT_ADDRESS vault_address <code>http://localhost:8200</code> Address of where the vault is hosted RPS_VAULT_TOKEN vault_token <code>myroot</code> Token used to access the vault RPS_DB_PROVIDER db_provider <code>postgres</code> Database provider used (<code>postgres</code>) RPS_SECRETS_PROVIDER secrets_provider <code>vault</code> Secret provider used (<code>vault</code>) RPS_CONNECTION_STRING connection_string <code>postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@localhost:5432/rpsdb</code> The database connection string RPS_CORS_ORIGIN cors_origin <code>http://localhost:4200</code> (NOT USED) Allowed origin for CORS policy RPS_CORS_HEADER cors_header <code>Origin, X-Requested-With, Accept, Content-Type, csrf-token, authorization</code> (NOT USED) Allowed headers RPS_CORS_METHODS cors_methods <code>*</code> (NOT USED) Allowed methods RPS_MPS_SERVER mps_server <code>http://localhost:3000</code> Specifies where the MPS is hosted -- required for metadata registration (i.e. hostname, and tags) RPS_DISABLE_CIRA_DOMAIN_NAME disable_cira_domain_name No Value When AMT is on a network that matches the specified domain name, CIRA is disabled. If not set, a random domain name is generated to ensure CIRA connection on any network. RPS_CONSUL_ENABLED consul_enabled <code>false</code> Enable/disable use of Consul for centralized configuration RPS_CONSUL_HOST consul_host <code>localhost</code> Address of where Consul is hosted RPS_CONSUL_PORT consul_port <code>8500</code> Consul Port to listen on RPS_CONSUL_KEY_PREFIX consul_key_prefix <code>RPS</code> Default prefix key for Consul data structure"},{"location":"Reference/RPS/createProfileTLSConfig/","title":"Create Profile with TLS","text":"<p>During the activation process with the Remote Provisioning Client (RPC), profiles provide configuration information to the firmware on platforms featuring Intel\u00ae AMT.</p> <p>In Profiles, the Open AMT Cloud Toolkit supports Client Initiated Remote Access (CIRA) connections, which use Transport Layer Security (TLS). The toolkit also supports TLS without CIRA. TLS connections encrypt Intel\u00ae AMT network traffic, increasing data security and privacy.</p> <p>Important</p> <ul> <li>TLS works with both ACM And CCM.</li> <li>Because CIRA connections already use TLS, the option to use both in a profile is not available, as it would double the amount of encryption/decryption and potentially impact performance.</li> </ul> <p>To create a profile with TLS Config:</p> <ol> <li> <p>Select the Profiles tab from the menu on the left.</p> </li> <li> <p>Under the Profiles tab, click + Add New in the top-right corner to create a profile.      Figure 1: Create a new profile </p> </li> <li> <p>Specify a Profile Name of your choice.</p> </li> <li> <p>Under Activation Mode, select either Client Control Mode or Admin Control Mode from the dropdown menu.</p> </li> <li> <p>Enable desired redirection features for the profile under AMT Features - Enable/Disable features. </p> </li> <li> <p>Provide or generate a strong AMT Password. AMT will verify this password when receiving a command from a MPS server. This password is also required for device deactivation.</p> <p>Tip</p> <p>The two buttons next to the password input are for toggling visibility and generating a new random password. Please note that if the Vault database is lost or corrupted, all credentials that aren't also stored somewhere else will be lost. There will be no way to login. The administrator will have to clear the CMOS battery on the managed devices!</p> </li> <li> <p>If choosing to activate into ACM, provide or generate a strong MEBX Password. This password can be used to access Intel\u00ae Manageability Engine BIOS Extensions (Intel\u00ae MEBX) on the AMT device.</p> </li> <li> <p>Leave DHCP as the default for Network Configuration.</p> </li> <li> <p>This express setup assumes the managed device (i.e. AMT device) is on a wired connection for quickest setup.  To learn more about a Wireless Setup, see the Wireless Activation Tutorial.</p> </li> <li> <p>Select Connection Configuration to TLS (Enterprise).</p> </li> <li> <p>Under TLS (Enterprise), select the TLS Mode from the dropdown menu. </p> <p>The toolkit offers two configuration modes: </p> CONFIGURATION MODE DESCRIPTION Server Authentication Only The client authenticates the server request and accepts only those servers with a digital certificate. Server and Non-TLS Authentication Used primarily for testing. The client authenticates the server request and accepts legitimate digital certificates from TLS-enabled servers. However, if the server is not TLS-enabled, the client defaults to a CIRA connection. </li> <li> <p>Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow.</p> </li> <li> <p>Click Save.</p> <p>Example profile with TLS Config</p> <p> Figure 2: Example profile with TLS Config </p> </li> <li> <p>To confirm the digital certificates generated for the profile, open a browser and navigate to the Vault service at:</p> <ul> <li>http://localhost:8200 for a local Docker deployment</li> <li>http://[Cloud-FQDN]:8200 (Ex: http://openamt.eastus.cloudapp.azure.com:8200) for a cloud deployment</li> </ul> </li> <li> <p>Sign in to Vault with the <code>VAULT_TOKEN</code> stored in the .env file or Root Token (Ex: hvs.QnhrbjXyH08UD7y6PHBDmjq9) generated when unsealing and initializing Vault in your cloud deployment.</p> <p> Figure 3: Login with the token </p> </li> <li> <p>Navigate to the path <code>secret/TLS/[profile name]</code> for a local dev mode Vault deployment. Or <code>kv/TLS/[profile name]</code> for a cloud deployment.</p> <p>Example of Certificate Storage</p> <p> Figure 4: Digital Certificate </p> </li> </ol>"},{"location":"Reference/RPS/createProfileTLSConfig/#next-up","title":"Next up","text":"<p>Build &amp; Run RPC</p>"},{"location":"Reference/RPS/securityRPS/","title":"RPS Security Considerations","text":"<p>The microservice Remote Provision Service (RPS) plays a component role in a larger set of services that makes up the device management software suite.  In this role, RPS uses and creates secrets that are required to be able to successfully activate and use Intel\u00ae AMT.  There are six key assets that must be protected:</p> <ul> <li>Remote admin password for Intel\u00ae AMT</li> <li>MEBX password for Intel\u00ae AMT</li> <li>Provisioning Certificate for each supported domain</li> <li>Password used to encrypt each Provisioning Certificate</li> <li>Device configuration information sent to Intel\u00ae AMT device</li> <li>MPS CIRA login credentials</li> </ul> <p>In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system.  The following sections will cover each asset and the recommended practices to use to protect the assets.</p>"},{"location":"Reference/RPS/securityRPS/#security-assets","title":"Security Assets","text":""},{"location":"Reference/RPS/securityRPS/#remote-admin-password-for-intel-amt","title":"Remote Admin Password for Intel\u00ae AMT","text":"<p>This password is what is configured in the Intel\u00ae AMT firmware that allows a remote user to remotely control the Intel\u00ae AMT device (power actions, remote desktop, remote terminal, etc).  When RPS activates an Intel\u00ae AMT device, it sets this password in the Intel\u00ae AMT firmware.  This password can either be statically set or can be randomly generated based on the profile defined by the user.  It is highly recommended to use randomly generated passwords as this will make each Intel\u00ae AMT device more secure by using unique passwords per device. In a default docker or Kubernetes deployment, RPS will save the Remote Admin Password to the deployed Vault instance.</p>"},{"location":"Reference/RPS/securityRPS/#mebx-password-for-intel-amt","title":"MEBX Password for Intel\u00ae AMT","text":"<p>The Management Engine BIOS Extension (MEBX) password is the password that protects the pre-boot menu option that provides access to Intel\u00ae AMT settings.  To use this password a user needs to have physical access to the device.  It is highly recommended to change this password from the factory default settings upon receiving a new Intel\u00ae AMT device.  A RPS profile provides an option for either specifying a static password that is used for all devices configured with a given profile or a randomly generated password can be assigned uniquely per device.  The MEBX password set in each device is saved in Vault. While a randomly generated password is more secure, in this case there is risk that if the Vault database is lost, access to the Intel\u00ae AMT device could be very difficult to recover.  It is recommended to use the high availability and backup options provided by the Vault solution to ensure that these secrets are not lost.</p>"},{"location":"Reference/RPS/securityRPS/#provisioning-certificate-for-each-supported-domain","title":"Provisioning Certificate for each supported domain","text":"<p>This certificate is unique per owned domain where RPS needs to provision Intel\u00ae AMT devices.  This certificate must be derived from a root certificate whose hash matches one of the trusted provisioning root certificate hashes that is listed in the Intel\u00ae AMT device firmware.  Generally, the provisioning certificate is purchased from a trusted certificate authority (VeriSign, GoDaddy, Comodo, etc).  The full list of supported CAs based on Intel\u00ae AMT version are listed here.  This certificate must contain the leaf certificate, root certificate, and all of the intermediate certificates to form a complete certificate chain.  Additionally, the certificate file must also include the private key for the certificate (.pfx format).  The leaf certificate for the provisioning certificate must match the domain suffix that the Intel\u00ae AMT device is connected as specified by DHCP option 15 or the Trusted DNS suffix in the Management Engine BIOS Extensions (MEBX).  Matching this is one of the ways in which the Intel\u00ae AMT firmware establishes trust with RPS.  The provisioning certificate is provided by the user when defining an Intel\u00ae AMT profile.  RPS fetches the Provisioning Certificate from Vault when it is needed to activate an Intel\u00ae AMT device.  If users have provisioning certificates, they will need to understand which profile to use when configuring an Intel\u00ae AMT device based on the network to which the device is currently connected.</p>"},{"location":"Reference/RPS/securityRPS/#password-used-to-encrypt-provisioning-certificate","title":"Password used to encrypt Provisioning Certificate","text":"<p>This is the password that is used to encrypt the provisioning certificate .pfx file that is discussed above.  RPS uses this password to decrypt the provisioning certificate so that it can use the certificate components and the private key to activate Intel\u00ae AMT devices. RPS fetches the password from Vault and will use it when it is needed to decrypt a provisioning certificate.</p>"},{"location":"Reference/RPS/securityRPS/#device-configuration-information-sent-to-intel-amt-device","title":"Device configuration information sent to Intel\u00ae AMT device","text":"<p>Intel\u00ae AMT firmware uses configuration information to establish trust and then activate the Intel\u00ae AMT device. The information contains the hashed remote admin password and MEBX password. Protect this information while it is being used by RPS and while in transit to the Intel\u00ae AMT device. Ensure that a secure (TLS-encrypted) WebSocket is used when RPS is communicating with the client device. This will protect data in transit. The configuration information uses nonces to prevent replay of this data.</p>"},{"location":"Reference/RPS/securityRPS/#mps-cira-login-credentials","title":"MPS CIRA Login Credentials","text":"<p>To connect to the MPS over a CIRA connection, the Intel\u00ae AMT device needs to provide the correct login credentials for MPS. These credentials are specified as part of the AMT Profile created in RPS. When a device is configured by RPS, the MPS CIRA credentials will be sent to MPS using the Devices POST API call where MPS will then store the credentials. These credentials are verfied by the MPS when the CIRA connection is established.</p>"},{"location":"Reference/RPS/securityRPS/#best-known-security-methods","title":"Best Known Security Methods","text":""},{"location":"Reference/RPS/securityRPS/#1-enable-tls-on-network-connections","title":"1 Enable TLS on network connections","text":"<p>There are two potential places where TLS could be enable to protect the security assets: * WebSocket connection between RPS and Intel\u00ae AMT client (recommended) * Connection between RPS and Vault - If communication between RPS and Vault is outside a secure container environment (not recommended deployment, see item 2 below)</p> <p>Securing these communication routes will help prevent security assets being exposed through network based attacks intercepting messages between components. It is recommended that the most modern version of TLS be used when encrypting communication.</p>"},{"location":"Reference/RPS/securityRPS/#2-secure-and-isolate-execution-environment","title":"2 Secure and isolate execution environment","text":"<p>RPS holds several of the described security assets in memory during execution.  In order to protect these assets while in the memory of RPS, it is recommended that RPS be run in a secure execution environment such as a dedicated container. Deploying into a secure container environment eases the burden of individually securing the assets while in memory or in transit between Open AMT Cloud Toolkit services.  Running MPS, RPS, API Gateway, MPS Router, Vault, and Database all within the same secure container instance will help ensure that the communication between these services remains secure.</p>"},{"location":"Reference/RPS/securityRPS/#3-utilize-a-hashicorp-vault-implementation-to-store-security-assets","title":"3 Utilize a Hashicorp Vault implementation to store security assets","text":"<p>Utilizing Hashicorp Vault to store security assets either created by or used by RPS will greatly increase the security of these assets.  Not only does Vault encrypt the data at rest, but it also manages access to the data itself.  As the Vault owner, you decide who gets access to the security assets stored there, not RPS.</p>"},{"location":"Reference/UIToolkit/localization/","title":"Localization","text":""},{"location":"Reference/UIToolkit/localization/#localize-strings","title":"Localize Strings","text":"<ol> <li> <p>Create a new directory in the <code>ui-toolkit/public/locales/</code> directory.  The directory name must match one of the codes listed.</p> </li> <li> <p>Copy the translation.json file in the <code>public/locales/en/</code> directory to the new language directory. </p> </li> <li> <p>Customize the required fields in the translation.json file. </p> <p>Example</p> <p>To support Kannada language:</p> <ol> <li>Create a new directory <code>kn</code> in <code>/public/locales/</code></li> <li>Copy translation.json from <code>/locales/en/</code> to <code>/locales/kn/</code> directory</li> <li>Update key-values in /kn/translation.json according to Kannada language</li> </ol> </li> <li> <p>Open the i18n.ts file in the <code>ui-toolkit</code> directory.</p> </li> <li> <p>Modify the file to import the newly added public/locales/Language/translation.json file and update the 'resources' constant to include the new translation. </p> <p>Example</p> <p>To support Kannada language:</p> <ol> <li>Create new import statement as 'translationKN'</li> <li>Edit resources constant to include new translation</li> </ol> <pre><code>import translationEN from './public/locales/en/translation.json'\nimport translationKN from './public/locales/kn/translation.json';\nconst resources = {\n  en: {\n    translations: translationEN\n  },\n  kn: {\n    translations: translationKN\n  }\n};\n</code></pre> <p>Rebuild and generate a new bundle before testing the changes.</p> </li> </ol> <p>Language can be changed in the browser under language section of the browser settings. English is the default if no customized translation file provided for the language.</p>"},{"location":"Reference/UIToolkit/localization/#get-localized-strings-for-web-consoles-with-localization-enabled","title":"Get Localized Strings for Web Consoles with Localization Enabled","text":"<p>If your web console already has localization enabled, make sure to add the translations of the UI-controls into your web console's translations file.</p>"},{"location":"Reference/UIToolkit/webpackConfig/","title":"Webpack Configuration","text":"<p>To use Webpack*, understand its Core Concepts:</p> <ul> <li> <p>Entry: The entry point such as <code>/src/index.js</code>, which is the default for Webpack 4 is what Webpack will use to start building out/resolving its dependencies.</p> </li> <li> <p>Output: The output property, such as <code>./dist</code>, the default for Webpack 4, tells Webpack where to output the bundles it creates and how to name them.</p> </li> <li> <p>Loaders: Because Webpack only understands native Javascript code, these loaders enable Webpack to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have two properties in the configuration file:</p> <ul> <li>The test property identifies the file or files that should be transformed</li> <li>The use property indicates the loader that can be used to do the transforming</li> </ul> </li> <li>Plugins: The plugins enable the extension of Webpack capabilities to perform a wider range of tasks like bundle optimization, asset management, and injection of environment variables. </li> </ul>"},{"location":"Reference/UIToolkit/webpackConfig/#install-webpack","title":"Install Webpack","text":"<p>Install both webpack and webpack cli as dev dependencies:</p> <pre><code>npm i webpack webpack-cli -D webpack-dev-server .\n</code></pre>"},{"location":"Reference/UIToolkit/webpackConfig/#configure-webpack-for-the-development-environment","title":"Configure Webpack for the Development Environment","text":"<p>To configure:</p> <ol> <li> <p>Create a Webpack config file <code>webpack.config.dev.js</code> in the root of the project folder. </p> </li> <li> <p>Add the development environment to the  <code>webpack.config.dev.js</code> file:**</p> </li> </ol> <pre><code>const path = require('path');\nmodule.exports = {\n     mode: \"development\",\n     entry: './src/reactjs/components/KVM/index.tsx', // entry points can be multiple\n\n}\n</code></pre>"},{"location":"Reference/UIToolkit/webpackConfig/#add-typescript","title":"Add Typescript","text":"<p>The example code below resolves the file extensions, .tsx, .ts and .js. Files with the extensions .tsx or .ts are processed by awesome-typescript-loader.</p> <p>To add Typescript support:</p> <ol> <li>Install the Typescript dependency, awesome-typescript-loader:</li> </ol> <p><pre><code>npm i awesome-typescript-loader -D\n</code></pre> 2. Add the configuration to the <code>webpack.config.dev.js</code> file:</p> <p>Example:  <pre><code>const path = require('path');\nmodule.exports = {\n ....\nresolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"]\n  },\n  module: {\n    rules: [\n      { \n        test: /\\.tsx?$/, \n        loader: 'awesome-typescript-loader'\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"Reference/UIToolkit/webpackConfig/#add-styles","title":"Add Styles","text":"<p>To Add Styles support:</p> <ol> <li>Use npm to install css-loader and sass-loader: <pre><code>npm i style-loader css-loader sass-loader -D\n</code></pre></li> <li>Add the configuration to the <code>webpack.config.dev.js</code> file:</li> </ol> <pre><code>module.exports = {\n ....\n\n  module: {\n    rules: [\n        ...\n       {\n        test: /\\.(sc|sa|c)ss$/,\n        use: ['style-loader', 'css-loader', 'sass-loader'],\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"Reference/UIToolkit/webpackConfig/#add-html","title":"Add HTML","text":"<p>To add HTML support:</p> <ol> <li> <p>Use the Webpack plugin html-webpack-plugin, which helps simplify the creation of HTML files to help serve our Webpack bundles: <pre><code>npm i html-webpack-plugin -D.\n</code></pre></p> </li> <li> <p>Add the configuration to the <code>webpack.config.dev.js</code> file:</p> </li> </ol> <pre><code>const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n ....\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: \"kvm.htm\",\n      template: \"./src/sample/sampleKVM.htm\",\n      inject: true,\n      chunks: [\"kvm\"],\n    }),\n  ]\n}\n</code></pre>"},{"location":"Reference/UIToolkit/webpackConfig/#development-server","title":"Development Server","text":"<p>Set up a development server using the webpack-dev-server. This server opens a default browser upon npm start and provide us with live reloading.</p> <pre><code>npm i webpack-dev-server --D\n</code></pre>"},{"location":"Reference/UIToolkit/webpackConfig/#update-packagejson","title":"Update Package.json","text":"<p>Add webpack-dev-server to the <code>Package.json</code> file:</p> <pre><code>\"scripts\": { \n  \"start\": \"webpack-dev-server --config webpack.config.dev.js\"\n}\n</code></pre> <p>Example</p> <p>Sample usage:</p> <ol> <li>Open command prompt.</li> <li>Run npm start command.</li> </ol>"},{"location":"Reference/UIToolkit/webpackConfig/#configure-webpack-for-production-environment","title":"Configure Webpack for Production Environment","text":"<p>To add production environment support:</p> <ol> <li> <p>Create a Webpack config file <code>webpack.config.prod.js</code> in the root of our project folder.</p> </li> <li> <p>Add the configuration to the <code>webpack.config.prod.js</code> file: </p> </li> </ol> <p><pre><code>const path = require('path');\n\nmodule.exports = {\n     mode: \"production\",\n     entry: './src/reactjs/components/KVM/index.tsx', // entry points can be multiple\n    output: {\n        filename: \"[name].min.js\",\n        path: path.resolve(__dirname, \"./dist\")\n    },\n  ....\n}\n</code></pre> 3. Update Package.json:</p> <pre><code>\"scripts\": { \n \"build\": \"webpack --config webpack.config.prod.js\",\n}\n</code></pre> <p>Example</p> <p>Sample usage:</p> <ol> <li>Open command prompt.</li> <li>Run npm run build.</li> </ol>"},{"location":"Reference/UIToolkit/webpackConfig/#configure-webpack-for-external-environment","title":"Configure Webpack for External Environment","text":"<p>Create a Webpack config file <code>webpack.config.externals.js</code> in the root of our project folder.</p> <p>Add webpack-node-externals:</p> <ol> <li>Install webpack-node-externals dependencies: <pre><code> npm install webpack-node-externals -D\n</code></pre></li> <li>The webpack-node-externals library creates an externals function that ignores node_modules when bundling in Webpack. Add the following to <code>webpack.config.externals.js</code>:</li> </ol> <p><pre><code> const path = require(\"path\"); //No ES6 in webpack config \n const nodeExternals = require('webpack-node-externals');\n\nmodule.exports = {\n   ....\n  externals: [nodeExternals()],\n\n};\n</code></pre> 3. Update Package.json:</p> <pre><code>\"scripts\": { \n \"build-ext\": \"webpack --config webpack.config.externals.js\",\n}\n</code></pre> <p>Example</p> <p>Sample usage:</p> <ol> <li>Open command prompt.</li> <li>Run npm run build-ext command.</li> </ol>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/","title":"Quickstart - Bundle Keyboard Video Mouse (KVM) Control","text":"<p>Use these instructions to:</p> <ul> <li>Run the KVM control in development environment</li> <li>Create a bundle for KVM control</li> <li>Add bundle to a sample HTML file </li> </ul>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/#prerequisites","title":"Prerequisites","text":"<p>In order to deploy and make changes, the following tools and application has to be installed on your development machine:</p> <ul> <li>Git</li> <li>Visual Studio Code or any other IDE </li> <li>Node.js</li> <li>Chrome* Browser</li> <li>MPS Server with an AMT Device Connected</li> </ul>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/#download-and-install-ui-toolkit","title":"Download and Install UI Toolkit","text":"<ol> <li> <p>Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development.</p> </li> <li> <p>Clone the UI Toolkit Repository:     <pre><code>git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit --branch v3.2.7\n</code></pre></p> </li> <li> <p>Change to the <code>ui-toolkit</code> directory:     <pre><code>cd ui_toolkit\n</code></pre></p> </li> <li> <p>Install the dependencies:     <pre><code>npm install\n</code></pre></p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/#run-in-development-environment","title":"Run in Development Environment","text":"<p>To add and test new changes before bundling the control, use a webpack dev server:</p> <ol> <li> <p>Start the server:     <pre><code>npm start\n</code></pre></p> </li> <li> <p>Open a Chrome* browser and navigate to the following link to see changes:     <pre><code>http://localhost:8080/kvm.htm?deviceId=[AMT-Device-GUID]&amp;mpsServer=https://[MPS-Server-IP-Address]:3000\n</code></pre></p> <p>Note</p> <p>By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.</p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/#create-bundle","title":"Create Bundle","text":"<ol> <li> <p>To bundle, navigate to the <code>ui-toolkit</code> directory in a Terminal (Linux) or Command Prompt (Windows).</p> </li> <li> <p>Remove or rename the existing kvm.min.js  in the <code>ui-toolkit/dist/</code> directory before building.</p> </li> <li> <p>Build the bundle:     <pre><code>npm run build\n</code></pre></p> <p>A new kvm.min.js will be created in the <code>ui-toolkit/dist/</code> directory.</p> <p>Note</p> <p>To bundle the KVM control without node_modules, run the following build command instead. <pre><code>npm run built-ext\n</code></pre> The bundle generated using the build-ext command can be used in react apps as an independent control</p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/kvmReact/#add-to-sample-html-page","title":"Add to Sample HTML Page","text":"<ol> <li> <p>Add the following code snippet to sampleKVM.htm in the <code>ui-toolkit/src/reactjs/sample/</code> directory using an editor of your choice:</p> <pre><code>&lt;body&gt;\n  &lt;div id=\"kvm\"&gt;&lt;/div&gt;\n  &lt;script src=\"../../dist/kvm.min.js\" crossorigin&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> </li> <li> <p>In a Terminal (Linux) or Command Prompt (Windows), navigate to the <code>ui-toolkit</code> directory.</p> </li> <li> <p>Serve the HTML page:     <pre><code>npx serve\n</code></pre></p> </li> <li> <p>Open a new Chrome* browser and navigate to the following URL:     <pre><code>http://localhost:5000/src/sample/sampleKVM.htm?deviceId=[AMT-Device-GUID]&amp;mpsServer=https://[MPS-Server-IP-Address]:3000\n</code></pre></p> </li> </ol> <p>Errors may occur in the following scenarios: </p> <ul> <li>UI-toolkit was not downloaded and installed into your react app</li> <li>MPS Server is not running</li> <li>MPS Server is running but the device is not connected</li> </ul>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/","title":"Quickstart  - Bundle Serial Over LAN (SOL) Control","text":"<p>Use these instructions to:</p> <ul> <li>Run the SOL control in development environment</li> <li>Create a bundle for SOL control</li> <li>Add bundle to a sample HTML file</li> </ul>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/#prerequisites","title":"Prerequisites","text":"<p>In order to deploy and make changes, the following tools and application have to be installed on your development system:</p> <ul> <li>Git</li> <li>Visual Studio Code or any other IDE </li> <li>Node.js</li> <li>Chrome* Browser</li> <li>MPS Server with an AMT Device Connected</li> </ul>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/#download-and-install-ui-toolkit","title":"Download and Install UI Toolkit","text":"<ol> <li> <p>Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development.</p> </li> <li> <p>Clone the UI-Toolkit Repository:     <pre><code>git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit --branch v3.2.7\n</code></pre></p> </li> <li> <p>Change to the <code>ui-toolkit</code> directory:     <pre><code>cd ui_toolkit\n</code></pre></p> </li> <li> <p>Install the dependencies:     <pre><code>npm install\n</code></pre></p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/#run-in-development-environment","title":"Run in Development Environment","text":"<p>To add and test new changes before bundling the control, use a webpack dev server.</p> <ol> <li> <p>Start the server:     <pre><code>npm start\n</code></pre></p> </li> <li> <p>Open a Chrome* browser and navigate to the following link to see changes:     <pre><code>http://localhost:8080/sol.htm?deviceId=[AMT-Device-GUID]&amp;mpsServer=https://[MPS-Server-IP-Address]:3000\n</code></pre></p> <p>Note</p> <p>By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.</p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/#create-bundle","title":"Create Bundle","text":"<ol> <li> <p>To bundle, navigate to the <code>ui-toolkit</code> directory in a Terminal (Linux) or Command Prompt (Windows).</p> </li> <li> <p>Remove or rename the existing sol.min.js  in the <code>ui-toolkit/dist/</code> directory before building:</p> </li> <li> <p>Build the bundle:     <pre><code>npm run build\n</code></pre></p> <p>A new kvm.core.min.js will be created in the <code>ui-toolkit/dist/</code> directory.</p> <p>Note</p> <p>To bundle the Serial-Over-LAN control without node_modules, run the following build command instead. <pre><code>npm run built-ext\n</code></pre> The bundle generated using the build-ext command can be used in react apps as an independent control</p> </li> </ol>"},{"location":"Reference/UIToolkit/Bundles/serialOverLANReact/#add-to-sample-html-page","title":"Add to Sample HTML Page","text":"<ol> <li> <p>Add the following code snippet to sampleSOL.htm in the <code>ui-toolkit/src/sample/</code> directory using an editor of your choice:</p> <pre><code>&lt;body&gt;\n  &lt;div id=\"sol\"&gt;&lt;/div&gt;\n  &lt;script src=\"../../dist/sol.min.js\" crossorigin&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> </li> <li> <p>In a Terminal (Linux) or Command Prompt (Windows), navigate to the <code>ui-toolkit</code> directory:</p> </li> <li> <p>Serve the HTML page.     <pre><code>npx serve\n</code></pre></p> </li> <li> <p>Open a new Chrome* browser and navigate to the following URL:     <pre><code>http://localhost:5000/src/sample/sampleSOL.htm?deviceId=[AMT-Device-GUID]&amp;mpsServer=https://[MPS-Server-IP-Address]:3000\n</code></pre></p> </li> </ol> <p>Errors may occur in the following scenarios:  </p> <ul> <li>UI-toolkit was not downloaded and installed into your react app</li> <li>MPS Server is not running</li> <li>MPS Server is running but the device is not connected</li> </ul>"},{"location":"Reference/UIToolkit/Controls/kvmControl/","title":"Keyboard, Video, Mouse","text":"<p>Not sure how to implement Keyboard, Video Mouse (KVM)? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough prerequisites and instructions for implementing a React Control using the UI Toolkit.</p>"},{"location":"Reference/UIToolkit/Controls/kvmControl/#add-kvm-control","title":"Add KVM Control","text":"<p>Use the following code snippet to add the KVM control to the React Application. Open <code>src/App.js</code> and add the code shown below:</p> <p>Note</p> <p>Change <code>deviceId</code> value to your device GUID, <code>mpsServer</code> value to your MPS server address, and pass in a valid JWT  for <code>authToken</code>.</p> <pre><code>    import React from \"react\";\n    import \"./App.css\";\n    import { KVM } from \"@open-amt-cloud-toolkit/ui-toolkit-react/reactjs/src/kvm.bundle\";\n\n    function App() {\n        return (\n            &lt;div className=\"App\"&gt;\n                &lt;KVM deviceId=\"038d0240-045c-05f4-7706-980700080009\" //Replace with AMT Device GUID\n                mpsServer=\"https://localhost/mps/ws/relay\" //Replace 'localhost' with Development System or MPS Server IP Address\n                mouseDebounceTime=\"200\"\n                authToken=\"\" // Replace with a valid JWT provided during login of MPS\n                canvasHeight=\"100%\"\n                canvasWidth=\"100%\"&gt;&lt;/KVM&gt;\n            &lt;/div&gt;\n        );\n    }\n\nexport default App;\n</code></pre>"},{"location":"Reference/UIToolkit/Controls/serialOverLANControl/","title":"Serial Over LAN","text":"<p>Not sure how to implement Serial Over LAN (SOL)? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough of the prerequisites and instructions for implementing a React Control using the UI Toolkit.</p>"},{"location":"Reference/UIToolkit/Controls/serialOverLANControl/#add-serial-over-lan-sol-control","title":"Add Serial Over LAN (SOL) Control","text":"<p>Use the following code snippet to add the SOL control to the React Application. Open <code>src/App.js</code> and add the code shown below:</p> <p>Note</p> <p>Change <code>deviceId</code> value to your device GUID, <code>mpsServer</code> value to your MPS server address, and pass in a valid JWT  for <code>authToken</code>.</p> <pre><code>import React from \"react\";\nimport { Sol } from \"@open-amt-cloud-toolkit/ui-toolkit-react/reactjs/src/sol.bundle\";\n\nfunction App() {\n  return (\n    &lt;div&gt;\n        &lt;Sol deviceId=\"038d0240-045c-05f4-7706-980700080009\"//Replace with AMT Device GUID\n        mpsServer=\"https://localhost/mps/ws\" //Replace 'localhost' with Development System or MPS Server IP Address\n        authToken=\"\"&gt; // Replace with a valid JWT provided during login of MPS\n        &lt;/Sol&gt;\n    &lt;/div&gt;\n  );\n}\n\u200b\nexport default App;\n</code></pre>"},{"location":"Tutorials/apiTutorial/","title":"REST API Call","text":"<p>This tutorial demonstrates how to generate a JSON Web Token (JWT) for Authorization and construct an API call for Getting Devices using curl. This method will retrieve information about all devices, including device GUIDs.</p> Figure 1: Tutorial flow using curl <p>Figure 1: API Call to Get All Devices</p> <p>Figure 1 illustrates the flow of the tutorial below. </p> <p>Consult the API documentation for the MPS APIs (Steps A and C). Use the generated JWT, the return value from the Authorize method in Step B, with any of the MPS REST API methods that require a BearerAuth, an HTTP security scheme that provides access to the bearer of a token. The GetDevices method accepts the JWT as an authentication and returns a list of devices and associated data.</p> <p>Important</p> <p>Successfully deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) and connect an Intel\u00ae vPro device to MPS before constructing the API call. Start here* to install microservices locally with Docker.</p>"},{"location":"Tutorials/apiTutorial/#what-youll-need","title":"What You'll Need","text":"<p>Hardware</p> <p>A minimum network configuration must include:</p> <ul> <li>A Development system with Windows\u00ae 10 or Ubuntu 18.04 or newer</li> <li>An Activated and Configured Intel\u00ae vPro device as the managed device</li> </ul> <p>Software on the Development System </p> <ul> <li>MPS</li> <li>curl</li> <li>Any Text Editor</li> </ul>"},{"location":"Tutorials/apiTutorial/#what-youll-do","title":"What You'll Do","text":"<p>The following sections describe how to:</p> <ul> <li>Generate a new JWT for Authorization</li> <li>Run an API Call to MPS for Devices</li> <li>See Other Example GET/POST Commands</li> </ul>"},{"location":"Tutorials/apiTutorial/#generate-a-token-for-authorization","title":"Generate a Token for Authorization","text":"<p>See the Authorize Method in the API Documentation for more information.</p> <ol> <li>Open a Terminal or Command Prompt.</li> <li>Copy and paste the example code below into a text editor.</li> <li> <p>Update the values of the <code>[IP-Address or FQDN]</code>, <code>[MPS_WEB_ADMIN_USER]</code>, and <code>[MPS_WEB_ADMIN_PASSWORD]</code> fields.</p> <pre><code>curl --insecure -X POST https://[IP-Address or FQDN]/mps/login/api/v1/authorize \\\n    -H \"Content-Type:application/json\" \\\n    -d \"{\\\"username\\\":\\\"[MPS_WEB_ADMIN_USER]\\\", \\\"password\\\":\\\" [MPS_WEB_ADMIN_PASSWORD]\\\"}\"\n</code></pre> <p>Info - Using the --insecure Flag</p> <p>Because we are using self-signed certificates for MPS for development and testing purposes, we must supply this flag to bypass SSL certificate verification.</p> </li> <li> <p>Run the command.</p> <p>Example - Response of Authorize Method</p> <pre><code>{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyMDE2OTg2NH0.GUib9sq0RWRLqJ7JpNNlj2AluuROLICCfdZaQzyWy90\"}\n</code></pre> </li> <li> <p>This token will be used when making any other API call as part of the Authorization header. </p> </li> </ol>"},{"location":"Tutorials/apiTutorial/#run-api-call-for-get-devices","title":"Run API Call for Get Devices","text":"<p>See the GetDevices Method in the API Documentation for more information.</p> <ol> <li>Open a Terminal or Command Prompt.</li> <li>Copy and paste the example code below into a text editor.</li> <li> <p>Update the values of the <code>[IP-Address or FQDN]</code> and <code>[JWT-Token]</code> fields.</p> <pre><code>curl --insecure https://[IP-Address or FQDN]/mps/api/v1/devices \\\n    -H \"Authorization: Bearer [JWT-Token]\"\n</code></pre> </li> <li> <p>Run the command.</p> <p>Example - Response of Devices Method</p> <p>Example Terminal Output:</p> <p><pre><code>[{\"guid\":\"3beae094-34f8-11ea-b6f5-ffed08129200\",\"hostname\":\"vpro3-NUC8v5PNK\",\"tags\":[],\"mpsInstance\":\"mps\",\"connectionStatus\":true,\"mpsusername\":\"admin\"}]\n</code></pre> Example JSON Pretty Print:</p> <pre><code>[\n    {\n        \"guid\": \"3beae094-34f8-11ea-b6f5-ffed08129200\",\n        \"hostname\": \"vpro3-NUC8v5PNK\",\n        \"tags\": [],\n        \"mpsInstance\": \"mps\",\n        \"connectionStatus\": true,\n        \"mpsusername\": \"admin\"\n    }\n]\n</code></pre> <p>Important</p> <p>This is one way to retrieve a device's GUID in the host field.  For amt path methods (i.e., Power Actions, Audit Logs, etc), the device GUID is required as part of the GET path. Save this value if you want to try other MPS methods. Other ways to retrieve a GUID can be found here.</p> </li> </ol>"},{"location":"Tutorials/apiTutorial/#example-getpost-templates","title":"Example GET/POST Templates","text":"<p>The sample GET and POST curl commands below can be adapted for other MPS and RPS methods by changing the URL path and modifying the request body data, if applicable.</p> Power Capabilities (GET Template)Power Action (POST Template) <p><pre><code>curl --insecure https://[IP-Address or FQDN]/mps/api/v1/amt/powercapabilities/[AMT-Device-GUID] \\\n    -H \"Authorization: Bearer [JWT-Token]\"\n</code></pre> See Power Capabilities API Docs for more information and expected responses.</p> <p><pre><code>curl --insecure -X POST https://[IP-Address or FQDN]/mps/api/v1/amt/power/action/[AMT-Device-GUID] \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer [JWT-Token]\" \\\n    -d \"{\\\"action\\\": [Power-Action], \\\"useSOL\\\": false}\"\n</code></pre> See Power Action API Docs for more information and expected responses.</p>"},{"location":"Tutorials/apiTutorial/#other-methods","title":"Other Methods","text":"<p>For MPS methods to manage a device, see: </p> <p>MPS API Docs</p> <p>For RPS Methods for server configuration and provisioning, see</p> <p>RPS API Docs</p>"},{"location":"Tutorials/apiTutorial/#explore-the-ui-toolkit","title":"Explore the UI Toolkit","text":"<p>In addition to REST API calls, the Open AMT Cloud Toolkit provides a reference implementation console. Add manageability features to the console with prebuilt React components, such as Keyboard, Video, and Mouse (KVM).</p> <p>Get Started with the UI Toolkit</p>"},{"location":"Tutorials/createWiFiConfig/","title":"Wireless Activation","text":"<p>Important - Windows 10 or Newer Supported Only</p> <p>This feature is currently only supported for systems on Windows 10 or newer (including Windows 11) operating systems. Wireless on Linux is not currently supported by Intel AMT.</p> <p>Warning - Support for Cellular</p> <p>While Open AMT Cloud Toolkit supports wireless and wired profiles, it does not currently offer support for managing devices through cellular connections. Products like Cradlepoint* offer a workaround for cellular connections.</p> <p>After activation and configuration of an AMT device with a wireless profile, remote devices can be managed wirelessly.</p> <p>For devices to be activated in Client Control Mode (CCM): The managed AMT device can be activated and configured on a wireless connection.</p> <p>For devices to be activated in Admin Control Mode (ACM): The managed AMT device MUST have a wired connection during the activation of AMT. After activation, devices are then able to be managed over the wireless network rather than a wired connection.</p> <p>Use RPC's <code>amtinfo</code> feature to determine if your current device supports wireless functionality. For steps to obtain the RPC binary, see Build RPC.</p> <ol> <li>Run RPC with the <code>amtinfo</code> argument.</li> </ol> <pre><code>rpc amtinfo\n</code></pre> <ol> <li> <p>Look at the output for the LAN Interface section as highlighted below. If RPC does NOT return a section for wireless, the AMT device does not support wireless functionality. </p> <pre><code>Version                : 15.0.10\nBuild Number           : 1447\nSKU                    : 16392\nUUID                   : 4c4b4568-195a-4260-8097-a4c14f566733\nControl Mode           : pre-provisioning state\nDNS Suffix             : vprodemo.com\nDNS Suffix (OS)        :\nHostname (OS)          : DESKTOP-3YM6MPN\nRAS Network            : outside enterprise\nRAS Remote Status      : not connected\nRAS Trigger            : user initiated\nRAS MPS Hostname       :\n---Wired Adapter---\nDHCP Enabled           : true\nDHCP Mode              : passive\nLink Status            : up\nAMT IP Address         : 0.0.0.0\nOS IP Address          : 192.168.1.90\nMAC Address            : 80:c4:a8:58:df:e9\n---Wireless Adapter---\nDHCP Enabled           : true\nDHCP Mode              : passive\nLink Status            : down\nAMT IP Address         : 0.0.0.0\nOS IP Address          : 192.168.1.90\nMAC Address            : 00:00:00:00:00:00\nCertificate Hashes     : \n...\n</code></pre> </li> </ol>"},{"location":"Tutorials/createWiFiConfig/#create-a-wifi-config","title":"Create a WiFi Config","text":"<ol> <li> <p>Select the Wireless tab from the left-hand menu.</p> </li> <li> <p>In the top-right corner, click Add New.</p> <p> Figure 1: Create a new WiFi Config </p> </li> <li> <p>Specify a Wireless Profile Name of your choice.</p> </li> <li> <p>Under Authentication Method, select WPA PSK or WPA2 PSK.</p> </li> <li> <p>Provide the PSK Passphrase. This is the password to the WiFi Network.</p> </li> <li> <p>Under Encryption Method, select TKIP or CCMP.</p> </li> <li> <p>Specify the SSID. This is the name of your wireless network.</p> </li> <li> <p>Click Save.</p> <p>Example Wireless Profile</p> <p> Figure 1: Example wireless profile </p> </li> <li> <p>Important: After saving, continue on to create either a CCM or ACM profile. When prompted, search for and select your new Wireless Profile from the drop-down menu. The selected Wi-Fi Profiles will be shown under Associated Wireless Profiles and can be reordered by dragging them to give priority.</p> <p>Example - Select Wireless Profile</p> <p> Figure 3: RPS bottom of profile </p> </li> </ol>"},{"location":"Tutorials/createWiFiConfig/#next-up","title":"Next up","text":"<p>Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: </p> <p>Client Control Mode (CCM): This mode offers all manageability features, including but not limited to, power control, audit logs, and hardware info. Redirection features, such as KVM or SOL, require user consent. The managed device will display a 6-digit code that must be entered by the remote admin to access the remote device via redirection.</p> <p>Create a CCM Profile</p> <p>Admin Control Mode (ACM): ACM mode supports all manageability features without requiring user consent. This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices, such as digital signage or kiosks, may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.</p> <p>Create an ACM Profile</p>"},{"location":"Tutorials/ideRedirection/","title":"IDE-Redirection (IDER)","text":"<p>Note - Support for User Consent</p> <p>Currently, the implementation of IDER in Open AMT does not support User Consent. In order to use IDER, the device must be activated in ACM. To see when support for User Consent will be added, follow our Github Backlog.</p> <p>IDE-Redirection (IDER) allows a trusted administrator to remotely mount disk images on an Intel AMT computer over the network. The device can then reboot using this image to perform tasks such as:</p> <ul> <li>Computer Recovery</li> <li>OS Re-installation</li> <li>Virus Scanning and more</li> </ul> <p>To have the best performance, it is recommended to perform a Two-Stage recovery process.</p> <ul> <li>Stage 1: Load a minimal OS kernel initially through IDER</li> <li>Stage 2: Retrieve full OS from Windows Share, HTTP, iSCSI, etc</li> </ul> IDE Redirection Tutorial Video: Follow along to learn more about IDER, its use cases, and how to use it."},{"location":"Tutorials/ideRedirection/#what-youll-need","title":"What You'll Need","text":"<p>Hardware</p> <p>A minimum network configuration must include:</p> <ul> <li>A Development system with Windows\u00ae 10 or Ubuntu 22.04 or newer</li> <li>An Activated and Configured Intel\u00ae vPro device as the managed device</li> </ul> <p>Software on the Development System </p> <ul> <li>MPS and Sample Web UI</li> <li> <p>An <code>.iso</code> File (netboot.xyz is used in this guide as a demonstration. Custom images can be used.)</p> <p>Note</p> <p>For instructions to setup the MPS and RPS servers to connect a managed device, see the Get Started Guide</p> </li> </ul>"},{"location":"Tutorials/ideRedirection/#what-youll-do","title":"What You'll Do","text":"<p>The following sections describe how to:</p> <ul> <li>Start an IDER session</li> <li>Remote Mount an ISO</li> <li>Reimage the AMT Device</li> </ul>"},{"location":"Tutorials/ideRedirection/#start-an-ider-session","title":"Start an IDER Session","text":"<ol> <li> <p>In the Sample Web UI, navigate to the Devices page.</p> </li> <li> <p>Select the device to reimage.</p> </li> <li> <p>Start a KVM session.</p> </li> <li> <p>Click Attach Disk Image (.iso) button in the upper-right corner.</p> <p> Figure 1: Start IDER Session </p> </li> </ol>"},{"location":"Tutorials/ideRedirection/#remote-mount-an-iso","title":"Remote Mount an ISO","text":"<ol> <li> <p>Select the <code>.iso</code> file to mount to the AMT device.</p> <p> Figure 2: Choose .iso File </p> </li> <li> <p>After uploading the <code>.iso</code> file, MPS will start to transfer and mount the image to the AMT device. </p> </li> <li> <p>To verify the image was successfully mounted, view the available mounted drives on the AMT device. When the mount is listed, it is ready.</p> <p> Figure 3: View Mounted Drives </p> </li> </ol>"},{"location":"Tutorials/ideRedirection/#reimage-the-device","title":"Reimage the Device","text":"<ol> <li> <p>Reset the device to IDE-R (CD-ROM).</p> <p> Figure 4: Reset to IDE-R </p> </li> <li> <p>After the device has finished POST, a menu or process will begin. This will vary based on the <code>.iso</code> file used. In this example, netboot.xyz is used and its menu can be seen.</p> <p>Success</p> <p> Figure 5: IDER Session </p> </li> </ol> <p></p>"},{"location":"Tutorials/ideRedirection/#learn-how-to-integrate-into-a-custom-ui","title":"Learn How to Integrate into a Custom UI","text":"<p>Explore how to add redirection features, such as Keyboard, Video, and Mouse (KVM) and IDE-Redirect (IDER), with prebuilt React components.</p> <p>Get Started with the UI Toolkit</p> <p></p>"},{"location":"Tutorials/modifyUserAuth/","title":"Modify User Authentication","text":"<p>As part of the Open AMT Cloud Toolkit reference implementation, MPS and the Kong service issue and authenticate a JSON Web Token (JWT) for user authentication. The default configuration offers authentication functionality, but it does not support many common configuration options, such as user groups. In a production environment, alternative authentication is available in 0Auth 2, Lightweight Directory Access Protocol (LDAP), Kerberos, and more.</p> <p>The instructions below explain how to add an LDAP plugin to Kong.</p>"},{"location":"Tutorials/modifyUserAuth/#user-authentication-flow","title":"User Authentication Flow","text":"<p>The following diagrams help illustrate the typical user authentication flow. Learn more about the <code>authorize</code> API call in the REST API Call Tutorial or directly in our API Documentation.</p>"},{"location":"Tutorials/modifyUserAuth/#rest-api-user-authentication-flow","title":"REST API User Authentication Flow","text":""},{"location":"Tutorials/modifyUserAuth/#to-authenticate-for-rest-apis","title":"To authenticate for REST APIs:","text":"<ol> <li> <p>Call the MPS REST API <code>/api/v1/authorize</code> to receive an authentication token from the User Auth Service.</p> </li> <li> <p>Perform other desired API calls (e.g. Power Actions, Hardware Info, etc) using the new auth token from Step 1.</p> </li> </ol> <p></p>"},{"location":"Tutorials/modifyUserAuth/#redirection-kvmsol-user-authentication-flow","title":"Redirection (KVM/SOL) User Authentication Flow","text":""},{"location":"Tutorials/modifyUserAuth/#to-authenticate-for-websocket-connections","title":"To authenticate for Websocket connections:","text":"<ol> <li> <p>Call the MPS REST API <code>/api/v1/authorize</code> to receive an authentication token from the User Auth Service.</p> </li> <li> <p>Call the MPS REST API <code>/api/v1/authorize/redirection/{guid}</code> using the auth token from Step 1 to receive a short-lived token directly from MPS for redirection sessions.</p> </li> <li> <p>Pass the short-lived token from Step 2 and the device's GUID to the UI Toolkit module implementation to start a redirection (KVM/SOL) session.</p> </li> </ol> <p>Note - Additional Information</p> <p>When using a 3rd party auth service (e.g. Cognito, LDAP, etc), the token issued by the auth service is used to make calls to the MPS. For non-HTTP calls like redirection, a call must be made to the <code>/api/v1/authorize/redirection/{guid}</code> API to get a separate MPS-specific token required to be passed into the KVM/SOL UI-Toolkit module.</p> <p>API Gateways are only able to verify tokens on HTTP requests.  Open AMT's redirection implementation uses WebSockets for KVM and SOL. Therefore, the API Gateway cannot verify tokens passed in over the WebSocket connections. Because of this, MPS must perform the verification of the token and it can only do that with tokens that it issues.</p> <p></p>"},{"location":"Tutorials/modifyUserAuth/#prerequisites","title":"Prerequisites","text":"<p>Install and start a local LDAP server on the development system. For this tutorial, Go-lang LDAP Authentication* (GLAuth) is referenced. Find more info in the GLAuth Readme. </p> <ol> <li> <p>To install, see steps 1 - 3 of the Quickstart section of the GLAuth Readme. We do not need to alter the sample-simple.cfg file.</p> </li> <li> <p>Allow the Terminal or Powershell to remain open to see LDAP activity as you proceed with the tutorial below.</p> </li> <li> <p>Optionally, download curl for testing the authentication with APIs at the end of this tutorial.</p> </li> </ol>"},{"location":"Tutorials/modifyUserAuth/#edit-the-kongyaml-file","title":"Edit the kong.yaml File","text":"<p>Reconfigure the Kong* API Gateway to use a different user authentication service:</p> <ol> <li> <p>Open the <code>kong.yaml</code> file and comment out the <code>plugins</code> and <code>consumer</code> sections of the code by adding a <code>#</code> character at the beginning of each line. This disables the JWT authentication.</p> </li> <li> <p>Paste the new <code>plugins</code> section into the file. </p> </li> <li> <p>Modify the <code>ldap_host</code> to that of your development system or cloud instance. </p> <pre><code>plugins:\n- name: cors\n- name: ldap-auth\n  route: mps-route\n  config: \n    hide_credentials: true\n    ldap_host: &lt;Server IP-Address or FQDN&gt; # Replace\n    ldap_port: 3893\n    start_tls: false\n    ldaps: false\n    base_dn: dc=glauth,dc=com\n    verify_ldap_host: false\n    attribute: cn\n    cache_ttl: 60\n    header_type: ldap\n- name: ldap-auth\n  route: rps-route\n  config: \n    hide_credentials: true\n    ldap_host: &lt;Server IP-Address or FQDN&gt; # Replace\n    ldap_port: 3893\n    start_tls: false\n    ldaps: false\n    base_dn: dc=glauth,dc=com\n    verify_ldap_host: false\n    attribute: cn\n    cache_ttl: 60\n    header_type: ldap\n</code></pre> <p>Note</p> <p>The following code was adapted for the toolkit. For the default configuration details, see Enable the plugin on a route, on the tab Declarative YAML, in Kong documentation</p> </li> </ol>"},{"location":"Tutorials/modifyUserAuth/#restart-the-kong-gateway-container","title":"Restart the Kong Gateway Container","text":"<ol> <li>Open a Terminal or Powershell/Command Prompt and run the command to list the containers:</li> </ol> <pre><code>docker ps\n</code></pre> <ol> <li>Restart the Kong container:</li> </ol> <pre><code>docker restart &lt;container ID&gt;\n</code></pre>"},{"location":"Tutorials/modifyUserAuth/#test-the-configuration","title":"Test the Configuration","text":"<p>Authenticate a user to test the configuration by using an API of your choice. You will need to set the Authorization header to <code>ldap base64encode(user:pass)</code>.</p> <p>Test the configuration with curl:</p> <p>In the following examples, we use the base64 encoding of <code>johndoe:TestAppPw1</code> as our encoded <code>user:pass</code>. This value is <code>am9obmRvZTpUZXN0QXBwUHcx</code>. These credentials are one of the default credentials in the <code>sample-simple.cfg</code> file provided by GLAuth*.</p> Get Devices (MPS Route)Get Profiles (RPS Route) <p><pre><code>curl --insecure https://[IP-Address or FQDN]/mps/api/v1/devices \\\n    -H \"Authorization: ldap am9obmRvZTpUZXN0QXBwUHcx\"\n</code></pre> See Devices API Docs for more information and expected responses.</p> <p><pre><code>curl --insecure https://[IP-Address or FQDN]/rps/api/v1/admin/profiles \\\n    -H \"Authorization: ldap am9obmRvZTpUZXN0QXBwUHcx\"\n</code></pre> See Get Profiles API Docs for more information and expected responses.</p> <p>Other APIs to test can be found in the MPS API Documentation and RPS API Documentation.</p> <p> </p>"},{"location":"Tutorials/uitoolkitReact/","title":"Add MPS UI Toolkit Controls to a WebUI","text":"<p>The UI Toolkit allows developers to add manageability features to a console with prebuilt React components. The code snippets simplify the task of adding complex manageability UI controls, such as Keyboard, Video, Mouse (KVM). A sample web application, based on React.js, is provided for test and development. </p> <p>The tutorial outlines how to add various controls to the sample React web application provided. Developers can use the sample code below as a springboard for developing their own consoles.</p> Note - Other Framework Technologies <p>This guide shows a basic example implementation using React. Other frameworks can be used using the UI-Toolkit like Angular and Vue.js.</p> <p>For an example implementation of Angular, see our Sample Web UI codebase.</p>"},{"location":"Tutorials/uitoolkitReact/#what-youll-need","title":"What You'll Need","text":""},{"location":"Tutorials/uitoolkitReact/#hardware","title":"Hardware","text":"<p>Configure a network that includes:</p> <ul> <li>A development system running Windows\u00ae 10 or Ubuntu* 22.04 or newer</li> <li>An Activated and Configured Intel\u00ae vPro device as the managed device</li> </ul>"},{"location":"Tutorials/uitoolkitReact/#software","title":"Software","text":"<ul> <li>MPS, the Management Presence Server</li> <li>RPS, the Remote Provisioning Server</li> <li> <p>Intel\u00ae vPro device, configured and connected to MPS</p> <p>Note</p> <p>For instructions to setup the MPS and RPS servers to connect a managed device, see the Get Started Guide</p> </li> <li> <p>The development system requires the following software:</p> <ul> <li>git</li> <li>Visual Studio Code or any other IDE</li> <li>Node.js</li> </ul> </li> </ul>"},{"location":"Tutorials/uitoolkitReact/#what-youll-do","title":"What You'll Do","text":"<p>Follow the steps in these sections sequentially: </p> <ul> <li>Create a new React app</li> <li>Add UI controls to the React app</li> </ul> Figure 1: UI toolkit"},{"location":"Tutorials/uitoolkitReact/#create-a-new-react-app","title":"Create a New React App","text":"<p>The React app can be created in any preferred development directory.</p> <ol> <li> <p>In a Terminal or Command Prompt, go to your preferred development directory. </p> </li> <li> <p>Create a sample React app named <code>my-app</code>.</p> <pre><code>npx create-react-app my-app\n</code></pre> </li> <li> <p>Change to the <code>my-app</code> directory:</p> <pre><code>cd my-app\n</code></pre> </li> </ol>"},{"location":"Tutorials/uitoolkitReact/#install-ui-toolkit","title":"Install UI Toolkit","text":"<ol> <li> <p>Install the UI Toolkit and required dependencies.</p> <pre><code>npm install @open-amt-cloud-toolkit/ui-toolkit-react@3.2.7\n</code></pre> </li> <li> <p>Start the React web UI locally.</p> <pre><code>npm start\n</code></pre> <p>By default, React apps run on port <code>3000</code>. If port <code>3000</code> is already used by the MPS server or any other application, you'll be prompted to use another port. If this happens, enter 'Y'.</p> <p>Success</p> <p> Figure 2: React reports successful deployment </p> <p>Note - Using Chromium Browser and Refreshing</p> <p>By default, React launches in your machine's default browser. However for best experience, navigate to the page using a Chromium based web browser.</p> <p>When you make changes, you do not need to stop the application and restart. It will update and refresh automatically as you make code changes.</p> </li> </ol>"},{"location":"Tutorials/uitoolkitReact/#add-a-sample-control","title":"Add a Sample Control","text":"<p>The following sections outline how to add controls.  Refresh the web browser after adding a control if it does not update automatically after a few seconds.</p>"},{"location":"Tutorials/uitoolkitReact/#add-keyboard-video-mouse-kvm-redirection-and-ide-redirection-ider","title":"Add Keyboard, Video, Mouse (KVM) Redirection and IDE-Redirection (IDER)","text":"<p>The code snippet below adds both the KVM and IDER controls to the React application. </p> <ol> <li> <p>Open <code>./my-app/src/App.js</code> in a text editor or IDE of choice, such as Visual Studio Code or Notepad.</p> </li> <li> <p>Delete the existing code and replace it with the code snippet below.</p> </li> <li> <p>Change the following values:</p> Field Value <code>deviceId</code> Replace the example deviceId value with the GUID of the Intel\u00ae AMT device.  See How to Find GUIDs in Intel\u00ae AMT. <code>mpsServer</code> Replace the localhost with the IP Address or FQDN of your MPS Server.  When using Kong, <code>/mps/ws/relay</code> must be appended to the IP or FQDN. <code>authToken</code> Provide a redirection-specific JWT authentication token. This is different from the <code>/authorize</code> login token. See the <code>/authorize/redirection/{guid}</code> GET API in the Auth section.  For a general example on how to make an API call and how to get an auth token from <code>/authorize</code> to pass to <code>/authorize/redirection/{guid}</code>, see Generating a JWT by using an Authorize API call. <pre><code>import React from \"react\"\nimport \"./App.css\"\nimport { KVM } from \"@open-amt-cloud-toolkit/ui-toolkit-react/reactjs/src/kvm.bundle\";\nimport { AttachDiskImage } from \"@open-amt-cloud-toolkit/ui-toolkit-react/reactjs/src/ider.bundle\";\n\nfunction App() {\n  const deviceGUID = '4c4c4544-005a-3510-8047-b4c04f564433' //Replace with AMT Device GUID\n  const mpsAddress = 'https://localhost/mps/ws/relay' //Replace 'localhost' with MPS Server IP Address or FQDN\n  const auth = '' // Replace with a valid JWT token from 'Authorize Redirection' GET API Method\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;React.Fragment&gt;\n        &lt;AttachDiskImage deviceId={deviceGUID}\n          mpsServer={mpsAddress}\n          authToken={auth}\n        /&gt;\n        &lt;KVM autoConnect={false}\n          deviceId={deviceGUID}\n          mpsServer={mpsAddress}\n          authToken={auth}\n          mouseDebounceTime={200}\n          canvasHeight={'100%'} canvasWidth={'100%'} /&gt;\n      &lt;/React.Fragment&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> <li> <p>If the React app hasn't updated automatically, refresh the page.</p> <p>You are now able to remotely control your Intel\u00ae AMT device using Keyboard, Video, Mouse control.</p> <p>Success</p> <p> Figure 3: Successful KVM Connection </p> </li> </ol>"},{"location":"Tutorials/uitoolkitReact/#troubleshooting","title":"Troubleshooting","text":""},{"location":"Tutorials/uitoolkitReact/#page-will-not-load","title":"Page will not load","text":"<ul> <li>Insure using a Chromium-based browser (Chrome, Microsoft Edge, Firefox) </li> <li>Compilation errors, verify that the ui-toolkit-react npm package was downloaded and installed to the <code>my-app</code> directory, not another directory.</li> </ul>"},{"location":"Tutorials/uitoolkitReact/#connect-kvm-button-does-not-work","title":"<code>Connect KVM</code> Button does not Work","text":"<ul> <li>Is MPS running?</li> <li>Is the AMT device connected to MPS?</li> <li>Was the self-signed certificate accepted? Navigate to the Sample Web UI in a new tab in the same browser and accept the self-signed certificate. Then, return to the React tab and refresh.</li> <li>Verify the redirection JWT token is still valid and not expired. Update if needed. Default expiration time is 5 minutes.</li> <li> <p>Incorrect or invalid JWT for authToken, see MPS API Documentation for <code>/authorize/redirection</code> API. This is a different token and API call from the login token <code>/authorize</code> API.</p> <p>Example authToken Format from <code>/authorize/redirection</code> API Call</p> <pre><code>{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyMDE2OTg2NH0.GUib9sq0RWRLqJ7JpNNlj2AluuROLICCfdZaQzyWy90\"\n}\n</code></pre> </li> </ul> <p></p>"},{"location":"Tutorials/uitoolkitReact/#next-steps","title":"Next Steps","text":""},{"location":"Tutorials/uitoolkitReact/#try-other-controls","title":"Try Other Controls","text":"<p>Try out other React controls such as Serial Over LAN.</p>"},{"location":"Tutorials/uitoolkitReact/#customize-and-create-bundles","title":"Customize and Create Bundles","text":"<p>Try out creating and customizing React bundles for things such as Serial Over LAN or KVM here.</p>"},{"location":"Tutorials/uitoolkitReact/#license-note","title":"License Note","text":"<p>If you are distributing the FortAwesome Icons, please provide attribution to the source per the CC-by 4.0 license obligations.</p>"},{"location":"Tutorials/Scaling/docker-swarm/","title":"Docker Swarm*","text":"<p>This sample deployment demonstrates the use of Docker* in swarm mode. The following conditions apply: </p> <ul> <li>All images are built and tested with <code>docker compose</code>. To learn more about building the images with <code>docker compose</code>, refer to Express Setup. </li> <li>Push images to the registry to make them available for deployment on other systems.  </li> <li>Run the commands below from the <code>open-amt-cloud-toolkit</code> install directory. </li> </ul> <p>Important</p> <p>Not for production use. </p>"},{"location":"Tutorials/Scaling/docker-swarm/#get-the-toolkit","title":"Get the Toolkit","text":"<ol> <li> <p>Open a Terminal or Command Prompt and navigate to a directory of your choice for development:</p> <pre><code>git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0\n</code></pre> </li> <li> <p>Change to the cloned <code>open-amt-cloud-toolkit</code> directory.     <pre><code>cd open-amt-cloud-toolkit\n</code></pre></p> </li> </ol>"},{"location":"Tutorials/Scaling/docker-swarm/#deploy-the-stack-to-the-swarm","title":"Deploy the stack to the swarm","text":"<p>Important - For Linux</p> <p>Before running the following commands on Linux, confirm that the user has been added to the docker group. For instructions, refer to Add docker group. Otherwise, prefix each command with <code>sudo</code>.</p> <ol> <li> <p>Initialize a swarm.      <pre><code>docker swarm init\n</code></pre></p> </li> <li> <p>Copy docker compose config to temporary <code>swarm.yml</code> file.     <pre><code>docker compose -f .\\docker-compose.yml config &gt; swarm.yml\n</code></pre></p> </li> <li> <p>Set the network driver to overlay in the <code>swarm.yml</code> file.</p> LinuxWindows <pre><code>sed\u00a0-i\u00a0\"s|driver:\u00a0bridge|driver:\u00a0overlay|g\"\u00a0swarm.yml\n</code></pre> <pre><code>(Get-Content\u00a0-Path\u00a0'./swarm.yml')\u00a0-replace\u00a0'driver:\u00a0bridge',\u00a0'driver:\u00a0overlay'\u00a0|\u00a0Set-Content\u00a0-Path\u00a0'./swarm.yml'\n</code></pre> <p>Important</p> <p>Open the swarm.yml file to check that <code>driver: bridge</code> was replaced with <code>driver: overlay</code>. If the result is incorrect or corrupted, delete the swarm.yml file, rerun Step 2, and manually replace the string.</p> </li> <li> <p>If you've run <code>docker compose</code> previously, as in the instructions in Express Setup, run <code>docker compose down</code> to stop the open-amt-cloud-toolkit services:    <pre><code>docker compose down -v\n</code></pre></p> </li> <li> <p>Create the stack.     <pre><code>docker stack deploy -c swarm.yml scalingdemo\n</code></pre></p> </li> <li> <p>Check all of the services are running.     <pre><code>docker stack services scalingdemo\n</code></pre></p> <p>Success</p> <p>The table below is an example of a services list: </p> ID NAME MODE REPLICAS IMAGE PORTS 6dye78yg66zp scalingdemo_db replicated 1/1 postgres:latest *:5432-&gt;5432/tcp nahbub6fxrvu scalingdemo_kong replicated 1/1 kong:2.3 :443-&gt;8443/tcp, :8001-&gt;8001/tcp nltp54asb8kz scalingdemo_mps replicated 1/1 mps:latest *:4433-&gt;4433/tcp uc9jsf5554cv scalingdemo_mpsrouter replicated 1/1 mpsrouter:latest ojtcs8qjxct3 scalingdemo_rps replicated 1/1 rps:latest wbk4of70do63 scalingdemo_vault replicated 1/1 vault:latest *:8200-&gt;8200/tcp pc143h8ml4ua scalingdemo_webui replicated 1/1 webui:latest </li> <li> <p>Scale the mps service.     <pre><code>docker service scale scalingdemo_mps=2\n</code></pre></p> <p>Success</p> <p>The table below is an example of a services list after scaling the mps: </p> ID NAME MODE REPLICAS IMAGE PORTS 6dye78yg66zp scalingdemo_db replicated 1/1 postgres:latest *:5432-&gt;5432/tcp nahbub6fxrvu scalingdemo_kong replicated 1/1 kong:2.3 :443-&gt;8443/tcp, :8001-&gt;8001/tcp nltp54asb8kz scalingdemo_mps replicated 2/2 mps:latest *:4433-&gt;4433/tcp uc9jsf5554cv scalingdemo_mpsrouter replicated 1/1 mpsrouter:latest ojtcs8qjxct3 scalingdemo_rps replicated 1/1 rps:latest wbk4of70do63 scalingdemo_vault replicated 1/1 vault:latest *:8200-&gt;8200/tcp pc143h8ml4ua scalingdemo_webui replicated 1/1 webui:latest </li> <li> <p>Remove the stack:     <pre><code>docker stack rm scalingdemo\n</code></pre></p> </li> </ol>"},{"location":"Tutorials/Scaling/overview/","title":"Scaling Overview","text":"<p>Scaling functionality in MPS enables Open AMT Cloud Toolkit to support a greater number of managed devices. The toolkit offers various methods for deploying scaling, including Local Kubernetes, Azure Kubernetes Service (AKS), Amazon Elasic Kubernetes Service (EKS), and Docker Swarm*. In addition, administrators can use kubectl to manage the AKS. </p> Figure 1: High-level architecture of scaling implementation <p>Figure 1 illustrates the basic high-level software flow:</p> <ul> <li>Managed devices use CIRA to connect and call home to instances of the MPS in the cloud. </li> <li>RPCs connect to an available instance of the MPS Server with WSS calls. These calls are funneled through Kong* API Gateway, which supports a variety of APIs. Kong manages load balancing, logging, authentication and more. </li> <li>The Kong* API Gateway handles requests from client apps, such as the Sample Web UI included in Open AMT Cloud Toolkit, sending them along to an available RPS.</li> <li>The MPS Router chooses an available instance of the MPS.</li> <li>The RPS microservices communicate with MPS microservices through the REST API. </li> <li>Vault is a tool used to secure, store, and tightly control access to secrets. Storing passwords used by MPS in Vault will increase the security of these assets.</li> </ul> <p></p>"},{"location":"Tutorials/Scaling/overview/#docker-in-swarm-mode","title":"Docker in Swarm Mode","text":"<p>If you're new to scaling, Docker in swarm mode is a great way to start developing a scaling proof of concept. </p> <p>Docker in swarm mode is a container orchestration tool, software used to deploy and manage large numbers of containers and services. In this mode, Docker enables the administrator to deploy and manage Docker nodes or worker nodes that are added to a Docker swarm instance. Administrator can then deploy a service to the swarm instance and expose ports to an external load balancer.  </p> <p>Information</p> <p>To learn more about Docker in swarm mode, start with Swarm mode overview.</p> <p>Get Started with Docker Swarm</p> <p></p>"},{"location":"Tutorials/Scaling/overview/#kubernetes-k8s","title":"Kubernetes (K8s)","text":"<p>Warning</p> <p>The K8s deployment section is not a tutorial for beginners. It is intended for those who have prior knowledge of the service. To begin learning about K8s, start with Kubernetes, Azure Kubernetes Service, or Amazon Elastic Kubernetes Service.</p>"},{"location":"Tutorials/Scaling/overview/#local-kubernetes","title":"Local Kubernetes","text":"<p>K8s is a container orchestration system that enables administrators to deploy and manage large numbers of containers and services. The instructions use kubectl, a command line tool for managing Kubernetes clusters.</p> <p>Get Started with K8s</p>"},{"location":"Tutorials/Scaling/overview/#azure-kubernetes-service-aks","title":"Azure Kubernetes Service (AKS)","text":"<p>AKS is a container orchestration system that enables administrators to deploy and manage large numbers of containers and services. </p> <p>Get Started with AKS</p>"},{"location":"Tutorials/Scaling/overview/#amazon-elastic-kubernetes-service-eks","title":"Amazon Elastic Kubernetes Service (EKS)","text":"<p>EKS is a container orchestration system that enables administrators to deploy and manage large numbers of containers and services. </p> <p>Get Started with EKS</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/","title":"Azure Kubernetes Service (AKS)","text":"<p>This tutorial demonstrates how to deploy the Open AMT Cloud Toolkit on a Kubernetes cluster using AKS. Alternatively, you can also perform a simpler, test deployment using a single-node cluster locally. See Kubernetes (K8s).</p> <p>Azure Kubernetes Service (AKS) offers serverless Kubernetes, an integrated continuous integration and continuous delivery (CI/CD) experience, and enterprise-grade security and governance. Learn more about AKS here.</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl</li> <li>Azure CLI (v2.24.0+)</li> <li>Helm CLI (v3.5+)</li> <li>PSQL CLI (11.13)</li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#get-the-toolkit","title":"Get the Toolkit","text":"<ol> <li> <p>Clone the Open AMT Cloud Toolkit.</p> <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#create-ssh-key","title":"Create SSH Key","text":"<p>This key is required by Azure to create VMs that use SSH keys for authentication. For more details, see Detailed steps: Create and manage SSH keys.</p> <ol> <li> <p>Create a new ssh key.</p> <pre><code>ssh-keygen -m PEM -t rsa -b 4096\n</code></pre> </li> <li> <p>Take note of the location it was saved at. You will need the public key (<code>.pub</code> file) in a following step. </p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#deploy-aks","title":"Deploy AKS","text":"<ol> <li> <p>Login to Azure.   <pre><code>az login\n</code></pre></p> </li> <li> <p>Provide a name and region to create a new resource group.</p> <pre><code>az group create --name &lt;your-resource-group-name&gt; --location &lt;region&gt;\n</code></pre> </li> <li> <p>Provide the name of your new resource group from the last step and start a deployment at that resource group based on <code>aks.json</code> in the <code>./open-amt-cloud-toolkit</code> directory.</p> <pre><code>az deployment group create --resource-group &lt;your-resource-group-name&gt; --template-file aks.json\n</code></pre> </li> <li> <p>After running the previous command, you will be prompted for 3 different strings. After the final prompt, it will take about 5 minutes to finish running.</p> <ul> <li>Provide a name for the AKS Cluster.</li> <li>Provide a name (e.g. your name) for the linux user admin name.</li> <li>Provide the string of the ssh key from the <code>.pub</code> file.</li> </ul> </li> <li> <p>Take note of the <code>fqdnSuffix</code> in the <code>outputs</code> section of the JSON response (e.g. <code>eastus.cloudapp.azure.com</code>)</p> <pre><code>\"outputs\": {\n  \"controlPlaneFQDN\": {\n    \"type\": \"String\",\n    \"value\": \"bwcluster-9c68035a.hcp.westus.azmk8s.io\"\n  },\n  \"fqdnSuffix\": {\n    \"type\": \"String\",\n    \"value\": \"eastus.cloudapp.azure.com\"\n  }\n},\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#connect-to-aks-instance","title":"Connect to AKS Instance","text":"<p>Ensure your <code>kubectl</code> is connected to the Kubernetes cluster you wish to deploy/manage.</p> <ol> <li> <p>Provide your resource group name and cluster name, respectively.</p> <pre><code>az aks get-credentials --resource-group &lt;your-resource-group-name&gt; --name &lt;your-cluster-name&gt;\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#create-secrets","title":"Create Secrets","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#1-mpskong-jwt","title":"1. MPS/KONG JWT","text":"<p>This is the secret used for generating and verifying JWTs. <pre><code>kubectl create secret generic open-amt-admin-jwt --from-literal=kongCredType=jwt --from-literal=key=\"admin-issuer\" --from-literal=algorithm=HS256 --from-literal=secret=\"&lt;your-secret&gt;\"\n</code></pre></p> <p>Where:</p> <ul> <li>&lt;your-secret&gt; is your chosen strong secret.</li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#2-kong-acl-for-jwt","title":"2. KONG ACL for JWT","text":"<p>This configures KONG with an Access Control List (ACL) to allow an admin user <code>open-amt-admin</code> to access endpoints using the JWT retrieved when logging in. <pre><code>kubectl create secret generic open-amt-admin-acl --from-literal=kongCredType=acl --from-literal=group=open-amt-admin\n</code></pre></p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#3-mps-web-username-and-password","title":"3. MPS Web Username and Password","text":"<p>This is the username and password that is used for requesting a JWT. These credentials are also used for logging into the Sample Web UI. <pre><code>kubectl create secret generic mpsweb --from-literal=user=&lt;your-username&gt; --from-literal=password=&lt;your-password&gt;\n</code></pre></p> <p>Where:</p> <ul> <li>&lt;your-username&gt; is a username of your choice.</li> <li> <p>&lt;your-password&gt; is a strong password of your choice.</p> <p>Important - Using Strong Passwords</p> <p>The password must meet standard, strong password requirements:</p> <ul> <li>8 to 32 characters</li> <li>One uppercase, one lowercase, one numerical digit, one special character</li> </ul> </li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#4-database-connection-strings","title":"4. Database connection strings","text":"<ol> <li> <p>Configure the database connection strings used by MPS, RPS, and MPS Router.  </p> <p>Where:</p> <ul> <li>&lt;USERNAME&gt; is the full username for the Postgres database (Ex: <code>&lt;postgres-username&gt;@&lt;your-cluster-name&gt;-sql</code>).</li> <li>&lt;PASSWORD&gt; is the password for the Postgres database.</li> <li>&lt;SERVERURL&gt; is the url for the Azure-hosted Postgres database (Ex: <code>&lt;your-cluster-name&gt;-sql.postgres.database.azure.com</code>).</li> </ul> </li> <li> <p>Create RPS connection string secret.</p> <pre><code>kubectl create secret generic rps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/rpsdb?sslmode=require\n</code></pre> </li> <li> <p>Create MPS Router connection string secret.</p> <pre><code>kubectl create secret generic mpsrouter --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=require\n</code></pre> </li> <li> <p>Create MPS connection string secret.   </p> <pre><code>kubectl create secret generic mps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=require\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#update-configuration","title":"Update Configuration","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#edit-valuesyaml","title":"Edit values.yaml","text":"<ol> <li> <p>Open the <code>values.yaml</code> file in <code>./open-amt-cloud-toolkit/kubernetes/charts/</code>.</p> </li> <li> <p>Update the <code>service.beta.kubernetes.io/azure-dns-label-name</code> key in the kong section with a desired subdomain name for the URL that you would like for your cluster (i.e. myopenamtk8s).</p> <pre><code>kong:\n  proxy:\n    annotations:\n      service.beta.kubernetes.io/azure-dns-label-name: \"&lt;your-subdomain-name&gt;\"\n</code></pre> </li> <li> <p>Update the <code>commonName</code> key to your FQDN in the <code>mps</code> section.  For AKS, the format is <code>&lt;your-subdomain-name&gt;.&lt;location&gt;.cloudapp.azure.com</code>. This is the <code>fqdnSuffix</code> provided in the <code>outputs</code> section when you Deploy AKS.</p> <pre><code>mps:\n    commonName: \"&lt;your-subdomain-name&gt;.&lt;location&gt;.cloudapp.azure.com\"\n    replicaCount: 1\n    logLevel: \"silly\"\n    jwtExpiration: 1440\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#create-databases-and-schema","title":"Create Databases and Schema","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#enable-access-to-database","title":"Enable Access to Database","text":"<ol> <li> <p>Navigate to <code>Home &gt; Resource Groups &gt; Resource Group Name</code> using Microsoft Azure via online.</p> </li> <li> <p>Select the Postgres DB. It will have a Type of <code>Azure Database for PostgreSQL Server</code>.</p> </li> <li> <p>Under Settings in the left-hand menu, select Connection Security.</p> </li> <li> <p>Under Firewall rules, select Add current client IP address.</p> </li> <li> <p>Select Save.</p> </li> <li> <p>Under the Overview tab, take note of the 'Server name' and 'Admin username'. They will be needed in the next steps.</p> <p>Note</p> <p>Remember to delete this firewall rule when finished.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#create-databases","title":"Create Databases","text":"<ol> <li> <p>Use the database schema files to initialize the hosted Postgres DB in the following steps.</p> <p>Where:</p> <ul> <li>&lt;SERVERURL&gt; is the location of the Postgres database (Ex: <code>&lt;your-cluster-name&gt;-sql.postgres.database.azure.com</code>).</li> <li>&lt;USERNAME&gt; is the admin username for the Postgres database (Ex: <code>&lt;postgres-username&gt;@&lt;your-cluster-name&gt;-sql</code>).</li> </ul> </li> <li> <p>Create the RPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -c \"CREATE DATABASE rpsdb\"\n</code></pre> </li> <li> <p>Create tables for the new 'rpsdb' database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d rpsdb -U &lt;USERNAME&gt; -W -f ./data/init.sql\n</code></pre> </li> <li> <p>Create the MPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -f ./data/initMPS.sql\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#deploy-open-amt-cloud-toolkit-using-helm","title":"Deploy Open AMT Cloud Toolkit using Helm","text":"<ol> <li> <p>Deploy using Helm.     <pre><code>helm install openamtstack ./kubernetes/charts\n</code></pre></p> <p>Success</p> <pre><code>NAME: openamtstack\nLAST DEPLOYED: Thu Jul 15 11:17:38 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n</code></pre> </li> <li> <p>View the pods. You might notice <code>mps</code>, <code>rps</code>, and <code>openamtstack-vault-0</code> are not ready. This will change after we initialize and unseal Vault. All others should be Ready and Running.</p> <pre><code>kubectl get pods\n</code></pre> <p>Success</p> <pre><code>NAME                                                 READY   STATUS                       RESTARTS   AGE\nmps-69786bfb47-92mpc                                 0/1     CreateContainerConfigError   0          2m6s\nmpsrouter-9b9bc499b-2tkb2                            1/1     Running                      0          2m6s\nopenamtstack-kong-68d6c84bcc-fp8dl                   2/2     Running                      0          2m6s\nopenamtstack-vault-0                                 0/1     Running                      0          2m6s\nopenamtstack-vault-agent-injector-6b564845db-zss78   1/1     Running                      0          2m6s\nrps-79877bf5c5-dsg5p                                 0/1     CreateContainerConfigError   0          2m6s\nwebui-6cc48f4d68-6r8b5                               1/1     Running                      0          2m6s\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#initialize-and-unseal-vault","title":"Initialize and Unseal Vault","text":"<p>Danger - Download and Save Vault Keys</p> <p>Make sure to download your Vault credentials and save them in a secure location when unsealing Vault.  If the keys are lost, a new Vault will need to be started and any stored data will be lost.</p> <p>Tip - Finding the Vault UI External IP Address</p> <p>The external IP of your Vault UI service can be found by running:</p> <pre><code>kubectl get services openamtstack-vault-ui\n</code></pre> <ol> <li> <p>Please refer to HashiCorp documentation on how to Initialize and unseal Vault. Stop and return here after signing in to Vault with the <code>root_token</code>.</p> </li> <li> <p>After initializing and unsealing the vault, you need to enable the Key Value engine.</p> </li> <li> <p>Click Enable New Engine +.</p> </li> <li> <p>Choose KV.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>Leave the default path and choose version 2 from the drop down. </p> </li> <li> <p>Click Enable Engine.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#vault-token-secret","title":"Vault Token Secret","text":"<ol> <li> <p>Add the root token as a secret to the AKS cluster so that the services can access Vault.</p> <pre><code>kubectl create secret generic vault --from-literal=vaultKey=&lt;your-root-token&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-root-token&gt; is your <code>root_token</code> generated by Vault.</li> </ul> </li> <li> <p>View the pods. All pods should now be Ready and Running.</p> <pre><code>kubectl get pods\n</code></pre> <p>Success</p> <pre><code>NAME                                                 READY   STATUS      RESTARTS   AGE\nmps-69786bfb47-92mpc                                 1/1     Running     0          4m5s\nmpsrouter-9b9bc499b-2tkb2                            1/1     Running     0          4m5s\nopenamtstack-kong-68d6c84bcc-fp8dl                   2/2     Running     0          4m5s\nopenamtstack-vault-0                                 1/1     Running     0          4m5s\nopenamtstack-vault-agent-injector-6b564845db-zss78   1/1     Running     0          4m5s\nrps-79877bf5c5-dsg5p                                 1/1     Running     0          4m5s\nwebui-6cc48f4d68-6r8b5                               1/1     Running     0          4m5s\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-aks/#next-steps","title":"Next Steps","text":"<p>Visit the Sample Web UI using the FQDN name and Continue from the Get Started steps</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/","title":"Amazon Elastic Kubernetes Service (EKS)","text":"<p>This tutorial demonstrates how to deploy the Open AMT Cloud Toolkit on a Kubernetes cluster using EKS. To perform a simpler test deployment, use a single-mode cluster locally. See Kubernetes (K8s).</p> <p>Amazon EKS offers serverless Kubernetes, an integrated continuous integration and continuous delivery (CI/CD) experience, and enterprise-grade security and governance. Learn more about EKS here.</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl</li> <li>AWS CLI</li> <li>eksctl CLI</li> <li>Helm CLI (v3.5+)</li> <li>PSQL CLI (11.13)</li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#get-the-toolkit","title":"Get the Toolkit","text":"<ol> <li> <p>Clone the Open AMT Cloud Toolkit.</p> <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#create-a-new-eks-cluster","title":"Create a New EKS Cluster","text":"<ol> <li> <p>Follow steps for aws configure to finish configuration of AWS CLI.</p> </li> <li> <p>Follow steps to Create a key pair using Amazon EC2 to create a SSH key for accessing the cluster.</p> </li> <li> <p>Create a new EKS cluster and supporting components.</p> <pre><code>eksctl create cluster --name &lt;cluster-name&gt; --region &lt;region&gt; --with-oidc --ssh-access --ssh-public-key &lt;ssh-keypair-name&gt; --managed\n</code></pre> <p>Where:</p> <ul> <li>&lt;cluster-name&gt; is the name of the new EKS cluster.</li> <li>&lt;region&gt; is the AWS region to deploy the stack (Ex: <code>us-west-2</code>).</li> <li>&lt;ssh-keypair-name&gt; is the name of the SSH key from the previous step.</li> </ul> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#configure-eks-instance","title":"Configure EKS Instance","text":"<p>Ensure your <code>kubectl</code> is connected to the correct EKS cluster to manage.</p> <ol> <li> <p>Provide your region and cluster name.</p> <pre><code>aws eks update-kubeconfig --region &lt;region&gt; --name &lt;cluster-name&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;cluster-name&gt; is the name of your EKS cluster.</li> <li>&lt;region&gt; is the AWS region where the cluster is (Ex: <code>us-west-2</code>).</li> </ul> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#update-access-permissions","title":"Update Access Permissions","text":"<p>In order to be able to see cluster details like resources, networking, and more with the Amazon EKS console, we must configure permissions in the <code>ConfigMap</code>. More information can be found at How do I resolve the \"Your current user or role does not have access to Kubernetes objects on this EKS cluster\" error in Amazon EKS?</p> <ol> <li> <p>Get the configuration of your AWS CLI user or role.</p> <pre><code>aws sts get-caller-identity\n</code></pre> </li> <li> <p>Edit <code>aws-auth ConfigMap</code> in a text editor.</p> <pre><code>kubectl edit configmap aws-auth -n kube-system\n</code></pre> </li> <li> <p>Add the IAM user OR IAM role to the ConfigMap. To allow superuser access for performing any action on any resource, add <code>system:masters</code> instead of <code>system:bootstrappers</code> and <code>system:nodes</code>.</p> Add a RoleAdd a User <pre><code># Add under existing mapRoles section\n# Replace [ROLE-NAME] with your IAM Role\n\nmapRoles: |\n  - rolearn: arn:aws:iam::XXXXXXXXXXXX:role/[ROLE-NAME]\n  username: [ROLE-NAME]\n  groups:\n  - system:bootstrappers\n  - system:nodes\n</code></pre> <pre><code># Alternatively, you can create permissions for a single User rather than a Role\n# Create a new mapUsers section\n# Replace [USER-NAME] with your IAM User\n\nmapUsers: |\n  - rolearn: arn:aws:iam::XXXXXXXXXXXX:role/[USER-NAME]\n  username: [USER-NAME]\n  groups:\n  - system:bootstrappers\n  - system:nodes\n</code></pre> </li> <li> <p>Save and close the text editor window. A success or error message will print to the console after closing the text editor window. If an error shows, verify the correct syntax was used. Additionally, a more detailed error message will be printed within the ConfigMap text file.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#add-ebs-csi-driver-to-cluster","title":"Add EBS CSI driver to Cluster","text":"<p>The Amazon EBS CSI plugin requires IAM permissions to make calls to Amazon APIs on your behalf. This is required for Vault. Without the driver, Vault will be stuck pending since its volume will be unable to be created. This is a new requirement starting in Kubernetes 1.23 and later.</p> <p>Find additional information at Creating the Amazon EBS CSI driver IAM role for service accounts.</p> <ol> <li> <p>Create a new IAM role and attach the required Amazon managed policy. Replace <code>&lt;cluster-name&gt;</code> with the name of your cluster.</p> <pre><code>eksctl create iamserviceaccount \\\n    --name ebs-csi-controller-sa \\\n    --namespace kube-system \\\n    --cluster &lt;cluster-name&gt; \\\n    --attach-policy-arn arn:aws-cn:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \\\n    --approve \\\n    --role-only \\\n    --role-name AmazonEKS_EBS_CSI_DriverRole\n</code></pre> </li> <li> <p>Add the EBS CSI add-on to the cluster. Replace <code>&lt;cluster-name&gt;</code> with the name of your cluster and <code>&lt;account-ID&gt;</code> with your Account ID. Find more information at Managing the Amazon EBS CSI driver as an Amazon EKS add-on.</p> <pre><code>eksctl create addon --name aws-ebs-csi-driver --cluster &lt;cluster-name&gt; --service-account-role-arn arn:aws:iam::&lt;account-ID&gt;:role/AmazonEKS_EBS_CSI_DriverRole --force\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#create-postgres-db-in-rds","title":"Create Postgres DB in RDS","text":"<ol> <li> <p>Create a Postgres DB by following the steps for Creating an Amazon RDS DB instance.</p> <p>Make sure to set the following configuration settings:</p> Field Set to Virtual private cloud (VPC) Choose the VPC created from your cluster.  It should follow the format: 'eksctl-&lt;cluster-name&gt;-cluster/VPC' Public access Yes. In the next steps, we will create Security rules to limit access. VPC security group Choose existing Existing VPC security groups default </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#configure-virtual-private-cloud-vpc-for-access","title":"Configure Virtual Private Cloud (VPC) for access","text":"<ol> <li>Go to RDS home.</li> <li>Select 'Databases' from the left-hand side menu.</li> <li>Select your created database (Ex: database-1).</li> <li>Under Security in Connectivity &amp; security, click on the VPC under VPC security groups (Ex: <code>default (sg-01b4767ggdcb52825)</code>).  </li> <li>Select Inbound rules.</li> <li> <p>Select Edit inbound rules.</p> </li> <li> <p>Select Save rules.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#add-two-new-rules","title":"Add Two New Rules","text":"<p>Rule One:</p> <ol> <li>Select Add rule.</li> <li>Under 'Type' select PostgresSQL.</li> <li>Under 'Source' select My IP.</li> </ol> <p>Rule Two:</p> <ol> <li>Select Add rule.</li> <li>Under 'Type' select PostgresSQL.</li> <li>Under 'Source' select Custom.</li> <li>In the search box, select the security group starting with the label 'eks-cluster-sg'.</li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#create-databases-and-schema","title":"Create Databases and Schema","text":"<ol> <li> <p>Use the database schema files to initialize the hosted Postgres DB in the following steps.</p> <p>Note</p> <p>The following commands will prompt for the database password you chose here.</p> <p>Where:</p> <ul> <li>&lt;SERVERURL&gt; is the location of the Postgres database (Ex: <code>database-1.jotd7t2abapq.us-west-2.rds.amazonaws.com</code>).</li> <li>&lt;USERNAME&gt; is the username for the Postgres database.</li> </ul> </li> <li> <p>Create the RPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -c \"CREATE DATABASE rpsdb\"\n</code></pre> </li> <li> <p>Create tables for the new 'rpsdb'.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d rpsdb -U &lt;USERNAME&gt; -W -f ./open-amt-cloud-toolkit/data/init.sql\n</code></pre> </li> <li> <p>Create the MPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -f ./open-amt-cloud-toolkit/data/initMPS.sql\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#create-secrets","title":"Create Secrets","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#1-mpskong-jwt","title":"1. MPS/KONG JWT","text":"<p>This is the secret used for generating and verifying JWTs.</p> <pre><code>kubectl create secret generic open-amt-admin-jwt --from-literal=kongCredType=jwt --from-literal=key=\"admin-issuer\" --from-literal=algorithm=HS256 --from-literal=secret=\"&lt;your-secret&gt;\"\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-secret&gt; is your chosen strong secret.</li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#2-kong-acl-for-jwt","title":"2. KONG ACL for JWT","text":"<p>This configures KONG with an Access Control List (ACL) to allow an admin user <code>open-amt-admin</code> to access endpoints using the JWT retrieved when logging in.</p> <pre><code>kubectl create secret generic open-amt-admin-acl --from-literal=kongCredType=acl --from-literal=group=open-amt-admin\n</code></pre>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#3-mps-web-username-and-password","title":"3. MPS Web Username and Password","text":"<p>This is the username and password that is used for requesting a JWT. These credentials are also used for logging into the Sample Web UI.</p> <pre><code>kubectl create secret generic mpsweb --from-literal=user=&lt;your-username&gt; --from-literal=password=&lt;your-password&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-username&gt; is a username of your choice.</li> <li> <p>&lt;your-password&gt; is a strong password of your choice.</p> <p>Important - Using Strong Passwords</p> <p>The password must meet standard, strong password requirements:</p> <ul> <li>8 to 32 characters</li> <li>One uppercase, one lowercase, one numerical digit, one special character</li> </ul> </li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#4-database-connection-strings","title":"4. Database connection strings","text":"Warning - Using SSL/TLS with AWS RDS <p>Postgres 14</p> <p>By default, AWS pre-selects Postgres 14. This tutorial uses the connection string setting of <code>no-verify</code> for ease of setup. To fully configure SSL, follow the links below. For production, it is recommended to use a SSL connection.</p> <p>Find more information at Using SSL with a PostgreSQL DB instance and Updating applications to connect to PostgreSQL DB instances using new SSL/TLS certificates.</p> <p>Postgres 15</p> <p>Alternatively, if Postgres 15 is preferred and selected, the <code>sslmode</code> in the connection strings must be updated from <code>no-verify</code>/<code>disable</code> to <code>require</code> for the services to be able to connect to the database.  No other work is required for a test environment.</p> <p>Note: For a fully secured, certificate-based SSL connection, the following steps must be taken in Using SSL with a PostgreSQL DB instance.  It will also require updating <code>sslmode</code> to <code>verify-full</code> or <code>verify-ca</code>.  For production, it is highly recommended.</p> <ol> <li> <p>Configure the database connection strings used by MPS, RPS, and MPS Router.  </p> <p>Where:</p> <ul> <li>&lt;USERNAME&gt; is the username for the Postgres database.</li> <li>&lt;PASSWORD&gt; is the password for the Postgres database.</li> <li>&lt;SERVERURL&gt; is the url for the AWS-hosted Postgres database (Ex: <code>database-1.jotd7t2abapq.us-west-2.rds.amazonaws.com</code>).</li> </ul> </li> <li> <p>Create RPS connection string secret.</p> Postgres 14Postgres 15 <pre><code>kubectl create secret generic rps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/rpsdb?sslmode=no-verify\n</code></pre> <pre><code>kubectl create secret generic rps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/rpsdb?sslmode=require\n</code></pre> </li> <li> <p>Create MPS Router connection string secret.</p> Postgres 14Postgres 15 <pre><code>kubectl create secret generic mpsrouter --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=disable\n</code></pre> <pre><code>kubectl create secret generic mpsrouter --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=require\n</code></pre> </li> <li> <p>Create MPS connection string secret.   </p> Postgres 14Postgres 15 <pre><code>kubectl create secret generic mps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=no-verify\n</code></pre> <pre><code>kubectl create secret generic mps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=require\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#update-configuration","title":"Update Configuration","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#edit-valuesyaml","title":"Edit values.yaml","text":"<ol> <li> <p>Open the <code>values.yaml</code> file in the <code>./open-amt-cloud-toolkit/kubernetes/charts/</code> directory.</p> </li> <li> <p>Remove the annotations section and <code>service.beta.kubernetes.io/azure-dns-label-name</code> key in the <code>kong:</code> section. These are Azure-specific implementations.</p> <pre><code>kong:\n  proxy:\n    annotations: # Delete this line\n      service.beta.kubernetes.io/azure-dns-label-name: \"&lt;your-domain-name&gt;\" # Delete this line\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#deploy-open-amt-cloud-toolkit-using-helm","title":"Deploy Open AMT Cloud Toolkit using Helm","text":"<ol> <li> <p>Deploy using Helm.</p> <pre><code>helm install openamtstack ./kubernetes/charts\n</code></pre> <p>Success</p> <pre><code>NAME: openamtstack\nLAST DEPLOYED: Thu Jul 15 11:17:38 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#initialize-and-unseal-vault","title":"Initialize and Unseal Vault","text":"<p>Danger - Download and Save Vault Keys</p> <p>Make sure to download your Vault credentials and save them in a secure location when unsealing Vault.  If the keys are lost, a new Vault will need to be started and any stored data will be lost.</p> <p>Tip - Finding the Vault UI External IP Address</p> <p>The external IP of your Vault UI service can be found by running:</p> <pre><code>kubectl get services openamtstack-vault-ui\n</code></pre> <ol> <li> <p>Please refer to HashiCorp documentation on how to Initialize and unseal Vault. Stop and return here after signing in to Vault with the <code>root_token</code>.</p> </li> <li> <p>After initializing and unsealing the vault, you need to enable the Key Value engine.</p> </li> <li> <p>Click Enable New Engine +.</p> </li> <li> <p>Choose KV.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>Leave the default path and choose version 2 from the drop down. </p> </li> <li> <p>Click Enable Engine.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#vault-token-secret","title":"Vault Token Secret","text":"<ol> <li> <p>Add the root token as a secret to the EKS cluster so that the services can access Vault.</p> <pre><code>kubectl create secret generic vault --from-literal=vaultKey=&lt;your-root-token&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-root-token&gt; is your <code>root_token</code> generated by Vault.</li> </ul> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#update-commonname-in-valuesyml","title":"Update commonName in values.yml","text":"<ol> <li> <p>Get the <code>External-IP</code> for accessing the UI. Note and save the value under <code>EXTERNAL-IP</code>.</p> <pre><code>kubectl get service openamtstack-kong-proxy\n</code></pre> </li> <li> <p>Update the value for <code>commonName</code> in the mps section in the <code>values.yml</code> file with the <code>External-IP</code> from above.  Recall that <code>values.yml</code> is located in <code>./kubernetes/charts/</code>.</p> <pre><code>mps:\n    commonName: \"\" # update with External-IP from `kubectl get services`\n    replicaCount: 1\n    logLevel: \"silly\"\n    jwtExpiration: 1440\n</code></pre> </li> <li> <p>Update the stack using helm.</p> <pre><code>helm upgrade openamtstack ./kubernetes/charts \n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#verify-running-pods","title":"Verify running pods","text":"<ol> <li> <p>View the pods. All pods should now be Ready and Running.</p> <pre><code>kubectl get pods\n</code></pre> <p>Success</p> <pre><code>NAME                                                 READY   STATUS      RESTARTS   AGE\nmps-69786bfb47-92mpc                                 1/1     Running     0          4m5s\nmpsrouter-9b9bc499b-2tkb2                            1/1     Running     0          4m5s\nopenamtstack-kong-68d6c84bcc-fp8dl                   2/2     Running     0          4m5s\nopenamtstack-vault-0                                 1/1     Running     0          4m5s\nopenamtstack-vault-agent-injector-6b564845db-zss78   1/1     Running     0          4m5s\nrps-79877bf5c5-dsg5p                                 1/1     Running     0          4m5s\nwebui-6cc48f4d68-6r8b5                               1/1     Running     0          4m5s\n</code></pre> </li> <li> <p>Check that the MPS Certificate is correct in your browser. Go to your FQDN at port 4433.</p> <pre><code>https://&lt;Your-AWS-FQDN&gt;:4433\n</code></pre> </li> <li> <p>Verify the MPS Certificate in your browser has the correct Issuer information and is Issued to your FQDN.</p> Troubleshoot - <code>Issued to</code> field showing NaN or blank <p>If your certificate is incorrect, the AMT device will not connect to the MPS server. See Figure 1.</p> <p>Follow the steps below to correct the problem.</p> <p>Example - Incorrect MPS Certificate</p> <p> Figure 1: Incorrect Certificate </p> <ol> <li> <p>Open and Login to Vault UI.</p> </li> <li> <p>Go to <code>kv/data/MPSCerts/</code> directory.</p> </li> <li> <p>Delete the existing MPS Certificate.</p> </li> <li> <p>In a terminal, run the following command.</p> <pre><code>kubectl rollout restart deployment mps \n</code></pre> </li> <li> <p>A new, correct MPS Cert should be generated.</p> </li> <li> <p>Go back to the webserver in your browser.</p> <pre><code>https://&lt;Your-AWS-FQDN&gt;:4433\n</code></pre> </li> <li> <p>Verify the <code>Issued to:</code> field is no longer NaN/blank and now shows the correct FQDN.</p> </li> <li> <p>Continue to Next Steps section.</p> </li> </ol> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s-eks/#next-steps","title":"Next Steps","text":"<p>Visit the Sample Web UI using the FQDN name and Continue from the Get Started steps.</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/","title":"Kubernetes (K8s)","text":"<p>This tutorial demonstrates how to deploy the Open AMT Cloud Toolkit on a local Kubernetes single-node cluster. Alternatively, you can also deploy using a managed service through a Cloud Service Provider such as Azure Kubernetes Service (AKS). See AKS.</p> <p>Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.  Learn more about Kubernetes here.</p>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Docker Desktop with Kubernetes Enabled</p> <p>Important - For Linux</p> <p>If deploying on a Linux machine, Docker Desktop is not available. You must use Docker Engine alongside a local Kubernetes cluster tool such as minikube or kubeadm.</p> </li> <li> <p>kubectl</p> </li> <li>Helm CLI (v3.5+)</li> <li> <p>PostgreSQL Docker Container or Local PostgreSQL server</p> <p>Note - Database Required</p> <p>This guide requires a standalone database for storage. This can be done either as a Docker container or as a local Postgres server on your local IP. For production, a managed database instance, either by a cloud service provider or your enterprise IT, is highly recommended.</p> Optional - How to Set up local PostgreSQL DB using Docker Optional (Not Recommended) - How to Set up Local PostgreSQL server on local IP Address </li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#build-and-start","title":"Build and Start","text":"<ol> <li> <p>Clone the Open AMT Cloud Toolkit.</p> <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0\n</code></pre> </li> <li> <p>Copy the <code>.env.template</code> file to <code>.env</code>.</p> Windows (Cmd Prompt)Linux/Powershell <pre><code>copy .env.template .env\n</code></pre> <pre><code>cp .env.template .env\n</code></pre> </li> <li> <p>Set the POSTGRES_USER and POSTGRES_PASSWORD to the credentials you want.</p> </li> <li> <p>Build and start the container.</p> <pre><code>docker compose  -f \"docker-compose.yml\" up -d db\n</code></pre> </li> <li> <p>Continue from Create Kubernetes Secrets.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#download-and-configure","title":"Download and Configure","text":"<ol> <li> <p>Download and Install PostgreSQL. You may have to add <code>.\\bin</code> and <code>.\\lib</code> to your PATH on Windows.</p> </li> <li> <p>Open the <code>pg_hba.conf</code> file under <code>.\\PostgreSQL\\14\\data</code>.</p> </li> <li> <p>Add your device's IP Address under IPv4 local connections.</p> Example - pg_hba.conf File <pre><code># TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                             scram-sha-256\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32                    scram-sha-256\nhost    all             all             &lt;Your-IP-Address&gt;/24            scram-sha-256\n# IPv6 local connections:\nhost    all             all             ::1/128                         scram-sha-256\n# Allow replication connections from localhost, by a user with the\n# replication privilege.\nlocal   replication     all                                             scram-sha-256\nhost    replication     all             127.0.0.1/32                    scram-sha-256\nhost    replication     all             ::1/128                         scram-sha-256\n</code></pre> </li> <li> <p>Reload the configuration file to use the updated values.</p> <pre><code>psql -U &lt;user&gt; -p 5432 -c \"SELECT pg_reload_conf();\"\n</code></pre> </li> <li> <p>**From here, use your IP Address as the &lt;SERVERURL&gt;. DO NOT use localhost or 127.0.0.1. **</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#get-the-toolkit","title":"Get the Toolkit","text":"<ol> <li> <p>Clone the Open AMT Cloud Toolkit.</p> <pre><code>git clone https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v2.24.0\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#create-kubernetes-secrets","title":"Create Kubernetes Secrets","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#1-mpskong-jwt","title":"1. MPS/KONG JWT","text":"<p>This is the secret used for generating and verifying JWTs.</p> <pre><code>kubectl create secret generic open-amt-admin-jwt --from-literal=kongCredType=jwt --from-literal=key=\"admin-issuer\" --from-literal=algorithm=HS256 --from-literal=secret=\"&lt;your-secret&gt;\"\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-secret&gt; is your chosen strong secret.</li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#2-kong-acl-for-jwt","title":"2. KONG ACL for JWT","text":"<p>This configures KONG with an Access Control List (ACL) to allow an admin user <code>open-amt-admin</code> to access endpoints using the JWT retrieved when logging in.</p> <pre><code>kubectl create secret generic open-amt-admin-acl --from-literal=kongCredType=acl --from-literal=group=open-amt-admin\n</code></pre>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#3-mps-web-username-and-password","title":"3. MPS Web Username and Password","text":"<p>This is the username and password that is used for requesting a JWT. These credentials are also used for logging into the Sample Web UI.</p> <pre><code>kubectl create secret generic mpsweb --from-literal=user=&lt;your-username&gt; --from-literal=password=&lt;your-password&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-username&gt; is a username of your choice.</li> <li> <p>&lt;your-password&gt; is a strong password of your choice.</p> <p>Important - Using Strong Passwords</p> <p>The password must meet standard, strong password requirements:</p> <ul> <li>8 to 32 characters</li> <li>One uppercase, one lowercase, one numerical digit, one special character</li> </ul> </li> </ul>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#4-database-connection-strings","title":"4. Database connection strings","text":"<ol> <li> <p>Configure the database connection strings used by MPS, RPS, and MPS Router.  </p> <p>Where:</p> <ul> <li>&lt;USERNAME&gt; is the username for the Postgres database.</li> <li>&lt;PASSWORD&gt; is the password for the Postgres database.</li> <li>&lt;SERVERURL&gt; is the loction for the Postgres database.</li> </ul> <p>Warning - Using an SSL Connection</p> <p>This tutorial uses the connection string setting of 'disable' for ease of setup. For production, it is recommended to use a SSL connection.</p> </li> <li> <p>Create RPS connection string secret.</p> <pre><code>kubectl create secret generic rps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/rpsdb?sslmode=disable\n</code></pre> </li> <li> <p>Create MPS Router connection string secret.</p> <pre><code>kubectl create secret generic mpsrouter --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=disable\n</code></pre> </li> <li> <p>Create MPS connection string secret.   </p> <pre><code>kubectl create secret generic mps --from-literal=connectionString=postgresql://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;SERVERURL&gt;:5432/mpsdb?sslmode=disable\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#update-configuration","title":"Update Configuration","text":""},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#edit-valuesyaml","title":"Edit values.yaml","text":"<ol> <li> <p>Open the <code>values.yaml</code> file in <code>./open-amt-cloud-toolkit/kubernetes/charts/</code>.</p> </li> <li> <p>Update the <code>commonName</code> key in the mps section with the IP Address of your development device.</p> <pre><code>mps:\n    commonName: \"&lt;your-ip-address&gt;\"\n    replicaCount: 1\n    logLevel: \"silly\"\n    jwtExpiration: 1440\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#create-databases-and-schema","title":"Create Databases and Schema","text":"<ol> <li> <p>Use the database schema files to initialize the hosted Postgres DB in the following steps.</p> <p>Where:</p> <ul> <li>&lt;SERVERURL&gt; is the location of the Postgres database.</li> <li>&lt;USERNAME&gt; is the username for the Postgres database.</li> </ul> </li> <li> <p>Create the RPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -c \"CREATE DATABASE rpsdb\"\n</code></pre> </li> <li> <p>Create tables for the new 'rpsdb'.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d rpsdb -U &lt;USERNAME&gt; -W -f ./data/init.sql\n</code></pre> </li> <li> <p>Create the MPS database.</p> <pre><code>psql -h &lt;SERVERURL&gt; -p 5432 -d postgres -U &lt;USERNAME&gt; -W -f ./data/initMPS.sql\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#deploy-open-amt-cloud-toolkit-using-helm","title":"Deploy Open AMT Cloud Toolkit Using Helm","text":"<ol> <li> <p>Deploy using Helm.     <pre><code>helm install openamtstack ./kubernetes/charts\n</code></pre></p> <p>Success</p> <pre><code>NAME: openamtstack\nLAST DEPLOYED: Wed Jul 14 12:59:29 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n</code></pre> </li> <li> <p>View the pods. You might notice <code>openamtstack-vault-0</code> is not ready. This will change after we initialize and unseal Vault. MPS and RPS will both have a status of CreateContainerConfigError until Vault is Ready.     <pre><code>kubectl get pods\n</code></pre></p> <p>Success</p> <pre><code>NAME                                                 READY   STATUS                       RESTARTS   AGE\nmps-6984b7c69d-8d5gf                                 0/1     CreateContainerConfigError   0          5m\nmpsrouter-9b9bc499b-pwn9j                            1/1     Running                      0          5m\nopenamtstack-kong-55b65d558c-gzv4d                   2/2     Running                      0          5m\nopenamtstack-vault-0                                 0/1     Running                      0          5m\nopenamtstack-vault-agent-injector-7fb7dcfcbd-dlqqg   1/1     Running                      0          5m\nrps-79877bf5c5-hnv8t                                 0/1     CreateContainerConfigError   0          5m\nwebui-784cd49976-bj7z5                               1/1     Running                      0          5m\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#initialize-and-unseal-vault","title":"Initialize and Unseal Vault","text":"<p>Danger - Download and Save Vault Keys</p> <p>Make sure to download your Vault credentials and save them in a secure location when unsealing Vault.  If the keys are lost, a new Vault will need to be started and any stored data will be lost.</p> <ol> <li> <p>Connect to the Vault UI using a web browser.</p> <pre><code>http://localhost:8200\n</code></pre> <p>Troubleshoot - Vault UI External IP</p> <p>If you cannot connect, verify the External IP Address by running: <pre><code>kubectl get services openamtstack-vault-ui\n</code></pre></p> </li> <li> <p>Please refer to HashiCorp documentation on how to Initialize and unseal Vault. Stop and return here after signing in to Vault with the <code>root_token</code>.</p> </li> <li> <p>After initializing and unsealing the vault, you need to enable the Key Value engine.</p> </li> <li> <p>Click Enable New Engine +.</p> </li> <li> <p>Choose KV.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>Click Enable Engine.</p> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#vault-token-secret","title":"Vault Token Secret","text":"<ol> <li> <p>Add the root token as a secret to the k8s cluster so that the services can access Vault.</p> <pre><code>kubectl create secret generic vault --from-literal=vaultKey=&lt;your-root-token&gt;\n</code></pre> <p>Where:</p> <ul> <li>&lt;your-root-token&gt; is your <code>root_token</code> generated by Vault.</li> </ul> </li> <li> <p>View the pods. All pods should now be Ready and Running.     <pre><code>kubectl get pods\n</code></pre></p> <p>Success</p> <pre><code>NAME                                                 READY   STATUS    RESTARTS   AGE\nmps-6984b7c69d-8d5gf                                 1/1     Running   0          7m\nmpsrouter-9b9bc499b-pwn9j                            1/1     Running   0          7m\nopenamtstack-kong-55b65d558c-gzv4d                   2/2     Running   0          7m\nopenamtstack-vault-0                                 1/1     Running   0          7m\nopenamtstack-vault-agent-injector-7fb7dcfcbd-dlqqg   1/1     Running   0          7m\nrps-79877bf5c5-hnv8t                                 1/1     Running   0          7m\nwebui-784cd49976-bj7z5                               1/1     Running   0          7m\n</code></pre> </li> </ol>"},{"location":"Tutorials/Scaling/Kubernetes/deployingk8s/#next-steps","title":"Next Steps","text":"<p>Continue from the Get Started steps</p>"},{"location":"Tutorials/Scaling/Kubernetes/service-mesh/","title":"Enabling KUMA Service Mesh (Optional)","text":"<p>For enhancing security in the Kubernetes deployment, use KUMA Service Mesh to enable mTLS between services. To learn more about KUMA visit their documentation.</p>"},{"location":"Tutorials/Scaling/Kubernetes/service-mesh/#install-kuma-w-helm","title":"Install KUMA w/ Helm","text":"<p>Follow the instructions for installing KUMA with helm.</p>"},{"location":"Tutorials/Scaling/Kubernetes/service-mesh/#create-service-mesh","title":"Create Service Mesh","text":"<p>After KUMA is installed, next create a service mesh with mTLS enabled:</p> <pre><code>echo \"apiVersion: kuma.io/v1alpha1\nkind: Mesh\nmetadata: \n  name: open-amt-cloud-toolkit-mesh\nspec: \n  mtls: \n    enabledBackend: open-amt-cloud-toolkit-cert\n    backends: \n      - name: open-amt-cloud-toolkit-cert\n        type: builtin\n    enabled: true\" | kubectl apply -f -\n</code></pre>"},{"location":"Tutorials/Scaling/Kubernetes/service-mesh/#turn-on-sidecar-injection","title":"Turn On Sidecar Injection","text":"<p>After the mesh is created, turn on sidecar-injection for the open-amt-cloud-toolkit services with: </p> <pre><code>echo \"apiVersion: v1\nkind: Namespace\nmetadata: \n  name: default\n  namespace: default\n  annotations: \n    kuma.io/sidecar-injection: enabled\n    kuma.io/mesh: open-amt-cloud-toolkit-mesh\" | kubectl apply -f -\n</code></pre> <p>Delete all pods to ensure updated annotations from previous command take effect:</p> <pre><code>kubectl delete pod --all -n default\n</code></pre>"},{"location":"Tutorials/Scaling/Kubernetes/service-mesh/#configure-traffic-permissions","title":"Configure Traffic Permissions","text":"<p>Finally, we need to allow traffic between services:</p> <pre><code>echo \"apiVersion: kuma.io/v1alpha1\nkind: TrafficPermission\nmesh: open-amt-cloud-toolkit-mesh\nmetadata:\n  namespace: default\n  name: allow-all-open-amt-cloud-toolkit-mesh\nspec:\n  sources:\n    - match:\n        kuma.io/service: '*'\n  destinations:\n    - match:\n        kuma.io/service: '*'\" | kubectl apply -f -\n</code></pre> <p>After applying traffic permissions, you should now be able to use the Open AMT Cloud Toolkit and continue logging into the web portal following the setup instructions in the Getting Started section.</p>"}]}